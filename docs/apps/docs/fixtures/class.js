// ==========================================================================
// Project:   Docs.Class Fixtures
// Copyright: Â©2011 My Company, Inc.
// ==========================================================================
/*globals Docs */

sc_require('models/class');

Docs.Class.FIXTURES = [
  {
    "guid": 0,
    "name": "_global_",
    "displayName": "_global_",
    "objectType": "symbol",
    "filePath": "",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "testrun",
        "displayName": "testrun",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "Michael Mathews <a href=\"mailto:micmath@gmail.com\">micmath@gmail.com</a>",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Yet another unit testing tool for JavaScript.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "object",
            "name": "testCases",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Properties are testcase names, values are functions to execute as tests."
          }
        ]
      },
      {
        "name": "ok",
        "displayName": "ok",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Check if test evaluates to true.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "True if the string test evaluates to true."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": "To be evaluated."
          },
          {
            "title": "param",
            "type": "string",
            "name": "message",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. To be displayed in the report."
          }
        ]
      },
      {
        "name": "is",
        "displayName": "is",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Check if test is same as expected.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "True if (test == expected). Note that the comparison is not a strict equality check."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": "To be evaluated."
          },
          {
            "title": "param",
            "type": "string",
            "name": "expected",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "string",
            "name": "message",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. To be displayed in the report."
          }
        ]
      },
      {
        "name": "like",
        "displayName": "like",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Check if test matches pattern.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "True if test matches pattern."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": "To be evaluated."
          },
          {
            "title": "param",
            "type": "string",
            "name": "pattern",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Used to create a RegExp."
          },
          {
            "title": "param",
            "type": "string",
            "name": "message",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. To be displayed in the report."
          }
        ]
      },
      {
        "name": "defined",
        "displayName": "defined",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A few helper functions to make life a little easier.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "o",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "main",
        "displayName": "main",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "$Id: main.js 818 2009-11-08 14:51:41Z micmath $",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "print",
        "displayName": "print",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "s",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getDesert",
        "displayName": "getDesert",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "Add",
        "displayName": "Add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "Gabriel Reid",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "So you shouldn't use it anymore! Use {@link Shape#getClassName} instead.",
        "augments": [],
        "overview": "This is an unattached (static) function that adds two integers together.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "One",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The first number to add"
          },
          {
            "title": "param",
            "type": "int",
            "name": "Two",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The second number to add"
          }
        ]
      },
      {
        "name": "flavor^3",
        "displayName": "flavor^3",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the entire flavor.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The entire flavor hash."
          }
        ],
        "params": []
      },
      {
        "name": "flavor^2",
        "displayName": "flavor^2",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get a named flavor.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value of that flavor."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the flavor to get."
          }
        ]
      },
      {
        "name": "flavor",
        "displayName": "flavor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the flavor.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value of that flavor."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the flavor to set."
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value of the flavor."
          }
        ]
      },
      {
        "name": "star",
        "displayName": "star",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getFoo",
        "displayName": "getFoo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets the current foo",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Returns the current foo."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fooId",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The unique identifier for the foo."
          }
        ]
      },
      {
        "name": "Document",
        "displayName": "Document",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Page[]",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "number",
            "name": "id",
            "isOptional": true,
            "defaultValue": "",
            "desc": "Specifies the id, if applicable."
          },
          {
            "title": "param",
            "type": "String",
            "name": "title",
            "isOptional": true,
            "defaultValue": " This is untitled.",
            "desc": "Specifies the title."
          }
        ]
      },
      {
        "name": "valueOf",
        "displayName": "valueOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "string",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "toString",
        "displayName": "toString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "string",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "toSource",
        "displayName": "toSource",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "string",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "constructor",
        "displayName": "constructor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "string",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "publish",
        "displayName": "publish",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called automatically by JsDoc Toolkit.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "symbolSet",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "summarize",
        "displayName": "summarize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Just the first sentence (up to a full stop). Should not break on dotted variable names.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "desc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeSortby",
        "displayName": "makeSortby",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Make a symbol sorter by some attribute.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "attribute",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "include",
        "displayName": "include",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pull in the contents of an external file at the given path.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeSrcFile",
        "displayName": "makeSrcFile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Turn a raw source file into a code-hilited page in the docs.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "srcDir",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeSignature",
        "displayName": "makeSignature",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Build output for displaying function parameters.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "resolveLinks",
        "displayName": "resolveLinks",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find symbol {@link ...} strings in text and turn into html links",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "from",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didBecomeFirstResponder",
        "displayName": "didBecomeFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Show laoding targets view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "selectTarget",
        "displayName": "selectTarget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when you select a target.  Set the target controller then show \n    list state if needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "selectTest",
        "displayName": "selectTest",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when you select the test.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "targetsDidChange",
        "displayName": "targetsDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the targets have loaded.  Pass param whether we have targets \n    or not.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "headers",
        "displayName": "headers",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement transport-specific support for fetching all headers",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "encodedBody",
        "displayName": "encodedBody",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement transport-specific support for fetching tasks",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createRequest",
        "displayName": "createRequest",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates the correct XMLHttpRequest object for this browser.\n\n    You can override this if you need to, for example, create an XHR on a\n    different domain name from an iframe.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "XMLHttpRequest|ActiveXObject",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "DOMContentLoaded",
        "displayName": "DOMContentLoaded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sortOrder",
        "displayName": "sortOrder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fn",
        "displayName": "fn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "func",
        "displayName": "func",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "a",
        "displayName": "a",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "an anonymous constructor executed inline",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bar1",
        "displayName": "bar1",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "named function executed inline",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "g",
        "displayName": "g",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "property of global",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bar2",
        "displayName": "bar2",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "named constructor executed inline",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "module",
        "displayName": "module",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "module pattern",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "x",
        "displayName": "x",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "ecks",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "document",
        "displayName": "document",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "an example var",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "opt",
        "displayName": "opt",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "the options",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "box",
        "displayName": "box",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "the parent",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "mainPane",
        "displayName": "mainPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "_global_",
        "overview": "This is the main pane that is displayed when the application loads.  The\n    main views are configured here including the sidebar, toolbar at the \n    bottom and the iframe.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2592,
    "name": "Array",
    "displayName": "Array",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/shared.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "some",
        "displayName": "Array#some",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extension to builtin array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Boolen if some array members..."
          }
        ],
        "params": []
      },
      {
        "name": "filter",
        "displayName": "Array#filter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extension to builtin array.\nChange every element of an array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Filtered array copy."
          }
        ],
        "params": []
      },
      {
        "name": "indexOf",
        "displayName": "Array#indexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the index for a particular object in the index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of -1 if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item to search for"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting location to search, default 0"
          }
        ]
      },
      {
        "name": "lastIndexOf",
        "displayName": "Array#lastIndexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the last index for a particular object in the index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of -1 if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item to search for"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting location to search, default 0"
          }
        ]
      },
      {
        "name": "copy",
        "displayName": "Array#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return a copy of the receiver.  Default implementation raises\n  an exception.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "copy of receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "deep",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} if true, a deep copy of the object should be made"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2569,
    "name": "Article",
    "displayName": "Article",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/prototype.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "getTitle",
        "displayName": "Article#getTitle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "instance get title",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getTitle",
        "displayName": "Article.getTitle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "static get title",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "title",
        "displayName": "Article#title",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Article",
        "overview": "the instance title",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "counter",
        "displayName": "Article.counter",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Article",
        "overview": "the static counter",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pages",
        "displayName": "Article#pages",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Article",
        "overview": "the value of the pages of the Article instance",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2583,
    "name": "Title",
    "displayName": "Article#Title",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/prototype_oblit_constructor.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "title",
        "displayName": "Article#Title#title",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Article#Title",
        "overview": "the value of the Title instance",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2379,
    "name": "Bakery",
    "displayName": "Bakery",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/event.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Kitchen"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2332,
    "name": "bar",
    "displayName": "bar",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/anon_inner.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "foo",
        "displayName": "bar-foo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "number",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2363,
    "name": "Bar",
    "displayName": "Bar",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/borrows2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "zop",
        "displayName": "Bar#zop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "this is a zop.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "my_zip",
        "displayName": "Bar#my_zip",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Bar",
        "overview": "from Foo",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2599,
    "name": "holder",
    "displayName": "box.holder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/static_this.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "counter",
        "displayName": "box.holder.counter",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "box.holder",
        "overview": "the counter",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2381,
    "name": "CakeShop",
    "displayName": "CakeShop",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/event.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1022,
    "name": "Chain",
    "displayName": "Chain",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Chain.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1019,
    "name": "ChainNode",
    "displayName": "ChainNode",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Chain.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2467,
    "name": "Circle",
    "displayName": "Circle",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Shape"
      }
    ],
    "overview": "Circle class is another subclass of Shape",
    "methods": [
      {
        "name": "getRadius",
        "displayName": "Circle#getRadius",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#setRadius"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the radius value for this Circle",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "setRadius",
        "displayName": "Circle#setRadius",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getRadius"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the radius value for this Circle",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "radius",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The {@link Circle#radius} value to set"
          }
        ]
      },
      {
        "name": "createCircle",
        "displayName": "Circle.createCircle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "An example of a  class (static) method that acts as a factory for Circle\nobjects. Given a radius value, this method creates a new Circle.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "radius",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The radius value to use for the new Circle."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "radius",
        "displayName": "Circle#radius",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Circle",
        "overview": "The radius of the this Circle.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "PI",
        "displayName": "Circle.PI",
        "objectType": "property",
        "propertyType": "float",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Circle",
        "overview": "A very simple class (static) field that is also a constant",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2529,
    "name": "Tangent",
    "displayName": "Circle#Tangent",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/memberof_constructor.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "getDiameter",
        "displayName": "Circle#Tangent#getDiameter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2366,
    "name": "Contact",
    "displayName": "Contact",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/config.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2476,
    "name": "Coordinate",
    "displayName": "Coordinate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Coordinate is a class that can encapsulate location information.",
    "methods": [
      {
        "name": "getX",
        "displayName": "Coordinate#getX",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#setX"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets the x portion of the Coordinate.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getY",
        "displayName": "Coordinate#getY",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#setY"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the y portion of the Coordinate.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "setX",
        "displayName": "Coordinate#setX",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getX"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the x portion of the Coordinate.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The x value to set"
          }
        ]
      },
      {
        "name": "setY",
        "displayName": "Coordinate#setY",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getY"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the y portion of the Coordinate.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "y",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The y value to set"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "x",
        "displayName": "Coordinate#x",
        "objectType": "property",
        "propertyType": "int",
        "author": "",
        "see": [
          "#getX",
          "#setX"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Coordinate",
        "overview": "The x portion of the Coordinate",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "y",
        "displayName": "Coordinate#y",
        "objectType": "property",
        "propertyType": "int",
        "author": "",
        "see": [
          "#getY",
          "#setY"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Coordinate",
        "overview": "The y portion of the Coordinate",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 53056,
    "name": "CoreTest",
    "displayName": "CoreTest",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/testing/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "CoreTest is the unit testing library for SproutCore.  It includes a test \n  runner based on QUnit with some useful extensions for testing SproutCore-\n  based applications.\n  \n  You can use CoreTest just like you would use QUnit in your tests directory.",
    "methods": [
      {
        "name": "K",
        "displayName": "CoreTest.K",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Empty function.  Useful for some operations.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "beget",
        "displayName": "CoreTest.beget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Copied from SproutCore Runtime Core.  Included here to avoid dependencies.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the object to beget"
          }
        ]
      },
      {
        "name": "mixin",
        "displayName": "CoreTest.mixin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Copied from SproutCore Runtime Core.  Included here to avoid dependencies.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the target object to extend"
          },
          {
            "title": "param",
            "type": "",
            "name": "properties",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} one or more objects with properties to copy."
          }
        ]
      },
      {
        "name": "fmt",
        "displayName": "CoreTest.fmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Borrowed from SproutCore Runtime Core",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "stub",
        "displayName": "CoreTest.stub",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a stub function that records any passed arguments and a call\n    count.  You can pass no parameters, a single function or a hash.  \n    \n    If you pass no parameters, then this simply returns a function that does \n    nothing but record being called.  \n    \n    If you pass a function, then the function will execute when the method is\n    called, allowing you to stub in some fake behavior.\n    \n    If you pass a hash, you can supply any properties you want attached to the\n    stub function.  The two most useful are \"action\", which is the function \n    that will execute when the stub runs (as if you just passed a function), \n    and \"expect\" which should evaluate the stub results.\n    \n    In your unit test you can verify the stub by calling stub.expect(X), \n    where X is the number of times you expect the function to be called.  If\n    you implement your own test function, you can actually pass whatever you\n    want.\n    \n    Calling stub.reset() will reset the record on the stub for further \n    testing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "stub function"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the name of the stub to use for logging"
          },
          {
            "title": "param",
            "type": "Function|Hash",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the function or hash"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "OK",
        "displayName": "CoreTest.OK",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "Test is OK",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "FAIL",
        "displayName": "CoreTest.FAIL",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "Test failed",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ERROR",
        "displayName": "CoreTest.ERROR",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "Test raised exception",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "WARN",
        "displayName": "CoreTest.WARN",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "Test raised warning",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "equiv",
        "displayName": "CoreTest.equiv",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "Tests for equality any JavaScript type and structure without unexpected \n  results.\n\n  Discussions and reference: http://philrathe.com/articles/equiv\n  Test suites: http://philrathe.com/tests/equiv\n  Author: Philippe RathÃ© <prathe@gmail.com>",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "Runner",
        "displayName": "CoreTest.Runner",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "SproutCore 1.0",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 53208,
    "name": "Plan",
    "displayName": "CoreTest.Plan",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/testing/system/plan.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A test plan contains a set of functions that will be executed in order.  The\n  results will be recorded into a results hash as well as calling a delegate.\n  \n  When you define tests and modules, you are adding to the active test plan.\n  The test plan is then run when the page has finished loading.\n  \n  Normally you will not need to work with a test plan directly, though if you\n  are writing a test runner application that needs to monitor test progress\n  you may write a delegate to talk to the test plan.\n\n  The CoreTest.Plan.fn hash contains functions that will be made global via\n  wrapper methods.  The methods must accept a Plan object as their first \n  parameter.\n  \n  ## Results \n  \n  The results hash contains a summary of the results of running the test \n  plan.  It includes the following properties:\n  \n   - *assertions* -- the total number of assertions\n   - *tests* -- the total number of tests\n   - *passed* -- number of assertions that passed\n   - *failed* -- number of assertions that failed\n   - *errors* -- number of assertions with errors\n   - *warnings* -- number of assertions with warnings\n  \n  You can also consult the log property, which contains an array of hashes -\n  one for each assertion - with the following properties:\n  \n   - *module* -- module descriptions\n   - *test* -- test description\n   - *message* -- assertion description\n   - *result* -- CoreTest.OK, CoreTest.FAILED, CoreTest.ERROR, CoreTest.WARN",
    "methods": [
      {
        "name": "create",
        "displayName": "CoreTest.Plan.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Define a new test plan instance.  Optionally pass attributes to apply \n    to the new plan object.  Usually you will call this without arguments.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new instance/subclass"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "plan arguments"
          }
        ]
      },
      {
        "name": "synchronize",
        "displayName": "CoreTest.Plan.synchronize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Primitive used to add callbacks to the test plan queue.  Usually you will\n    not want to call this method directly but instead use the module() or \n    test() methods.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "process",
        "displayName": "CoreTest.Plan.process",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Processes items in the queue as long as isRunning remained true.  When\n    no further items are left in the queue, calls finish().  Usually you will\n    not call this method directly.  Instead call run().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "start",
        "displayName": "CoreTest.Plan.start",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins running the test plan after a slight delay to avoid interupting\n    any current callbacks.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "stop",
        "displayName": "CoreTest.Plan.stop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Stops the test plan from running any further.  If you pass a timeout,\n    it will raise an exception if the test plan does not begin executing \n    with the alotted timeout.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "timeout",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional timeout in msec"
          }
        ]
      },
      {
        "name": "pause",
        "displayName": "CoreTest.Plan.pause",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Force the test plan to take a break.  Avoids slow script warnings.  This\n    is called automatically after each test completes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "run",
        "displayName": "CoreTest.Plan.run",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Initiates running the tests for the first time.  This will add an item \n    to the queue to call finish() on the plan when the run completes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "begin",
        "displayName": "CoreTest.Plan.begin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the test plan begins running.  This method will notify the\n    delegate.  You will not normally call this method directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "finish",
        "displayName": "CoreTest.Plan.finish",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When the test plan finishes running, this method will be called to notify\n    the delegate that the plan as finished.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "module",
        "displayName": "CoreTest.Plan.module",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the current module information.  This will be used when a test is\n    added under the module.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "desc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "lifecycle",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setup",
        "displayName": "CoreTest.Plan.setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the current setup method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "teardown",
        "displayName": "CoreTest.Plan.teardown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the current teardown method",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "test",
        "displayName": "CoreTest.Plan.test",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a unit test, adding it to the test plan.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "desc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "htmlbody",
        "displayName": "CoreTest.Plan.htmlbody",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the passed string into HTML and then appends it to the main body \n    element.  This is a useful way to automatically load fixture HTML into the\n    main page.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "string",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "record",
        "displayName": "CoreTest.Plan.record",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Records the results of a test.  This will add the results to the log\n    and notify the delegate.  The passed assertions array should contain \n    hashes with the result and message.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "module",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "assertions",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "timings",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reset",
        "displayName": "CoreTest.Plan.reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Universal method can be called to reset the global state of the \n    application for each test.  The default implementation will reset any\n    saved fixture.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "enabled",
        "displayName": "CoreTest.Plan.enabled",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Can be used to decide if a particular test should be enabled or not.  \n    Current implementation allows a test to run.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "moduleName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "testName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "pass",
        "displayName": "CoreTest.Plan.pass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a matcher to record that a test has passed.  Requires a working\n    test property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fail",
        "displayName": "CoreTest.Plan.fail",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a matcher to record that a test has failed.  Requires a working\n    test property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "warn",
        "displayName": "CoreTest.Plan.warn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a matcher to record that a test issued a warning.  Requires a \n    working test property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "error",
        "displayName": "CoreTest.Plan.error",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a matcher to record that a test had an error.  Requires a \n    working test property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "e",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "prepare",
        "displayName": "CoreTest.Plan.prepare",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Exports the comparison functions into the global namespace.  This will\n    allow you to call these methods from within testing functions.  This \n    method is called automatically just before the first test is run.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Plan",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isRunning",
        "displayName": "CoreTest.Plan.isRunning",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest.Plan",
        "overview": "If true then the test plan is currently running and items in the queue\n    will execute in order.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fn",
        "displayName": "CoreTest.Plan.fn",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest.Plan",
        "overview": "Any methods added to this hash will be made global just before the first\n    test is run.  You can add new methods to this hash to use them in unit\n    tests.  \"this\" will always be the test plan.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 53437,
    "name": "Suite",
    "displayName": "CoreTest.Suite",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/testing/system/suite.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A test Suite defines a group of reusable unit tests that can be added to a \n  test plan at any time by calling the generate() method.  Suites are most\n  useful for defining groups of tests that validate compliance with a mixin.\n  You can then generate customized versions of the test suite for different\n  types of objects to ensure that both the mixin and the object implementing\n  the mixin use the API properly.\n  \n  ## Using a Suite\n  \n  To use a Suite, call the generate() method on the suite inside on of your\n  unit test files.  This will generate new modules and tests in the suite\n  and add them to your test plan.\n  \n  Usually you will need to customize the suite to apply to a specific object.\n  You can supply these customizations through an attribute hash passed to the\n  generate() method.  See the documentation on the specific test suite for\n  information on the kind of customizations you may need to provide.\n  \n  ### Example\n  \n      // generates the SC.ArrayTestSuite tests for a built-in array.\n      SC.ArrayTests.generate('Array', {\n        newObject: function() { return []; }\n      });\n  \n  ## Defining a Suite\n  \n  To define a test suite, simply call the extend() method, passing any \n  attributs you want to define on the stuie along with this method.  You can\n  then add functions that will define the test suite with the define() method.\n  \n  Functions you pass to define will have an instance of the test suite passed\n  as their first parameter when invoked.\n\n  ### Example \n  \n      SC.ArrayTests = CoreTest.Suite.create(\"Verify SC.Array compliance\", {\n      \n        // override to generate a new object that implements SC.Array\n        newObject: function() { return null; }\n      });\n    \n      SC.ArrayTests.define(function(T) {\n        T.module(\"length tests\");\n      \n        test(\"new length\", function() {\n          equals(T.object.get('length'), 0, 'array length');\n        });\n      \n      });",
    "methods": [
      {
        "name": "create",
        "displayName": "CoreTest.Suite#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method to define a new test suite.  Pass one or more hashes of\n    properties you want added to the new suite.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Suite",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "subclass of suite."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more attribute hashes"
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "generate",
        "displayName": "CoreTest.Suite#generate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generate a new test suite instance, adding the suite definitions to the \n    current test plan.  Pass a description of the test suite as well as one or\n    more attribute hashes to apply to the test plan.\n    \n    The description you add will be prefixed in front of the 'desc' property\n    on the test plan itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Suite",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "suite instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "desc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "suite description"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more attribute hashes"
          }
        ]
      },
      {
        "name": "define",
        "displayName": "CoreTest.Suite#define",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the passed function to the array of definitions that will be invoked\n    when the suite is generated.\n    \n    The passed function should expect to have the TestSuite instance passed\n    as the first and only parameter.  The function should actually define \n    a module and tests, which will be added to the test suite.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Suite",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "definition function"
          }
        ]
      },
      {
        "name": "desc",
        "displayName": "CoreTest.Suite#desc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a module description by merging the based description, sub \n    description and the passed description.  This is usually used inside of \n    a suite definition function.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "generated description"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "detailed description for this module"
          }
        ]
      },
      {
        "name": "setup",
        "displayName": "CoreTest.Suite#setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default setup method for use with modules.  This method will call the\n    newObject() method and set its return value on the object property of \n    the receiver.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "teardown",
        "displayName": "CoreTest.Suite#teardown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default teardown method for use with modules.  This method will call the\n    destroyObejct() method, passing the current object property on the \n    receiver.  It will also clear the object property.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "newObject",
        "displayName": "CoreTest.Suite#newObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default method to create a new object instance.  You will probably want\n    to override this method when you generate() a suite with a function that\n    can generate the type of object you want to test.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "generated object"
          }
        ],
        "params": []
      },
      {
        "name": "destroyObject",
        "displayName": "CoreTest.Suite#destroyObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default method to destroy a generated object instance after a test has \n    completed.  If you override newObject() you can also overried this method\n    to cleanup the object you just created.\n    \n    Default method does nothing.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "module",
        "displayName": "CoreTest.Suite#module",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a default module with the description you provide.  This is \n    a convenience function for use inside of a definition function.  You could\n    do the same thing by calling:\n    \n        var T = this ;\n        module(T.desc(description), {\n          setup: function() { T.setup(); },\n          teardown: function() { T.teardown(); }\n        }",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "CoreTest.Suite",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "desc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "detailed descrition"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "definitions",
        "displayName": "CoreTest.Suite#definitions",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest.Suite",
        "overview": "Definition functions.  These are invoked in order when  you generate a \n    suite to add unit tests and modules to the test plan.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "basedesc",
        "displayName": "CoreTest.Suite#basedesc",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTest.Suite",
        "overview": "The base description string.  This should accept two formatting options,\n    a sub description and a detailed description.  This is the description\n    set when you call extend()",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14551,
    "name": "CoreTools",
    "displayName": "CoreTools",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_tools/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "This framework contains common code shared by the SproutCore developer tools\n  including the test runner, doc viewer and welcome apps.  It is not generally\n  intended for use in your own applications.",
    "methods": [],
    "properties": [
      {
        "name": "DataSource",
        "displayName": "CoreTools.DataSource",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools",
        "overview": "This DataSource connects to the SproutCore sc-server to retrieve targets\n  and tests.  Currently this DataSource is read only.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14581,
    "name": "Target",
    "displayName": "CoreTools.Target",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_tools/models/target.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "Describes a target in the build system.",
    "methods": [
      {
        "name": "appUrl",
        "displayName": "CoreTools.Target#appUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "URL to use to load the app.  If no an app, returns null",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "children",
        "displayName": "CoreTools.Target#children",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Children of this target.  Computed by getting the loaded targets",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "displayName",
        "displayName": "CoreTools.Target#displayName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Display name for this target",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "targetIcon",
        "displayName": "CoreTools.Target#targetIcon",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The icon to display.  Based on the type.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sortKind",
        "displayName": "CoreTools.Target#sortKind",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the group key used to display.  Will be the kind unless the item\n    belongs to the sproutcore target.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "tests",
        "displayName": "CoreTools.Target#tests",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns all of the tests associated with this target by fetching the\n    testsUrl.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "CoreTools.Target#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Target",
        "overview": "Name of target.  This is also the primary key.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parent",
        "displayName": "CoreTools.Target#parent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Target",
        "overview": "Parent of target.  Only non-null for nested targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "testsUrl",
        "displayName": "CoreTools.Target#testsUrl",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Target",
        "overview": "URL to use to load tests.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isExpanded",
        "displayName": "CoreTools.Target#isExpanded",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Target",
        "overview": "The isExpanded state.  Defaults to NO on load.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14609,
    "name": "Test",
    "displayName": "CoreTools.Test",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_tools/models/test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [
      {
        "name": "displayName",
        "displayName": "CoreTools.Test#displayName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Display name to show in the tests UI.  This is computed by removing some\n    generic cruft from the filename.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "filename",
        "displayName": "CoreTools.Test#filename",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Test",
        "overview": "The filename for this test.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "url",
        "displayName": "CoreTools.Test#url",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Test",
        "overview": "The test URL.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "CoreTools.Test#icon",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Test",
        "overview": "Test icon.  To be replaced eventually with actual pass|fail icons",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRunnable",
        "displayName": "CoreTools.Test#isRunnable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "CoreTools.Test",
        "overview": "Shows the \"branch\" at the right of the list.  Eventually this will be\n    computed based on whether the test is a summary of other tests or not.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 72,
    "name": "Docs",
    "displayName": "Docs",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Docs is a documentation viewer for SproutCore-based Apps and for the\n  SproutCore framework itself. It runs alongside the sc-docs script (Which\n  ships with the same sc-docs.git repository this app is contained within),\n  and uses a nodejs-based jsdoc-toolkit engine to parse and generate the \n  fixtures data this app will render.\n\n  Known Issues:\n  ----\n\n  - The app currently suffers from some performance problems.\n  - The app lacks proper usage of SC.Routes to make symbols bookmarkable\n     and shareable.\n  - The app lacks an organizational feature (organize by framework)\n  - The app lacks a search feature\n\n  If you encounter any other issues, please let me know (majd@sproutcore.com)",
    "methods": [],
    "properties": [
      {
        "name": "indexHash",
        "displayName": "Docs#indexHash",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Docs",
        "overview": "A hash used to quickly inspect all the data associated with the doc viewer.\n\n    ex. \n\n    {\n      \"SC.Set\": [\n        \"add\", \n        \"edit\"\n      ],\n\n      \"SC.Enumerable\": [\n        \"find\", \n        \"findProperty\"\n      ]\n    }",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allClassesRecordArray",
        "displayName": "Docs#allClassesRecordArray",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Docs",
        "overview": "record array representing all the classes",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 123,
    "name": "Class",
    "displayName": "Docs.Class",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/models/class.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1,
    "name": "classesController",
    "displayName": "Docs.classesController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/controllers/classes.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TreeController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 160,
    "name": "Entity",
    "displayName": "Docs.Entity",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/models/entity.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 172,
    "name": "Method",
    "displayName": "Docs.Method",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/models/method.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 216,
    "name": "Property",
    "displayName": "Docs.Property",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/models/property.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 5,
    "name": "searchController",
    "displayName": "Docs.searchController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/controllers/search_controller.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Majd Taby",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Manages the search feature",
    "methods": [],
    "properties": []
  },
  {
    "guid": 18,
    "name": "selectedClassController",
    "displayName": "Docs.selectedClassController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/docs/apps/docs/controllers/selected_class.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1045,
    "name": "Dumper",
    "displayName": "Dumper",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Dumper.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "<pre>\nThis is a lightly modified version of Kevin Jones' JavaScript\nlibrary Data.Dump. To download the original visit:\n    <a href=\"http://openjsan.org/doc/k/ke/kevinj/Data/Dump/\">http://openjsan.org/doc/k/ke/kevinj/Data/Dump/</a>\n\nAUTHORS\n\nThe Data.Dump JavaScript module is written by Kevin Jones \n(kevinj@cpan.org), based on Data::Dump by Gisle Aas (gisle@aas.no),\nbased on Data::Dumper by Gurusamy Sarathy (gsar@umich.edu).\n\nCOPYRIGHT\n\nCopyright 2007 Kevin Jones. Copyright 1998-2000,2003-2004 Gisle Aas.\nCopyright 1996-1998 Gurusamy Sarathy.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the Perl Artistic License\n\nSee http://www.perl.com/perl/misc/Artistic.html\n</pre>",
    "methods": [
      {
        "name": "dump",
        "displayName": "Dumper.dump",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "...",
            "isOptional": true,
            "defaultValue": "",
            "desc": "The objects to dump."
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2367,
    "name": "Family",
    "displayName": "Family",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/config.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2222,
    "name": "FilePath",
    "displayName": "FilePath",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/run.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Manipulate a filepath.",
    "methods": [
      {
        "name": "resolvePath",
        "displayName": "FilePath#resolvePath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Collapse any dot-dot or dot items in a filepath.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "toDir",
        "displayName": "FilePath#toDir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Trim off the filename.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "upDir",
        "displayName": "FilePath#upDir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Go up a directory.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "fileName",
        "displayName": "FilePath.fileName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Turn a path into just the name of the file.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fileExtension",
        "displayName": "FilePath.fileExtension",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the extension of a filename",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "filename",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "dir",
        "displayName": "FilePath.dir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Turn a path into just the directory part.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2360,
    "name": "Foo",
    "displayName": "Foo",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/borrows2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "zip",
        "displayName": "Foo#zip",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "this is a zip.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "bar",
        "displayName": "Foo#bar",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "zip",
        "displayName": "Foo.zip",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "p",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "q",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "zop",
        "displayName": "Foo.zop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "y",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "blat",
        "displayName": "Foo#blat",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "bar",
        "displayName": "Foo-bar",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "my_zop",
        "displayName": "Foo#my_zop",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo",
        "overview": "from Bar",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "blap",
        "displayName": "Foo-blap",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo",
        "overview": "a private",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2494,
    "name": "Bar",
    "displayName": "Foo.Bar",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "x",
        "displayName": "Foo.Bar#x",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo.Bar",
        "overview": "The x.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "y",
        "displayName": "Foo.Bar#y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo.Bar",
        "overview": "The y.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2521,
    "name": "Fiz",
    "displayName": "Foo.Fiz",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/memberof2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "fipple",
        "displayName": "Foo.Fiz#fipple",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A method of Foo#Fiz.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fop",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2526,
    "name": "Foo2",
    "displayName": "Foo2",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/memberof3.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "bar",
        "displayName": "Foo2#bar",
        "objectType": "property",
        "propertyType": "Object[]",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Foo2",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 1241,
    "name": "FOODOC",
    "displayName": "FOODOC",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/handlers/FOODOC.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "VERSION",
        "displayName": "FOODOC.VERSION",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "FOODOC",
        "overview": "The current version string of this application.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 53612,
    "name": "Function",
    "displayName": "Function",
    "objectType": "symbol",
    "filePath": "",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "count.reset",
        "displayName": "Function.count.reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "count.getValue",
        "displayName": "Function.count.getValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getSig",
        "displayName": "Function#getSig",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getProps",
        "displayName": "Function#getProps",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "invokeLater",
        "displayName": "Function#invokeLater",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a timer that will execute the function after a specified \n    period of time.\n    \n    If you pass an optional set of arguments, the arguments will be passed\n    to the function as well.  Otherwise the function should have the \n    signature:\n    \n        function functionName(timer)",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Timer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "scheduled timer"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} optional target object to use as this"
          },
          {
            "title": "param",
            "type": "",
            "name": "interval",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} the time to wait, in msec"
          }
        ]
      },
      {
        "name": "property",
        "displayName": "Function#property",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates that the function should be treated as a computed property.\n\n    Computed properties are methods that you want to treat as if they were\n    static properties.  When you use get() or set() on a computed property,\n    the object will call the property method and return its value instead of\n    returning the method itself.  This makes it easy to create \"virtual\n    properties\" that are computed dynamically from other properties.\n\n    Consider the following example:\n\n          contact = SC.Object.create({\n\n            firstName: \"Charles\",\n            lastName: \"Jolley\",\n\n            // This is a computed property!\n            fullName: function() {\n              return this.getEach('firstName','lastName').compact().join(' ') ;\n            }.property('firstName', 'lastName'),\n\n            // this is not\n            getFullName: function() {\n              return this.getEach('firstName','lastName').compact().join(' ') ;\n            }\n          });\n\n          contact.get('firstName') ;\n          --> \"Charles\"\n\n          contact.get('fullName') ;\n          --> \"Charles Jolley\"\n\n          contact.get('getFullName') ;\n          --> function()\n\n    Note that when you get the fullName property, SproutCore will call the\n    fullName() function and return its value whereas when you get() a property\n    that contains a regular method (such as getFullName above), then the\n    function itself will be returned instead.\n\n    Using Dependent Keys\n    ----\n\n    Computed properties are often computed dynamically from other member\n    properties.  Whenever those properties change, you need to notify any\n    object that is observing the computed property that the computed property\n    has changed also.  We call these properties the computed property is based\n    upon \"dependent keys\".\n\n    For example, in the contact object above, the fullName property depends on\n    the firstName and lastName property.  If either property value changes,\n    any observer watching the fullName property will need to be notified as\n    well.\n\n    You inform SproutCore of these dependent keys by passing the key names\n    as parameters to the property() function.  Whenever the value of any key\n    you name here changes, the computed property will be marked as changed\n    also.\n\n    You should always register dependent keys for computed properties to\n    ensure they update.\n\n    Sometimes you may need to depend on keys that are several objects deep. In\n    that case, you can provide a path to property():\n\n        capitalizedName: function() {\n          return this.getPath('person.fullName').toUpper();\n        }.property('person.firstName')\n\n    This will cause observers of +capitalizedName+ to be fired when either\n    +fullName+ _or_ +person+ changes.\n\n    Using Computed Properties as Setters\n    ---\n\n    Computed properties can be used to modify the state of an object as well\n    as to return a value.  Unlike many other key-value system, you use the\n    same method to both get and set values on a computed property.  To\n    write a setter, simply declare two extra parameters: key and value.\n\n    Whenever your property function is called as a setter, the value\n    parameter will be set.  Whenever your property is called as a getter the\n    value parameter will be undefined.\n\n    For example, the following object will split any full name that you set\n    into a first name and last name components and save them.\n\n          contact = SC.Object.create({\n\n            fullName: function(key, value) {\n              if (value !== undefined) {\n                var parts = value.split(' ') ;\n                this.beginPropertyChanges()\n                  .set('firstName', parts[0])\n                  .set('lastName', parts[1])\n                .endPropertyChanges() ;\n              }\n              return this.getEach('firstName', 'lastName').compact().join(' ');\n            }.property('firstName','lastName')\n\n          }) ;\n\n    Why Use The Same Method for Getters and Setters?\n    ---\n\n    Most property-based frameworks expect you to write two methods for each\n    property but SproutCore only uses one. We do this because most of the time\n    when you write a setter is is basically a getter plus some extra work.\n    There is little added benefit in writing both methods when you can\n    conditionally exclude part of it. This helps to keep your code more\n    compact and easier to maintain.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the declared function instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String...",
            "name": "dependentKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional set of dependent keys"
          }
        ]
      },
      {
        "name": "cacheable",
        "displayName": "Function#cacheable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can call this method on a computed property to indicate that the\n    property is cacheable (or not cacheable).  By default all computed\n    properties are not cached.  Enabling this feature will allow SproutCore\n    to cache the return value of your computed property and to use that\n    value until one of your dependent properties changes or until you\n    invoke propertyDidChange() and name the computed property itself.\n\n    If you do not specify this option, computed properties are assumed to be\n    not cacheable.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever, useful for chaining calls."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally indicate cacheable or no, default YES"
          }
        ]
      },
      {
        "name": "idempotent",
        "displayName": "Function#idempotent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates that the computed property is volatile.  Normally SproutCore\n    assumes that your computed property is idempotent.  That is, calling\n    set() on your property more than once with the same value has the same\n    effect as calling it only once.\n\n    All non-computed properties are idempotent and normally you should make\n    your computed properties behave the same way.  However, if you need to\n    make your property change its return value everytime your method is\n    called, you may chain this to your property to make it volatile.\n\n    If you do not specify this option, properties are assumed to be\n    non-volatile.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever, useful for chaining calls."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally indicate state, default to YES"
          }
        ]
      },
      {
        "name": "observes",
        "displayName": "Function#observes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Declare that a function should observe an object or property at the named \n    path.  Note that the path is used only to construct the observation one time.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever, useful for chaining calls."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String...",
            "name": "propertyPaths",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A list of strings which indicate the\n      properties being observed"
          }
        ]
      },
      {
        "name": "handleEvents",
        "displayName": "Function#handleEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extends the JS Function object with the handleEvents method that\n  will provide more advanced event handling capabilities when constructing\n  your statechart's states.\n  \n  By default, when you add a method to a state, the state will react to \n  events that matches a method's name, like so:\n  \n  {{{\n  \n    state = SC.State.extend({\n    \n      // Will be invoked when a event named \"foo\" is sent to this state\n      foo: function(event, sender, context) { ... }\n    \n    })\n  \n  }}}\n  \n  In some situations, it may be advantageous to use one method that can react to \n  multiple events instead of having multiple methods that essentially all do the\n  same thing. In order to set a method to handle more than one event you use\n  the handleEvents method which can be supplied a list of string and/or regular\n  expressions. The following example demonstrates the use of handleEvents:\n  \n  {{{\n  \n    state = SC.State.extend({\n    \n      eventHandlerA: function(event, sender, context) {\n      \n      }.handleEvents('foo', 'bar'),\n      \n      eventHandlerB: function(event, sender, context) {\n      \n      }.handleEvents(/num\\d/, 'decimal')\n    \n    })\n  \n  }}}\n  \n  Whenever events 'foo' and 'bar' are sent to the state, the method eventHandlerA\n  will be invoked. When there is an event that matches the regular expression\n  /num\\d/ or the event is 'decimal' then eventHandlerB is invoked. In both \n  cases, the name of the event will be supplied to the event handler. \n  \n  It should be noted that the use of regular expressions may impact performance\n  since that statechart will not be able to fully optimize the event handling logic based\n  on its use. Therefore the use of regular expression should be used sparingly.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "(String|RegExp)...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "stateObserves",
        "displayName": "Function#stateObserves",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extends the JS Function object with the stateObserves method that will\n  create a state observe handler on a given state object. \n  \n  Use a stateObserves() instead of the common observes() method when you want a \n  state to observer changes to some property on the state itself or some other \n  object. \n  \n  Any method on the state that has stateObserves is considered a state observe\n  handler and behaves just like when you use observes() on a method, but with an\n  important difference. When you apply stateObserves to a method on a state, those\n  methods will be active *only* when the state is entered, otherwise those methods\n  will be inactive. This removes the need for you having to explicitly call\n  addObserver and removeObserver. As an example:\n  \n  {{{\n  \n    state = SC.State.extend({\n    \n      foo: null,\n      \n      user: null,\n    \n      observeHandlerA: function(target, key) {\n        \n      }.stateObserves('MyApp.someController.status'),\n      \n      observeHandlerB: function(target, key) {\n      \n      }.stateObserves('foo'),\n      \n      observeHandlerC: function(target, key) {\n      \n      }.stateObserves('.user.name', '.user.salary')\n    \n    })\n  \n  }}}\n  \n  Above, state has three state observe handlers: observeHandlerA, observeHandlerB, and\n  observeHandlerC. When state is entered, the state will automatically add itself as\n  an observer for all of its registered state observe handlers. Therefore when\n  foo changes, observeHandlerB will be invoked, and when MyApp.someController's status\n  changes then observeHandlerA will be invoked. The moment that state is exited then\n  the state will automatically remove itself as an observer for all of its registered\n  state observe handlers. Therefore none of the state observe handlers will be\n  invoked until the next time the state is entered.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 31593,
    "name": "Greenhouse",
    "displayName": "Greenhouse",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "My cool new app.  Describe your application.",
    "methods": [
      {
        "name": "toggleDockedInspector",
        "displayName": "Greenhouse.toggleDockedInspector",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "floatInspector",
        "displayName": "Greenhouse.floatInspector",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "enterState",
        "displayName": "Greenhouse.enterState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "exitState",
        "displayName": "Greenhouse.exitState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "toggleDockedLibrary",
        "displayName": "Greenhouse.toggleDockedLibrary",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "cancel",
        "displayName": "Greenhouse.cancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "create",
        "displayName": "Greenhouse.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "add",
        "displayName": "Greenhouse.add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "DataSource",
        "displayName": "Greenhouse.DataSource",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse",
        "overview": "This DataSource connects to the SproutCore sc-server to retrieve files",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "DropDown",
        "displayName": "Greenhouse.DropDown",
        "objectType": "property",
        "propertyType": "",
        "author": "Jonathan Lewis, Brandon Blatnick\n  \n  This Mixin comes from SCUI: http://github.com/etgryphon/sproutcore-ui and is \n  avaliable under the MIT license",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33569,
    "name": "AnchorView",
    "displayName": "Greenhouse.AnchorView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/anchor.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "(Document Your View Here)",
    "methods": [],
    "properties": [
      {
        "name": "anchorLocation",
        "displayName": "Greenhouse.AnchorView#anchorLocation",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.AnchorView",
        "overview": "The anchor location to display",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "Greenhouse.AnchorView#isEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.AnchorView",
        "overview": "Enabled/disable",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isActive",
        "displayName": "Greenhouse.AnchorView#isActive",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.AnchorView",
        "overview": "Set to YES while the mouse is pressed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "proposedAnchorLocation",
        "displayName": "Greenhouse.AnchorView#proposedAnchorLocation",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.AnchorView",
        "overview": "Proposed anchor location.  Changes as mouse moves/drags",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33655,
    "name": "ApplicationListItem",
    "displayName": "Greenhouse.ApplicationListItem",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/application_list_item.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "This class is here to receive custom editor events",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33048,
    "name": "Design",
    "displayName": "Greenhouse.Design",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/models/design.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31439,
    "name": "designController",
    "displayName": "Greenhouse.designController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/design.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33055,
    "name": "Dir",
    "displayName": "Greenhouse.Dir",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/models/dir.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "dir properties",
    "methods": [],
    "properties": [
      {
        "name": "dir",
        "displayName": "Greenhouse.Dir#dir",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Dir",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "name",
        "displayName": "Greenhouse.Dir#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Dir",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contents",
        "displayName": "Greenhouse.Dir#contents",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Dir",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33658,
    "name": "EventBlocker",
    "displayName": "Greenhouse.EventBlocker",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/event_blocker.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "prevents drag events from hitting iframe \n  \n  thanks to Jonathan Lewis",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33087,
    "name": "File",
    "displayName": "Greenhouse.File",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/models/file.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ChildRecord"
      }
    ],
    "overview": "file properties",
    "methods": [],
    "properties": [
      {
        "name": "dir",
        "displayName": "Greenhouse.File#dir",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.File",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "name",
        "displayName": "Greenhouse.File#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.File",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31444,
    "name": "fileController",
    "displayName": "Greenhouse.fileController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/file.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31452,
    "name": "filesController",
    "displayName": "Greenhouse.filesController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/files.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "TreeController"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "reload",
        "displayName": "Greenhouse.filesController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the files from the server.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 31463,
    "name": "layoutController",
    "displayName": "Greenhouse.layoutController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/layout.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "Layout controller properties used by the layout palette.  The content should\n  be bound to the current page design controller selection.",
    "methods": [
      {
        "name": "hDimNowShowing",
        "displayName": "Greenhouse.layoutController#hDimNowShowing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines which set of dimensions should be visible in the layout \n    palette in the horizontal direction.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "vDimNowShowing",
        "displayName": "Greenhouse.layoutController#vDimNowShowing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines which set of dimensions should be visible in the layout \n    palette in the vertical direction.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 31483,
    "name": "libraryController",
    "displayName": "Greenhouse.libraryController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/library.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "Based on SCUI.SearchableTreeController\n  http://github.com/etgryphon/sproutcore-ui/blob/master/frameworks/foundation/controllers/searchable_tree.js  \n  Thanks to Evin Grano and Brandon Blatnick!",
    "methods": [
      {
        "name": "reload",
        "displayName": "Greenhouse.libraryController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the library from hte server",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "collectionViewDragDataTypes",
        "displayName": "Greenhouse.libraryController#collectionViewDragDataTypes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view just before it starts a drag so that \n    you can provide the data types you would like to support in the data.\n\n    You can implement this method to return an array of the data types you\n    will provide for the drag data.\n\n    If you return null or an empty array, can you have set canReorderContent\n    to YES on the CollectionView, then the drag will go ahead but only \n    reordering will be allowed.  If canReorderContent is NO, then the drag\n    will not be allowed to start.\n\n    If you simply want to control whether a drag is allowed or not, you\n    should instead implement collectionViewShouldBeginDrag().\n\n    The default returns an empty array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of supported data types."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.CollectionView} the collection view to begin dragging."
          }
        ]
      },
      {
        "name": "collectionViewDragDataForType",
        "displayName": "Greenhouse.libraryController#collectionViewDragDataForType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a collection view when a drag concludes to give you the option\n    to provide the drag data for the drop.\n\n    This method should be implemented essentially as you would implement the\n    dragDataForType() if you were a drag data source.  You will never be asked\n    to provide drag data for a reorder event, only for other types of data.\n\n    The default implementation returns null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the data object or null if the data could not be provided."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.CollectionView} \n      the collection view that initiated the drag"
          },
          {
            "title": "param",
            "type": "",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the data type to provide"
          },
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Drag} the drag object"
          }
        ]
      },
      {
        "name": "collectionViewDragViewFor",
        "displayName": "Greenhouse.libraryController#collectionViewDragViewFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Renders a drag view for the passed content indexes. If you return null\n    from this, then a default drag view will be generated for you.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "dragContent",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "ghostActsLikeCursor",
        "displayName": "Greenhouse.libraryController#ghostActsLikeCursor",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.libraryController",
        "overview": "Allows the ghost view created in collectionViewDragViewFor to be displayed\n    like a cursor instead of the default implementation. This sets the view \n    origin to be the location of the mouse cursor.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33669,
    "name": "ListItem",
    "displayName": "Greenhouse.ListItem",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/list_item.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "This class is here to receive custom editor events",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31539,
    "name": "pageController",
    "displayName": "Greenhouse.pageController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/page.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33671,
    "name": "PlistItemView",
    "displayName": "Greenhouse.PlistItemView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/plist_item.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "This class is here to receive custom editor events",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31541,
    "name": "propertyController",
    "displayName": "Greenhouse.propertyController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/property.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31545,
    "name": "propertyEditorController",
    "displayName": "Greenhouse.propertyEditorController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/property_editor.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "buffers changes on property editor",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33724,
    "name": "SimpleButton",
    "displayName": "Greenhouse.SimpleButton",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/simple_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Evin Grano",
    "see": [],
    "since": "0.1",
    "version": "0.1",
    "deprecated": "",
    "augments": [],
    "overview": "This view come from SCUI.SimpleButton\n  \n  Mixin to allow for simple button actions...\n  \n  \n  This Mixin comes from SCUI: http://github.com/etgryphon/sproutcore-ui and is \n  avaliable under the MIT license",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33106,
    "name": "Target",
    "displayName": "Greenhouse.Target",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/models/target.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "Describes a target in the build system.",
    "methods": [
      {
        "name": "appUrl",
        "displayName": "Greenhouse.Target#appUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "URL to use to load the app.  If no an app, returns null",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "displayName",
        "displayName": "Greenhouse.Target#displayName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Display name for this target",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "targetIcon",
        "displayName": "Greenhouse.Target#targetIcon",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The icon to display.  Based on the type.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sortKind",
        "displayName": "Greenhouse.Target#sortKind",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the group key used to display.  Will be the kind unless the item\n    belongs to the sproutcore target.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "Greenhouse.Target#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Target",
        "overview": "Name of target.  This is also the primary key.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parent",
        "displayName": "Greenhouse.Target#parent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Target",
        "overview": "Parent of target.  Only non-null for nested targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "testsUrl",
        "displayName": "Greenhouse.Target#testsUrl",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Target",
        "overview": "URL to use to load tests.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isExpanded",
        "displayName": "Greenhouse.Target#isExpanded",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Greenhouse.Target",
        "overview": "The isExpanded state.  Defaults to NO on load.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31547,
    "name": "targetController",
    "displayName": "Greenhouse.targetController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/target.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31551,
    "name": "targetsController",
    "displayName": "Greenhouse.targetsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/targets.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "The full set of targets available in the application.  This is populated \n  automatically when you call loadTargets().\n  \n  \n  This Class comes from SproutCore's test runner",
    "methods": [
      {
        "name": "reload",
        "displayName": "Greenhouse.targetsController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the targets from the server.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "applications",
        "displayName": "Greenhouse.targetsController#applications",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates the Array of Apps in this project",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 33757,
    "name": "TearOffPicker",
    "displayName": "Greenhouse.TearOffPicker",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/tear_off_picker.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PickerPane"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33125,
    "name": "ViewConfig",
    "displayName": "Greenhouse.ViewConfig",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/models/view_config.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "0.1",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Record"
      }
    ],
    "overview": "(Document your Model here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31558,
    "name": "viewConfigsController",
    "displayName": "Greenhouse.viewConfigsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/controllers/view_configs.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "reload",
        "displayName": "Greenhouse.viewConfigsController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the view configs from the server.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "views",
        "displayName": "Greenhouse.viewConfigsController#views",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates the arrays of views, panes and controllers that can be dropped into this app",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 33777,
    "name": "WebView",
    "displayName": "Greenhouse.WebView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/apps/greenhouse/views/web.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.WebView"
      }
    ],
    "overview": "provides access to the iframes memoryspace",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1071,
    "name": "Hash",
    "displayName": "Hash",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Hash.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2432,
    "name": "Hexagon",
    "displayName": "Hexagon",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Shape"
      }
    ],
    "overview": "Hexagon is a class that is a <i>logical</i> sublcass of \n{@link Shape} (thanks to the <code>&#64;extends</code> tag), but in \nreality it is completely unrelated to Shape.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2248,
    "name": "IO",
    "displayName": "IO",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/run.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A collection of functions that deal with reading a writing to disk.",
    "methods": [
      {
        "name": "saveFile",
        "displayName": "IO.saveFile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create a new file in the given directory, with the given name and contents.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "outDir",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "string",
            "name": "fileName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "string",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "readFile",
        "displayName": "IO.readFile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "copyFile",
        "displayName": "IO.copyFile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "inFile",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "string",
            "name": "outDir",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "string",
            "name": "fileName",
            "isOptional": true,
            "defaultValue": "The original filename",
            "desc": ""
          }
        ]
      },
      {
        "name": "mkPath",
        "displayName": "IO.mkPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a series of nested directories.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeDir",
        "displayName": "IO.makeDir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a directory at the given path.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "ls",
        "displayName": "IO.ls",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An array of all the paths to files in the given dir."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "dir",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The starting directory to look in."
          },
          {
            "title": "param",
            "type": "number",
            "name": "recurse",
            "isOptional": true,
            "defaultValue": "1",
            "desc": "How many levels deep to scan."
          },
          {
            "title": "param",
            "type": "",
            "name": "_allFiles",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "_path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "exists",
        "displayName": "IO.exists",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "open",
        "displayName": "IO.open",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "boolean",
            "name": "append",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setEncoding",
        "displayName": "IO.setEncoding",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets {@link IO.encoding}.\nEncoding is used when reading and writing text to files,\nand in the meta tags of HTML output.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "encoding",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "include",
        "displayName": "IO.include",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Load the given script.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "relativePath",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "includeDir",
        "displayName": "IO.includeDir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Loads all scripts from the given directory path.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2110,
    "name": "JSDOC",
    "displayName": "JSDOC",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "usage",
        "displayName": "JSDOC.usage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Print out usage information and quit.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "Lang",
        "displayName": "JSDOC.Lang",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "Parser",
        "displayName": "JSDOC.Parser",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "PluginManager",
        "displayName": "JSDOC.PluginManager",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "Util",
        "displayName": "JSDOC.Util",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "Use {@link FilePath} instead.",
        "memberOf": "JSDOC",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "VERSION",
        "displayName": "JSDOC.VERSION",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC",
        "overview": "The current version string of this application.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 1347,
    "name": "DocComment",
    "displayName": "JSDOC.DocComment",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/DocComment.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Represents a documentation comment object.",
    "methods": [
      {
        "name": "parse",
        "displayName": "JSDOC.DocComment#parse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "comment",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fixDesc",
        "displayName": "JSDOC.DocComment#fixDesc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If no @desc tag is provided, this function will add it.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "unwrapComment",
        "displayName": "JSDOC.DocComment.unwrapComment",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove slash-star comment wrapper from a raw comment string.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "comment",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "toString",
        "displayName": "JSDOC.DocComment#toString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Provides a printable version of the comment.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getTag",
        "displayName": "JSDOC.DocComment#getTag",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given the title of a tag, returns all tags that have that title.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "tagTitle",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "tags",
        "displayName": "JSDOC.DocComment#tags",
        "objectType": "property",
        "propertyType": "JSDOC.DocTag[]",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC.DocComment",
        "overview": "The tags found in the comment.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shared",
        "displayName": "JSDOC.DocComment.shared",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC.DocComment",
        "overview": "Used to store the currently shared tag text.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 1378,
    "name": "DocTag",
    "displayName": "JSDOC.DocTag",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/DocTag.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "init",
        "displayName": "JSDOC.DocTag#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create and initialize the properties of this.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "parse",
        "displayName": "JSDOC.DocTag#parse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Populate the properties of this from the given tag src.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "toString",
        "displayName": "JSDOC.DocTag#toString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Automatically called when this is stringified.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "nibbleTitle",
        "displayName": "JSDOC.DocTag#nibbleTitle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find and shift off the title of a tag.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "src"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "nibbleType",
        "displayName": "JSDOC.DocTag#nibbleType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find and shift off the type of a tag.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "src"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "nibbleName",
        "displayName": "JSDOC.DocTag#nibbleName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find and shift off the name of a tag.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "src"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 1416,
    "name": "JsDoc",
    "displayName": "JSDOC.JsDoc",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/JsDoc.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "$Id: JsDoc.js 831 2010-03-09 14:24:56Z micmath $",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1448,
    "name": "JsPlate",
    "displayName": "JSDOC.JsPlate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/JsPlate.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1485,
    "name": "Lang",
    "displayName": "JSDOC.Lang",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Lang.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1504,
    "name": "Parser",
    "displayName": "JSDOC.Parser",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Parser.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1549,
    "name": "PluginManager",
    "displayName": "JSDOC.PluginManager",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/PluginManager.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Holds functionality related to running plugins.",
    "methods": [
      {
        "name": "registerPlugin",
        "displayName": "JSDOC.PluginManager.registerPlugin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A unique name that identifies that plugin."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "handlers",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A collection of named functions. The names correspond to hooks in the core code."
          }
        ]
      },
      {
        "name": "run",
        "displayName": "JSDOC.PluginManager.run",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "hook",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the hook that is being caught."
          },
          {
            "title": "param",
            "type": "Mixed",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Any object. This will be passed as the only argument to the handler whose\n\tname matches the hook name. Handlers cannot return a value, so must modify the target\n\tobject to have an effect."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "plugins",
        "displayName": "JSDOC.PluginManager.plugins",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC.PluginManager",
        "overview": "The collection of all plugins. Requires a unique name for each.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 1554,
    "name": "Symbol",
    "displayName": "JSDOC.Symbol",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Symbol.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Represents a symbol in the source code.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1751,
    "name": "SymbolSet",
    "displayName": "JSDOC.SymbolSet",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/SymbolSet.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1829,
    "name": "TextStream",
    "displayName": "JSDOC.TextStream",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/TextStream.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1845,
    "name": "Token",
    "displayName": "JSDOC.Token",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Token.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1852,
    "name": "TokenReader",
    "displayName": "JSDOC.TokenReader",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/TokenReader.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Search a {@link JSDOC.TextStream} for language tokens.",
    "methods": [
      {
        "name": "tokenize",
        "displayName": "JSDOC.TokenReader#tokenize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TextStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_word",
        "displayName": "JSDOC.TokenReader#read_word",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_punc",
        "displayName": "JSDOC.TokenReader#read_punc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_space",
        "displayName": "JSDOC.TokenReader#read_space",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_newline",
        "displayName": "JSDOC.TokenReader#read_newline",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_mlcomment",
        "displayName": "JSDOC.TokenReader#read_mlcomment",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_slcomment",
        "displayName": "JSDOC.TokenReader#read_slcomment",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_dbquote",
        "displayName": "JSDOC.TokenReader#read_dbquote",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_snquote",
        "displayName": "JSDOC.TokenReader#read_snquote",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_numb",
        "displayName": "JSDOC.TokenReader#read_numb",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_hex",
        "displayName": "JSDOC.TokenReader#read_hex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "read_regx",
        "displayName": "JSDOC.TokenReader#read_regx",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Was the token found?"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "JSDOC.TokenStream",
            "name": "stream",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "tokens",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 1893,
    "name": "TokenStream",
    "displayName": "JSDOC.TokenStream",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/TokenStream.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "look",
        "displayName": "JSDOC.TokenStream#look",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "n",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "considerWhitespace",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "next",
        "displayName": "JSDOC.TokenStream#next",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "howMany",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "balance",
        "displayName": "JSDOC.TokenStream#balance",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String",
            "name": "stop",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 1923,
    "name": "Util",
    "displayName": "JSDOC.Util",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Util.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "Use {@link FilePath} instead.",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "fileName",
        "displayName": "JSDOC.Util.fileName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "Use {@link FilePath.fileName} instead.",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fileExtension",
        "displayName": "JSDOC.Util.fileExtension",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "Use {@link FilePath.fileExtension} instead.",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "filename",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "dir",
        "displayName": "JSDOC.Util.dir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "Use {@link FilePath.dir} instead.",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 1930,
    "name": "Walker",
    "displayName": "JSDOC.Walker",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/lib/JSDOC/Walker.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "resolveThis",
        "displayName": "JSDOC.Walker#resolveThis",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resolves what \"this.\" means when it appears in a name.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name with \"this.\" resolved."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name that starts with \"this.\"."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "namescope",
        "displayName": "JSDOC.Walker#namescope",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "JSDOC.Walker",
        "overview": "The chain of symbols under which we are currently nested.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2346,
    "name": "Junkmail",
    "displayName": "Junkmail",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2375,
    "name": "Kitchen",
    "displayName": "Kitchen",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/event.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "cakeEaten",
        "displayName": "Kitchen#cakeEaten",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find out if cake was eaten.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "wasEaten",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2336,
    "name": "Layout",
    "displayName": "Layout",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "init",
        "displayName": "Layout#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "initilize 1",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "p",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getId",
        "displayName": "Layout#getId",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "get the id",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "units",
        "displayName": "Layout.units",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A static method.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getElement",
        "displayName": "Layout#getElement",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "string",
            "name": "id",
            "isOptional": true,
            "defaultValue": "",
            "desc": "The id of the element."
          },
          {
            "title": "param",
            "type": "number|string",
            "name": "elName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the element."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "orientation",
        "displayName": "Layout#orientation",
        "objectType": "property",
        "propertyType": "Page",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Layout",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "xyz",
        "displayName": "Layout#xyz",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Layout",
        "overview": "The xyz.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2562,
    "name": "Canvas",
    "displayName": "Layout#Canvas",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/param_inline.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "initiated",
        "displayName": "Layout#Canvas#initiated",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Layout#Canvas",
        "overview": "Is it initiated yet?",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2344,
    "name": "LibraryItem",
    "displayName": "LibraryItem",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1090,
    "name": "Link",
    "displayName": "Link",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Link.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "hashPrefix",
        "displayName": "Link.hashPrefix",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Link",
        "overview": "prefixed for hashes",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "base",
        "displayName": "Link.base",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Link",
        "overview": "Appended to the front of relative link paths.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2213,
    "name": "LOG",
    "displayName": "LOG",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/run.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Keep track of any messages from the running script.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2384,
    "name": "mxn",
    "displayName": "mxn",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/exports.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2387,
    "name": "Map",
    "displayName": "mxn.Map",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/exports.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "doThings",
        "displayName": "mxn.Map#doThings",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A method.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2608,
    "name": "myObject",
    "displayName": "myObject",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/synonyms.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "myFunc",
        "displayName": "myObject.myFunc",
        "objectType": "property",
        "propertyType": "function",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "myObject",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2531,
    "name": "myProject",
    "displayName": "myProject",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/module.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "myModule",
        "displayName": "myProject.myModule",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "myProject",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2532,
    "name": "myModule",
    "displayName": "myProject.myModule",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/module.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "myPrivateVar",
        "displayName": "myProject.myModule-myPrivateVar",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "myProject.myModule",
        "overview": "describe myPrivateVar here",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2490,
    "name": "MySingletonShapeFactory",
    "displayName": "MySingletonShapeFactory",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "getShape",
        "displayName": "MySingletonShapeFactory#getShape",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the next {@link Shape}",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A new {@link Shape}"
          }
        ],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2348,
    "name": "NewsletterPage",
    "displayName": "NewsletterPage",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments2.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "ThreeColumnPage"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "LibraryItem"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2544,
    "name": "ns1",
    "displayName": "ns1",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/namespace_nested.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This is the first namespace.",
    "methods": [],
    "properties": [
      {
        "name": "ns2",
        "displayName": "ns1.ns2",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "ns1",
        "overview": "This is the second namespace.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2545,
    "name": "ns2",
    "displayName": "ns1.ns2",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/namespace_nested.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "staticField",
        "displayName": "ns1.ns2.staticField",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "ns1.ns2",
        "overview": "A static field in a namespace.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2546,
    "name": "Function1",
    "displayName": "ns1.ns2.Function1",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/namespace_nested.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1167,
    "name": "Opt",
    "displayName": "Opt",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Opt.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "get",
        "displayName": "Opt.get",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get commandline option values.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Short names and values. Like {a:\"xml\", b:true, c:\"new\", d:true}"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Commandline arguments. Like [\"-a=xml\", \"-b\", \"--class=new\", \"--debug\"]"
          },
          {
            "title": "param",
            "type": "object",
            "name": "optNames",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Map short names to long names. Like {a:\"accept\", b:\"backtrace\", c:\"class\", d:\"debug\"}."
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2424,
    "name": "Outer",
    "displayName": "Outer",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/inner.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2425,
    "name": "Inner",
    "displayName": "Outer-Inner",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/inner.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "name",
        "displayName": "Outer-Inner#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Outer-Inner",
        "overview": "The name of this.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2509,
    "name": "pack",
    "displayName": "pack",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/memberof.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "install",
        "displayName": "pack.install",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "install.overwrite",
        "displayName": "pack.install.overwrite",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "clean",
        "displayName": "pack.clean",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2340,
    "name": "Page",
    "displayName": "Page",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Layout"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "reset",
        "displayName": "Page#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "reset the page",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2370,
    "name": "Person",
    "displayName": "Person",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/constructs.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "sing",
        "displayName": "Person#sing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "like say but more musical",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "song",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2595,
    "name": "Queue",
    "displayName": "Queue",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/shared.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2443,
    "name": "Rectangle",
    "displayName": "Rectangle",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "Gabriel Reid",
    "see": [
      "Shape is the base class for this"
    ],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Shape"
      }
    ],
    "overview": "A basic rectangle class, inherits from Shape.\nThis class could be considered a concrete implementation class",
    "methods": [
      {
        "name": "getClassName",
        "displayName": "Rectangle#getClassName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the type of this object.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getWidth",
        "displayName": "Rectangle#getWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Rectangle#setWidth"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the value of the width for the Rectangle",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getHeight",
        "displayName": "Rectangle#getHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Rectangle#setHeight"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the value of the height for the Rectangle.\nAnother getter is the {@link Shape#getColor} method in the \n{@link Shape} base class.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The height of this Rectangle"
          }
        ],
        "params": []
      },
      {
        "name": "setWidth",
        "displayName": "Rectangle#setWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#setWidth"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the width value for this Rectangle.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "width",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The width value to be set"
          }
        ]
      },
      {
        "name": "setHeight",
        "displayName": "Rectangle#setHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getHeight"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the height value for this Rectangle.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "height",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The height value to be set"
          }
        ]
      },
      {
        "name": "getArea",
        "displayName": "Rectangle#getArea",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the value for the total area of this Rectangle",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "total area of this Rectangle"
          }
        ],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 1187,
    "name": "Reflection",
    "displayName": "Reflection",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/Reflection.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 53611,
    "name": "RegExp",
    "displayName": "RegExp",
    "objectType": "symbol",
    "filePath": "",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "escapeMeta",
        "displayName": "RegExp.escapeMeta",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the given string with all regex meta characters backslashed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 2540,
    "name": "Response",
    "displayName": "Response",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/name.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "text",
        "displayName": "Response#text",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets the body of the response as plain text",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Response as text"
          }
        ],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 53514,
    "name": "AceTheme",
    "displayName": "SC.AceTheme",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/themes/ace/theme.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "SproutCore's Ace theme.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 53520,
    "name": "Dark",
    "displayName": "SC.AceTheme.Dark",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/themes/ace/theme.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "SC.AceTheme.Dark\nSproutCore's Ace theme's Dark Side. Used in popovers or wherever you\nchoose (use it by making the view or one of its parents have a\nthemeName of 'dark').",
    "methods": [],
    "properties": []
  },
  {
    "guid": 21742,
    "name": "AlertPane",
    "displayName": "SC.AlertPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/alert.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PanelPane"
      }
    ],
    "overview": "Displays a preformatted modal alert pane.\n  \n  Alert panes are a simple way to provide modal messaging that otherwise \n  blocks the user's interaction with your application.  Alert panes are \n  useful for showing important error messages and confirmation dialogs. They\n  provide a better user experience than using the OS-level alert dialogs.\n  \n  ## Displaying an Alert Pane\n  \n  The easiest way to display an alert pane is to use one of the various\n  class methods defined on `SC.AlertPane`, passing the message and an optional\n  detailed description and caption.\n  \n  There are four variations of this method can you can invoke:\n  \n   - `warn()` -- displays an alert pane with a warning icon to the left.\n   - `error()` -- displays an alert with an error icon to the left\n   - `info()` -- displays an alert with an info icon to the left\n   - `plain()` -- displays an alert w/o any icon\n   - `show()` -- displays an alert with a customizable icon to the left\n  \n  In addition to passing a message, description and caption, you can also customize\n  the title of the button 1 (OK) and add an optional button 2 and 3 (Cancel or Extra).\n  \n   - button1 -- 1st button from the right. default:OK\n   - button2 -- 2nd button from the right. Optional. Could be Cancel or 2nd action.\n   - button3 -- 1st button from the left. Optional. Could be Cancel or alternative option.\n  \n  Additionally, you can define a delegate object.  This delegate's \n  `alertPaneDidDismiss()` method will be called when the pane\n  is dismissed, passing the pane instance and a key indicating which \n  button was pressed.\n  \n  ## Examples\n  \n  Show a simple AlertPane with an OK button:\n  \n      SC.AlertPane.warn({\n        message: \"Could not load calendar\",\n        description: \"Your internet connection may be unavailable or our servers may be down.\",\n        caption: \"Try again in a few minutes.\"\n      });\n  \n  Show an AlertPane with a customized OK title (title will be 'Try Again') and\n  custom action:\n  \n      SC.AlertPane.warn({\n        message: \"Could not load calendar\",\n        description: \"Your internet connection may be unavailable or our servers may be down.\",\n        caption: \"Try again in a few minutes.\",\n        buttons: [\n          { title: \"Try Again\" }\n        ]\n      });\n  \n  Show an AlertPane with a custom OK, a Cancel button and an Extra button, \n  each with custom titles.  Also, pass a delegate that will be invoked when\n  the user's dismisses the dialog.\n  \n      MyApp.calendarController = SC.Object.create({\n        alertPaneDidDismiss: function(pane, status) {\n          switch(status) {\n            case SC.BUTTON1_STATUS:\n              this.tryAgain();\n              break;\n            \n            case SC.BUTTON2_STATUS:\n              // do nothing\n              break;\n            \n            case SC.BUTTON3_STATUS:\n              this.showMoreInfo();\n              break;\n          }\n        },\n        ...\n      });\n    \n    \n      SC.AlertPane.warn({\n        message: \"Could not load calendar\",\n        description: \"Your internet connection may be unavailable or our servers may be down.\",\n        caption: \"Try again in a few minutes.\",\n        delegate: MyApp.calendarController,\n        buttons: [\n          { title: \"Try Again\" },\n          { title: \"Cancel\" },\n          { title: \"More Infoâ¦\" }\n        ]\n      });\n  \n  Instead of using the delegate pattern above, you can also specify a target\n  and an action, similar to SC.ButtonView.\n  \n      SC.AlertPane.warn({\n        message: \"Could not load calendar\",\n        description: \"Your internet connection may be unavailable or our servers may be down.\",\n        caption: \"Try again in a few minutes.\",\n        buttons: [\n          { \n            title: \"OK\", \n            action: \"didClickOK\",\n            target: MyApp.calendarController\n          }\n        ]\n      });\n  \n  Also note that in addition to passing the action as a string of the method\n  name that will be invoked, you can also give a function reference as the\n  action.",
    "methods": [
      {
        "name": "dismiss",
        "displayName": "SC.AlertPane#dismiss",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Action triggered whenever any button is pressed. Also the hides the \n    alertpane itself.\n    \n    This will trigger the following chain of events:\n\n     1. If a delegate was given, and it has alertPaneDidDismiss it will be called\n     2. Otherwise it will look for the action of the button and call:\n      a) The action function reference if one was given\n      b) The action method on the target if one was given\n      c) If both a and b are missing, call the action on the rootResponder",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": "- the button view that was clicked"
          }
        ]
      },
      {
        "name": "show",
        "displayName": "SC.AlertPane.show",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Show a dialog with a given set of hash attributes:\n    \n        SC.AlertPane.show({\n          message: \"Could not load calendar\",\n          description: \"Your internet connection may be unavailable or our servers may be down.\",\n          caption: \"Try again in a few minutes.\",\n          delegate: MyApp.calendarController\n        });\n    \n    See more examples for how to configure buttons and individual actions in the \n    documentation for the `SC.AlertPane` class.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.AlertPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane shown"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "warn",
        "displayName": "SC.AlertPane.warn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as `show()` just that it uses sc-icon-alert-48 CSS classname\n    as the dialog icon",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.AlertPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane shown"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "info",
        "displayName": "SC.AlertPane.info",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as `show()` just that it uses sc-icon-info-48 CSS classname\n    as the dialog icon",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.AlertPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane shown"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "error",
        "displayName": "SC.AlertPane.error",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as `show()` just that it uses sc-icon-error-48 CSS classname\n    as the dialog icon",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.AlertPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane shown"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "plain",
        "displayName": "SC.AlertPane.plain",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as `show()` just that it uses blank CSS classname\n    as the dialog icon",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.AlertPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane shown"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.AlertPane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "",
        "defaultValue": "['sc-alert']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.AlertPane#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The WAI-ARIA role for alert pane.",
        "defaultValue": "'alertdialog'",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "delegate",
        "displayName": "SC.AlertPane#delegate",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "If defined, the delegate is notified when the pane is dismissed. If you have \n    set specific button actions, they will be called on the delegate object\n    \n    The method to be called on your delegate will be:\n    \n        alertPaneDidDismiss: function(pane, status) {}\n    \n    The status will be one of `SC.BUTTON1_STATUS`, `SC.BUTTON2_STATUS` or `SC.BUTTON3_STATUS`\n    depending on which button was clicked.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.AlertPane#icon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The icon URL or class name. If you do not set this, an alert icon will\n    be shown instead.",
        "defaultValue": "'sc-icon-alert-48'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "message",
        "displayName": "SC.AlertPane#message",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The primary message to display. This message will appear in large bold\n    type at the top of the alert.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaLabel",
        "displayName": "SC.AlertPane#ariaLabel",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The ARIA label for the alert is the message, by default.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "description",
        "displayName": "SC.AlertPane#description",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "An optional detailed decription. Use this string to provide further\n    explanation of the condition and, optionally, ways the user can resolve\n    the problem.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayDescription",
        "displayName": "SC.AlertPane#displayDescription",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "An escaped and formatted version of the description property.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "caption",
        "displayName": "SC.AlertPane#caption",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "An optional detailed caption. Use this string to provide further\n    fine print explanation of the condition and, optionally, ways the user can resolve\n    the problem.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayCaption",
        "displayName": "SC.AlertPane#displayCaption",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "An escaped and formatted version of the caption property.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "button1",
        "displayName": "SC.AlertPane#button1",
        "objectType": "property",
        "propertyType": "SC.ButtonView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The button view for button 1 (OK).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "button2",
        "displayName": "SC.AlertPane#button2",
        "objectType": "property",
        "propertyType": "SC.ButtonView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The button view for the button 2 (Cancel).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "button3",
        "displayName": "SC.AlertPane#button3",
        "objectType": "property",
        "propertyType": "SC.ButtonView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The button view for the button 3 (Extra).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonThreeWrapper",
        "displayName": "SC.AlertPane#buttonThreeWrapper",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "The view for the button 3 (Extra) wrapper.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layout",
        "displayName": "SC.AlertPane#layout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [
          "SC.View#layout"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AlertPane",
        "overview": "",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 4887,
    "name": "Animatable",
    "displayName": "SC.Animatable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/animation/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A simple mixin called Animatable is provided. What does it do?\n  It makes CSS transitions for you, and if they aren't available,\n  implements them in JavaScript.\n\n  ## Animatable things:\n\n    - layout. You can animate any layout property, even centerX and centerY\n    - opacity.\n    - display, in a way. All animating display does is delay setting display:none\n      until <em>after</em> the transition duration has passed. This allows you\n      to set display:none after fading out. If mixing with CSS transitions, you will\n      need to set the delay a tad longer to accomodate any delays in beginning the\n      transition.\n\n  ## Example Usage:\n\n      aView: SC.LabelView.design(SC.Animatable, {\n        transitions: {\n          left: {duration: .25},\n          top: .25, // only possible during design; otherwise you must use long form.\n          width: {duration: .25, timing: SC.Animatable.TRANSITION_EASE_IN_OUT }\n        }\n      })",
    "methods": [
      {
        "name": "disableAnimation",
        "displayName": "SC.Animatable#disableAnimation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Disables animation.\n\n  It is like parenthesis. Each \"disable\" must be matched by an \"enable\".\n  If you call disable twice, you need two enables to start it. Three times, you need\n  three enables.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "enableAnimation",
        "displayName": "SC.Animatable#enableAnimation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Enables animation if it was disabled (or moves towards that direction, at least).",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "adjust",
        "displayName": "SC.Animatable#adjust",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds support for some style properties to adjust.\n\n  These added properties are currently:\n\n   - opacity.\n   - display.\n\n  This is a complete rewrite of adjust. Its performance can probably be boosted. Do it!",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "dictionary",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getCurrentJavaScriptStyles",
        "displayName": "SC.Animatable#getCurrentJavaScriptStyles",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current set of styles and layout according to JavaScript transitions.\n\n  That is, for transitions managed by JavaScript (rather than CSS), the current position\n  (even mid-transition) will be returned. For CSS-based transitions, the target position\n  will be returned. This function is mostly useful for testing.\n\n  It will return null if there is no such style.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "resetAnimation",
        "displayName": "SC.Animatable#resetAnimation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets animation, stopping all existing animations.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "updateStyle",
        "displayName": "SC.Animatable#updateStyle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Immediately applies styles to elements, and starts any needed transitions.\n\n  Called automatically when style changes, but if you need styles to be adjusted\n  immediately (for instance, if you have temporarily disabled animation to set a\n  start state), you may want to call manually too.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "updateLayout",
        "displayName": "SC.Animatable#updateLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Overriden to support animation.\n\n  Works by copying the styles to the object's \"style\" property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "firstTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseLocation",
        "displayName": "SC.Animatable.mouseLocation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a Point containing the last known X and Y coordinates of the\n    mouse, if present.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "init",
        "displayName": "SC.Animatable.init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Initialize the object with some properties up front",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "setup",
        "displayName": "SC.Animatable.setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "As soon as the DOM is up and running, make sure we attach necessary\n    event handlers",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "orientationHandlingShouldChange",
        "displayName": "SC.Animatable.orientationHandlingShouldChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines which method to use for orientation changes.\n    Either detects orientation changes via the current size\n    of the window, or by the window.onorientationchange event.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "windowSizeDidChange",
        "displayName": "SC.Animatable.windowSizeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the method altered the orientation, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "newSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new size of the window"
          }
        ]
      },
      {
        "name": "orientationchange",
        "displayName": "SC.Animatable.orientationchange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the window.onorientationchange event is fired.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "locWithDefault",
        "displayName": "SC.Animatable.locWithDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the localized version of the string or the string if no match\n    was found.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "string",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String",
            "name": "optional",
            "isOptional": false,
            "defaultValue": "",
            "desc": "default string to return instead"
          }
        ]
      },
      {
        "name": "locMetric",
        "displayName": "SC.Animatable.locMetric",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the localized value of the metric for the specified key, or\n    undefined if no match is found.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ret"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "locLayout",
        "displayName": "SC.Animatable.locLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates and returns a new hash suitable for use as an SC.Viewâs 'layout'\n    hash.  This hash will be created by looking for localized metrics following\n    a pattern based on the âbase keyâ you specify.\n\n    For example, if you specify \"Button.Confirm\", the following metrics will be\n    used if they are defined:\n\n      Button.Confirm.left\n      Button.Confirm.top\n      Button.Confirm.right\n      Button.Confirm.bottom\n      Button.Confirm.width\n      Button.Confirm.height\n      Button.Confirm.midWidth\n      Button.Confirm.minHeight\n      Button.Confirm.centerX\n      Button.Confirm.centerY\n\n    Additionally, you can optionally specify a hash which will be merged on top\n    of the returned hash.  For example, if you wish to allow a buttonâs width\n    to be configurable per-locale, but always wish for it to be centered\n    vertically and horizontally, you can call:\n\n      locLayout(\"Button.Confirm\", {centerX:0, centerY:0})\n\n    â¦so that you can combine both localized and non-localized elements in the\n    returned hash.  (An exception will be thrown if there is a locale-specific\n    key that matches a key specific in this hash.)",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "baseKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "additionalHash"
          }
        ]
      },
      {
        "name": "scrollbarSize",
        "displayName": "SC.Animatable.scrollbarSize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The size of scrollbars in this browser.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "simulateTouchEvents",
        "displayName": "SC.Animatable.simulateTouchEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method to swap out the default mouse handlers with proxy methods\n    that will translate mouse events to touch events.\n\n    This is useful if you are debugging touch functionality on the desktop.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "ready",
        "displayName": "SC.Animatable.ready",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add the passed target and method to the queue of methods to invoke when\n    the document is ready.  These methods will be called after the document\n    has loaded and parsed, but before the main() function is called.\n\n    Methods are called in the order they are added.\n\n    If you add a ready handler when the main document is already ready, then\n    your handler will be called immediately.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} optional target object"
          },
          {
            "title": "param",
            "type": "",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} method name or function to execute"
          }
        ]
      },
      {
        "name": "get",
        "displayName": "SC.Animatable.get",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the string at the designated index.  If you do not pass anything\n    returns the string array.  This index is an offset from the start of the\n    strings owned by this context.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String|Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index"
          }
        ]
      },
      {
        "name": "push",
        "displayName": "SC.Animatable.push",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a string to the render context for later joining.  Note that you can\n    pass multiple arguments to this method and each item will be pushed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "line",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the liene to add to the string."
          }
        ]
      },
      {
        "name": "text",
        "displayName": "SC.Animatable.text",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pushes the passed string onto the array, but first escapes the string\n    to ensure that no user-entered HTML is processed as HTML.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "line",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or mroe lines of text to add"
          }
        ]
      },
      {
        "name": "join",
        "displayName": "SC.Animatable.join",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Joins the strings together, returning the result.  But first, this will\n    end any open tags.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "joined string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "joinChar",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional string to use in joins. def empty string"
          }
        ]
      },
      {
        "name": "begin",
        "displayName": "SC.Animatable.begin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new render context based on the passed tagName or element.\n    Generate said context using end().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new context"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "tagNameOrElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "element",
        "displayName": "SC.Animatable.element",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the current context targets an element, this method returns the\n    element.  If the context does not target an element, this method will\n    render the context into an offscreen element and return it.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DOMElement",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the element"
          }
        ],
        "params": []
      },
      {
        "name": "remove",
        "displayName": "SC.Animatable.remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes an element with the passed id in the currently managed element.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "elementId",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "update",
        "displayName": "SC.Animatable.update",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If an element was set on this context when it was created, this method\n    will actually apply any changes to the element itself.  If you have not\n    written any inner html into the context, then the innerHTML of the\n    element will not be changed, otherwise it will be replaced with the new\n    innerHTML.\n\n    Also, any attributes, id, classNames or styles you've set will be\n    updated as well.  This also ends the editing context session and cleans\n    up.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "previous context or null if top"
          }
        ],
        "params": []
      },
      {
        "name": "end",
        "displayName": "SC.Animatable.end",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends the current tag editing context.  This will generate the tag string\n    including any attributes you might have set along with a closing tag.\n\n    The generated HTML will be added to the render context strings.  This will\n    also return the previous context if there is one or the receiver.\n\n    If you do not have a current tag, this does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "tag",
        "displayName": "SC.Animatable.tag",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a tag with the passed options.  Like calling context.begin().end().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "tagName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional tag name.  default 'div'"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional tag options.  defaults to empty options."
          }
        ]
      },
      {
        "name": "tagName",
        "displayName": "SC.Animatable.tagName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads outer tagName if no param is passed, sets tagName otherwise.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String|SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "tag name or receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "tagName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "pass to set tag name."
          }
        ]
      },
      {
        "name": "id",
        "displayName": "SC.Animatable.id",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads the outer tag id if no param is passed, sets the id otherwise.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String|SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "id or receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "idName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id or set"
          }
        ]
      },
      {
        "name": "classNames",
        "displayName": "SC.Animatable.classNames",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads the current classNames array or sets the array if a param is passed.\n    Note that if you get the classNames array and then modify it, you MUST\n    call this method again to set the array or else it may not be copied to\n    the element.\n\n    If you do pass a classNames array, you can also pass YES for the\n    cloneOnModify param.  This will cause the context to clone the class names\n    before making any further edits.  This is useful is you have a shared\n    array of class names you want to start with but edits should not change\n    the shared array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array|SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "classNames array or receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "classNames",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "cloneOnModify",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hasClass",
        "displayName": "SC.Animatable.hasClass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the outer tag current has the passed class name, NO\n    otherwise.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "className",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the class name"
          }
        ]
      },
      {
        "name": "addClass",
        "displayName": "SC.Animatable.addClass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the specified className to the current tag, if it does not already\n    exist.  This method has no effect if there is no open tag.\n\n    If there is an element backing this RenderContext, buffered jQuery is\n    used to perform the update.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Array",
            "name": "nameOrClasses",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the class name or an array of classes"
          }
        ]
      },
      {
        "name": "removeClass",
        "displayName": "SC.Animatable.removeClass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the specified className from the current tag.  This method has\n    no effect if there is not an open tag.\n\n    If there is an actual DOM element backing this render context,\n    the modification will be written immediately to a buffered jQuery instance.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "className",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the class to add"
          }
        ]
      },
      {
        "name": "resetClassNames",
        "displayName": "SC.Animatable.resetClassNames",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all classnames from the context. If the context represents an\n    element, this will be handled in CoreQuery.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "setClass",
        "displayName": "SC.Animatable.setClass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can either pass a single class name and a boolean indicating whether\n    the value should be added or removed, or you can pass a hash with all\n    the class names you want to add or remove with a boolean indicating\n    whether they should be there or not.\n\n    This is far more efficient than using addClass/removeClass.\n\n    If this context represents an element, this uses the buffered jQuery to\n    ensure all planned DOM operations stay in-sync.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "className",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class name or hash of classNames + bools"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "shouldAdd",
            "isOptional": false,
            "defaultValue": "",
            "desc": "for class name if a string was passed"
          }
        ]
      },
      {
        "name": "styles",
        "displayName": "SC.Animatable.styles",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves or sets the current styles for the outer tag.  If you retrieve\n    the styles hash to edit it, you must set the hash again in order for it\n    to be applied to the element on rendering.\n\n    Optionally you can also pass YES to the cloneOnModify param to cause the\n    styles has to be cloned before it is edited.  This is useful if you want\n    to start with a shared style hash and then optionally modify it for each\n    context.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash|SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "styles hash or receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "styles",
            "isOptional": false,
            "defaultValue": "",
            "desc": "styles hash"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "cloneOnModify",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "resetStyles",
        "displayName": "SC.Animatable.resetStyles",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clears all of the tag's styles.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "addStyle",
        "displayName": "SC.Animatable.addStyle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Apply the passed styles to the tag.  You can pass either a single key\n    value pair or a hash of styles.  Note that if you set a style on an\n    existing element, it will replace any existing styles on the element.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "nameOrStyles",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the style name or a hash of styles"
          },
          {
            "title": "param",
            "type": "String|Number",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "style value if string name was passed"
          }
        ]
      },
      {
        "name": "removeStyle",
        "displayName": "SC.Animatable.removeStyle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the named style from the style hash.\n\n    Note that if you delete a style, the style will not actually be removed\n    from the style hash.  Instead, its value will be set to null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "styleName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "attr",
        "displayName": "SC.Animatable.attr",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the named attribute on the tag.  Note that if you set the 'class'\n    attribute or the 'styles' attribute, it will be ignored.  Use the\n    relevant class name and style methods instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "nameOrAttrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attr name or hash of attrs."
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "attribute value if attribute name was passed"
          }
        ]
      },
      {
        "name": "$",
        "displayName": "SC.Animatable.$",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a CoreQuery instance for the element this context wraps (if\n    it wraps any). If a selector is passed, the CoreQuery instance will\n    be for nodes matching that selector.\n\n    Renderers may use this to modify DOM.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "sel",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isAnimatable",
        "displayName": "SC.Animatable#isAnimatable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Walks like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "style",
        "displayName": "SC.Animatable#style",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "The style properties. Works somewhat similarly to layout properties, though\n  is a tad bit simpler, as it does not involve parent views at all.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_NONE",
        "displayName": "SC.Animatable.TRANSITION_NONE",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Linear transition *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_CSS_EASE",
        "displayName": "SC.Animatable.TRANSITION_CSS_EASE",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease' transition if using CSS transitions; otherwise linear. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_CSS_EASE_IN",
        "displayName": "SC.Animatable.TRANSITION_CSS_EASE_IN",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-in' transition if using CSS transitions; otherwise linear. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_CSS_EASE_OUT",
        "displayName": "SC.Animatable.TRANSITION_CSS_EASE_OUT",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-out' transition if using CSS transitions; otherwise linear. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_CSS_EASE_IN_OUT",
        "displayName": "SC.Animatable.TRANSITION_CSS_EASE_IN_OUT",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-in-out' transition if using CSS transitions; otherwise linear. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_EASE",
        "displayName": "SC.Animatable.TRANSITION_EASE",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease' transition. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_EASE_IN",
        "displayName": "SC.Animatable.TRANSITION_EASE_IN",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-in' transition. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_EASE_OUT",
        "displayName": "SC.Animatable.TRANSITION_EASE_OUT",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-out' transition. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TRANSITION_EASE_IN_OUT",
        "displayName": "SC.Animatable.TRANSITION_EASE_IN_OUT",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "'ease-in-out' transition if using CSS transitions; otherwise linear. *",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultTimingFunction",
        "displayName": "SC.Animatable.defaultTimingFunction",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "The timing function which all SC.Animatables should default to.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "stats",
        "displayName": "SC.Animatable.stats",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "A hash of stats for any currently running animations. Currently has property\n    lastFPS, which is the FPS for the last JavaScript-based animation.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orientation",
        "displayName": "SC.Animatable.orientation",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Sets the orientation for touch devices, either SC.LANDSCAPE_ORIENTATION\n    or SC.PORTRAIT_ORIENTATION. Will be SC.NO_ORIENTATION in the case of\n    non-touch devices that are also not simulating touch events.",
        "defaultValue": "SC.NO_ORIENTATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isOffline",
        "displayName": "SC.Animatable.isOffline",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Indicates whether the device is currently online or offline. For browsers\n    that do not support this feature, the default value is NO.\n    \n    Is currently inverse of the navigator.onLine property. Most modern browsers\n    will update this property when switching to or from the browser's Offline \n    mode, and when losing/regaining network connectivity.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasStrings",
        "displayName": "SC.Animatable.hasStrings",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Set to YES when strings have been added to this locale.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "strings",
        "displayName": "SC.Animatable.strings",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "The strings hash for this locale.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "metrics",
        "displayName": "SC.Animatable.metrics",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "The metrics for this locale.  A metric is a singular value that is usually\n    used in a user interface layout, such as \"width of the OK button\".",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "touch",
        "displayName": "SC.Animatable.touch",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "YES if the current device supports touch events, NO otherwise.\n\n    You can simulate touch events in environments that don't support them by\n    calling SC.platform.simulateTouchEvents() from your browser's console.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "input",
        "displayName": "SC.Animatable.input",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "A hash that contains properties that indicate support for new HTML5\n    input attributes.\n\n    For example, to test to see if the placeholder attribute is supported,\n    you would verify that SC.platform.input.placeholder is YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "standalone",
        "displayName": "SC.Animatable.standalone",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "YES if the application is currently running as a standalone application.\n\n    For example, if the user has saved your web application to their home\n    screen on an iPhone OS-based device, this property will be true.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "cssPrefix",
        "displayName": "SC.Animatable.cssPrefix",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Prefix for browser specific CSS attributes. Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "domCSSPrefix",
        "displayName": "SC.Animatable.domCSSPrefix",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Prefix for browsew specific CSS attributes when used in the DOM. Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsCSSTransitions",
        "displayName": "SC.Animatable.supportsCSSTransitions",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Whether the browser supports CSS transitions. Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsCSSTransforms",
        "displayName": "SC.Animatable.supportsCSSTransforms",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Whether the browser supports 2D CSS transforms. Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "understandsCSS3DTransforms",
        "displayName": "SC.Animatable.understandsCSS3DTransforms",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Whether the browser understands 3D CSS transforms.\n    This does not guarantee that the browser properly handles them.\n    Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsCSS3DTransforms",
        "displayName": "SC.Animatable.supportsCSS3DTransforms",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Whether the browser can properly handle 3D CSS transforms. Calculated later.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsAcceleratedLayers",
        "displayName": "SC.Animatable.supportsAcceleratedLayers",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Whether the browser can handle accelerated layers. While supports3DTransforms tells us if they will\n    work in principle, sometimes accelerated layers interfere with things like getBoundingClientRect.\n    Then everything breaks.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsHashChange",
        "displayName": "SC.Animatable.supportsHashChange",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Wether the browser supports the hashchange event.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsHistory",
        "displayName": "SC.Animatable.supportsHistory",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Wether the browser supports HTML5 history.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "windowSizeDeterminesOrientation",
        "displayName": "SC.Animatable.windowSizeDeterminesOrientation",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Because iOS is slow to dispatch the window.onorientationchange event,\n    we use the window size to determine the orientation on iOS devices\n    and desktop environments when SC.platform.touch is YES (ie. when\n    SC.platform.simulateTouchEvents has been called)",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "suppressOnReady",
        "displayName": "SC.Animatable.suppressOnReady",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Allows apps to avoid automatically attach the ready handlers if they\n    want to by setting this flag to YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "suppressMain",
        "displayName": "SC.Animatable.suppressMain",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Allows apps to avoid automatically invoking main() when onReady is called",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SELF_CLOSING",
        "displayName": "SC.Animatable.SELF_CLOSING",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "SC.RenderContext.fn",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "offset",
        "displayName": "SC.Animatable.offset",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "this initial offset into the strings array where this context instance\n    has its opening tag.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "length",
        "displayName": "SC.Animatable.length",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "the current number of strings owned by the context, including the opening\n    tag.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "updateMode",
        "displayName": "SC.Animatable.updateMode",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "Specify the method that should be used to update content on the element.\n    In almost all cases you want to replace the content.  Very carefully\n    managed code (such as in CollectionView) can append or prepend content\n    instead.\n\n    You probably do not want to change this propery unless you know what you\n    are doing.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsContent",
        "displayName": "SC.Animatable.needsContent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Animatable",
        "overview": "YES if the context needs its content filled in, not just its outer\n    attributes edited.  This will be set to YES anytime you push strings into\n    the context or if you don't create it with an element to start with.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6349,
    "name": "Application",
    "displayName": "SC.Application",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/application.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ResponderContext"
      }
    ],
    "overview": "The root object for a SproutCore application.  Usually you will create a\n  single SC.Application instance as your root namespace.  SC.Application is\n  required if you intend to use SC.Responder to route events.\n\n  ## Example\n\n      Contacts = SC.Application.create({\n        store: SC.Store.create(SC.Record.fixtures),\n\n        // add other useful properties here\n      });\n\n  ## Sending Events\n\n  You can send actions and events down an application-level responder chain\n  by",
    "methods": [],
    "properties": []
  },
  {
    "guid": 46566,
    "name": "Array",
    "displayName": "SC.Array",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/array.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 0.9.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      }
    ],
    "overview": "This module implements Observer-friendly Array-like behavior.  This mixin is\n  picked up by the Array class as well as other controllers, etc. that want to\n  appear to be arrays.\n\n  Unlike SC.Enumerable, this mixin defines methods specifically for\n  collections that provide index-ordered access to their contents.  When you\n  are designing code that needs to accept any kind of Array-like object, you\n  should use these methods instead of Array primitives because these will\n  properly notify observers of changes to the array.\n\n  Although these methods are efficient, they do add a layer of indirection to\n  your application so it is a good idea to use them only when you need the\n  flexibility of using both true JavaScript arrays and \"virtual\" arrays such\n  as controllers and collections.\n\n  You can use the methods defined in this module to access and modify array\n  contents in a KVO-friendly way.  You can also be notified whenever the\n  membership if an array changes by changing the syntax of the property to\n  .observes('*myProperty.[]') .\n\n  To support SC.Array in your own class, you must override two\n  primitives to use it: replace() and objectAt().\n\n  Note that the SC.Array mixin also incorporates the SC.Enumerable mixin.  All\n  SC.Array-like objects are also enumerable.",
    "methods": [
      {
        "name": "replace",
        "displayName": "SC.Array#replace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is one of the primitves you must implement to support SC.Array.  You\n    should replace amt objects started at idx with the objects in the passed\n    array.\n\n    Before mutating the underlying data structure, you must call\n    this.arrayContentWillChange(). After the mutation is complete, you must\n    call arrayContentDidChange() and enumerableContentDidChange().\n\n    NOTE: JavaScript arrays already implement SC.Array and automatically call\n    the correct callbacks.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Starting index in the array to replace.  If idx >= length, then append to\n      the end of the array."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Number of elements that should be removed from the array, starting at\nidx*."
          },
          {
            "title": "param",
            "type": "Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An array of zero or more objects that should be inserted into the array at\nidx*"
          }
        ]
      },
      {
        "name": "indexOf",
        "displayName": "SC.Array#indexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the index for a particular object in the index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of -1 if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item to search for"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting location to search, default 0"
          }
        ]
      },
      {
        "name": "lastIndexOf",
        "displayName": "SC.Array#lastIndexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the last index for a particular object in the index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of -1 if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item to search for"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting location to search, default 0"
          }
        ]
      },
      {
        "name": "objectAt",
        "displayName": "SC.Array#objectAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is one of the primitives you must implement to support SC.Array.\n    Returns the object at the named index.  If your object supports retrieving\n    the value of an array item using get() (i.e. myArray.get(0)), then you do\n    not need to implement this method yourself.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the item to return.  If idx exceeds the current length,\n      return null."
          }
        ]
      },
      {
        "name": "insertAt",
        "displayName": "SC.Array#insertAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will use the primitive replace() method to insert an object at the\n    specified index.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of insert the object at."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to insert"
          }
        ]
      },
      {
        "name": "removeAt",
        "displayName": "SC.Array#removeAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove an object at the specified index using the replace() primitive\n    method.  You can pass either a single index, a start and a length or an\n    index set.\n\n    If you pass a single index or a start and length that is beyond the\n    length this method will throw an SC.OUT_OF_RANGE_EXCEPTION",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number|SC.IndexSet",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, start of range, or index set"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "length of passing range"
          }
        ]
      },
      {
        "name": "removeObject",
        "displayName": "SC.Array#removeObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Search the array of this object, removing any occurrences of it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to remove"
          }
        ]
      },
      {
        "name": "removeObjects",
        "displayName": "SC.Array#removeObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Search the array for the passed set of objects and remove any occurrences\n    of the.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to remove"
          }
        ]
      },
      {
        "name": "slice",
        "displayName": "SC.Array#slice",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new array that is a slice of the receiver.  This implementation\n    uses the observable array methods to retrieve the objects for the new\n    slice.\n\n    If you don't pass in beginIndex and endIndex, it will act as a copy of the\n    array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "New array with specified slice"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "beginIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Integer} (Optional) index to begin slicing from."
          },
          {
            "title": "param",
            "type": "",
            "name": "endIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Integer} (Optional) index to end the slice at."
          }
        ]
      },
      {
        "name": "pushObject",
        "displayName": "SC.Array#pushObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Push the object onto the end of the array.  Works just like push() but it\n    is KVO-compliant.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The passed object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to push"
          }
        ]
      },
      {
        "name": "pushObjects",
        "displayName": "SC.Array#pushObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add the objects in the passed numerable to the end of the array.  Defers\n    notifying observers of the change until all objects are added.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to add"
          }
        ]
      },
      {
        "name": "popObject",
        "displayName": "SC.Array#popObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pop object from array or nil if none are left.  Works just like pop() but\n    it is KVO-compliant.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The popped object"
          }
        ],
        "params": []
      },
      {
        "name": "shiftObject",
        "displayName": "SC.Array#shiftObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Shift an object from start of array or nil if none are left.  Works just\n    like shift() but it is KVO-compliant.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The shifted object"
          }
        ],
        "params": []
      },
      {
        "name": "unshiftObject",
        "displayName": "SC.Array#unshiftObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Unshift an object to start of array.  Works just like unshift() but it is\n    KVO-compliant.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The passed object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to add"
          }
        ]
      },
      {
        "name": "unshiftObjects",
        "displayName": "SC.Array#unshiftObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the named objects to the beginning of the array.  Defers notifying\n    observers until all objects have been added.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to add"
          }
        ]
      },
      {
        "name": "isEqual",
        "displayName": "SC.Array#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Compares each item in the passed array to this one.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if they are equal."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "ary",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The array you want to compare to"
          }
        ]
      },
      {
        "name": "compact",
        "displayName": "SC.Array#compact",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a new array with the contents of the old array, sans any null\n    values.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new, compact array"
          }
        ],
        "params": []
      },
      {
        "name": "without",
        "displayName": "SC.Array#without",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a new array with the contents of the old array, sans the passed\n    value.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new, filtered array"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value you want to be removed"
          }
        ]
      },
      {
        "name": "uniq",
        "displayName": "SC.Array#uniq",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a new array with only unique values from the contents of the\n    old array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new, de-duped array"
          }
        ],
        "params": []
      },
      {
        "name": "max",
        "displayName": "SC.Array#max",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the largest Number in an array of Numbers. Make sure the array\n    only contains values of type Number to get expected result.\n\n    Note: This only works for dense arrays.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "min",
        "displayName": "SC.Array#min",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the smallest Number in an array of Numbers. Make sure the array\n    only contains values of type Number to get expected result.\n\n    Note: This only works for dense arrays.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "contains",
        "displayName": "SC.Array#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if object is in the array",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to look for"
          }
        ]
      },
      {
        "name": "addRangeObserver",
        "displayName": "SC.Array#addRangeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new range observer on the receiver.  The target/method callback\n    you provide will be invoked anytime any property on the objects in the\n    specified range changes.  It will also be invoked if the objects in the\n    range itself changes also.\n\n    The callback for a range observer should have the signature:\n\n          function rangePropertyDidChange(array, objects, key, indexes, context)\n\n    If the passed key is '[]' it means that the object itself changed.\n\n    The return value from this method is an opaque reference to the\n    range observer object.  You can use this reference to destroy the\n    range observer when you are done with it or to update its range.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "range observer"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "indexes to observe"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to invoke on change"
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method to invoke"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional context"
          }
        ]
      },
      {
        "name": "updateRangeObserver",
        "displayName": "SC.Array#updateRangeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Moves a range observer so that it observes a new range of objects on the\n    array.  You must have an existing range observer object from a call to\n    addRangeObserver().\n\n    The return value should replace the old range observer object that you\n    pass in.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the range observer (or a new one)"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RangeObserver",
            "name": "rangeObserver",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the range observer"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new indexes to observe"
          }
        ]
      },
      {
        "name": "removeRangeObserver",
        "displayName": "SC.Array#removeRangeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes a range observer from the receiver.  The range observer must\n    already be active on the array.\n\n    The return value should replace the old range observer object.  It will\n    usually be null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "updated range observer or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RangeObserver",
            "name": "rangeObserver",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the range observer"
          }
        ]
      },
      {
        "name": "setupEnumerablePropertyChains",
        "displayName": "SC.Array#setupEnumerablePropertyChains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "For all registered property chains on this object, removed them from objects\n    being removed from the enumerable, and clone them onto newly added objects.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object[]",
            "name": "addedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects being added to the enumerable"
          },
          {
            "title": "param",
            "type": "Object[]",
            "name": "removedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objected being removed from the enumerable"
          }
        ]
      },
      {
        "name": "registerDependentKeyWithChain",
        "displayName": "SC.Array#registerDependentKeyWithChain",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Register a property chain to propagate to enumerable content.\n\n    This will clone the property chain to each item in the enumerable,\n    then save it so that it is automatically set up and torn down when\n    the enumerable content changes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "property",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property being listened for on this object"
          },
          {
            "title": "param",
            "type": "SC._PropertyChain",
            "name": "chain",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the chain to clone to items"
          }
        ]
      },
      {
        "name": "removeDependentKeyWithChain",
        "displayName": "SC.Array#removeDependentKeyWithChain",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes a dependent key from the enumerable, and tears it down on\n    all content objects.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "property",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC._PropertyChain",
            "name": "chain",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isSCArray",
        "displayName": "SC.Array#isSCArray",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Array",
        "overview": "Walk like a duck - use isSCArray to avoid conflicts",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 5599,
    "name": "ArrayController",
    "displayName": "SC.ArrayController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/controllers/array.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Controller"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Array"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.SelectionSupport"
      }
    ],
    "overview": "An ArrayController provides a way for you to publish an array of objects\n  for CollectionView or other controllers to work with.  To work with an\n  ArrayController, set the content property to the array you want the\n  controller to manage.  Then work directly with the controller object as if\n  it were the array itself.\n\n  When you want to display an array of objects in a CollectionView, bind the\n  \"arrangedObjects\" of the array controller to the CollectionView's \"content\"\n  property.  This will automatically display the array in the collection view.",
    "methods": [
      {
        "name": "arrangedObjects",
        "displayName": "SC.ArrayController#arrangedObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an SC.Array object suitable for use in a CollectionView.\n    Depending on how you have your ArrayController configured, this property\n    may be one of several different values.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "canRemoveContent",
        "displayName": "SC.ArrayController#canRemoveContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property indicates whether or not the array controller can\n    remove content.  You can delete content only if the content is not single\n    content and isEditable is YES.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "canReorderContent",
        "displayName": "SC.ArrayController#canReorderContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property indicates whether you can reorder content.  You can\n    reorder content as long a the controller isEditable and the content is a\n    real SC.Array-like object.  You cannot reorder content when orderBy is\n    non-null.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "canAddContent",
        "displayName": "SC.ArrayController#canAddContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property insides whether you can add content.  You can add\n    content as long as the controller isEditable and the content is not a\n    single object.\n\n    Note that the only way to simply add object to an ArrayController is to\n    use the addObject() or pushObject() methods.  All other methods imply\n    reordering and will fail.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasContent",
        "displayName": "SC.ArrayController#hasContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set to YES if the controller has valid content that can be displayed,\n    even an empty array.  Returns NO if the content is null or not enumerable\n    and allowsSingleContent is NO.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "status",
        "displayName": "SC.ArrayController#status",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current status property for the content.  If the content does\n    not have a status property, returns SC.Record.READY.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "addObject",
        "displayName": "SC.ArrayController#addObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds an object to the array.  If the content is ordered, this will add the\n    object to the end of the content array.  The content is not ordered, the\n    location depends on the implementation of the content.\n\n    If the source content does not support adding an object, then this method\n    will throw an exception.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ArrayController",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to add"
          }
        ]
      },
      {
        "name": "removeObject",
        "displayName": "SC.ArrayController#removeObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the passed object from the array.  If the underyling content\n    is a single object, then this simply sets the content to null.  Otherwise\n    it will call removeObject() on the content.\n\n    Also, if destroyOnRemoval is YES, this will actually destroy the object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ArrayController",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to remove"
          }
        ]
      },
      {
        "name": "length",
        "displayName": "SC.ArrayController#length",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Compute the length of the array based on the observable content",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "content",
        "displayName": "SC.ArrayController#content",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ArrayController",
        "overview": "The content array managed by this controller.\n\n    You can set the content of the ArrayController to any object that\n    implements SC.Array or SC.Enumerable.  If you set the content to an object\n    that implements SC.Enumerable only, you must also set the orderBy property\n    so that the ArrayController can order the enumerable for you.\n\n    If you set the content to a non-enumerable and non-array object, then the\n    ArrayController will wrap the item in an array in an attempt to normalize\n    the result.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.ArrayController#isEditable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ArrayController",
        "overview": "Makes the array editable or not.  If this is set to NO, then any attempts\n    at changing the array content itself will throw an exception.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orderBy",
        "displayName": "SC.ArrayController#orderBy",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ArrayController",
        "overview": "Used to sort the array.\n\n    If you set this property to a key name, array of key names, or a function,\n    then then ArrayController will automatically reorder your content array\n    to match the sort order.  (If you set a function, the function will be\n    used to sort).\n\n    Normally, you should only use this property if you set the content of the\n    controller to an unordered enumerable such as SC.Set or SC.SelectionSet.\n    In this case the orderBy property is required in order for the controller\n    to property order the content for display.\n\n    If you set the content to an array, it is usually best to maintain the\n    array in the proper order that you want to display things rather than\n    using this method to order the array since it requires an extra processing\n    step.  You can use this orderBy property, however, for displaying smaller\n    arrays of content.\n\n    Note that you can only to use addObject() to insert new objects into an\n    array that is ordered.  You cannot manually reorder or insert new objects\n    into specific locations because the order is managed by this property\n    instead.\n\n    If you pass a function, it should be suitable for use in compare().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsSingleContent",
        "displayName": "SC.ArrayController#allowsSingleContent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ArrayController",
        "overview": "Set to YES if you want the controller to wrap non-enumerable content\n    in an array and publish it.  Otherwise, it will treat single content like\n    null content.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "destroyOnRemoval",
        "displayName": "SC.ArrayController#destroyOnRemoval",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ArrayController",
        "overview": "Set to YES if you want objects removed from the array to also be\n    deleted.  This is a convenient way to manage lists of items owned\n    by a parent record object.\n\n    Note that even if this is set to NO, calling destroyObject() instead of\n    removeObject() will still destroy the object in question as well as\n    removing it from the parent array.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 50621,
    "name": "Async",
    "displayName": "SC.Async",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/statechart/system/async.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Michael Cohen",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Represents a call that is intended to be asynchronous. This is\n  used during a state transition process when either entering or\n  exiting a state.",
    "methods": [
      {
        "name": "perform",
        "displayName": "SC.Async.perform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call in either a state's enterState or exitState method when you\n    want a state to perform an asynchronous action, such as an animation.\n    \n    Examples:\n    \n    {{\n    \n      SC.State.extend({\n    \n        enterState: function() {\n          return SC.Async.perform('foo');\n        },\n      \n        exitState: function() {\n          return SC.Async.perform('bar', 100);\n        }\n      \n        foo: function() { ... },\n      \n        bar: function(arg) { ... }\n    \n      });\n    \n    }}",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Async",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a new instance of a SC.Async"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String|Function} the functio to be invoked on a state"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. An argument to pass to the given function"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. An argument to pass to the given function"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 43909,
    "name": "AudioView",
    "displayName": "SC.AudioView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/audio.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Renders a audioView using different technologies like HTML5 audio tag, \n  quicktime and flash.\n  \n  This view wraps the different technologies so you can use one standard and \n  simple API to play audio.\n  \n  You can specify and array with the order of how the technologies will degrade\n  depending on availability. For example you can set degradeList to be \n  ['html5', 'flash'] and it will load your audio in an audio tag if the \n  technology is available otherwise flash and if neither of the technologies \n  are available it will show a message saying that your machine needs to install\n  one of this technologies.",
    "methods": [
      {
        "name": "addToAudioFlashViews",
        "displayName": "SC.AudioView.addToAudioFlashViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the flash view to the flashViews hash.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateProperty",
        "displayName": "SC.AudioView.updateProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This function is called from flash to update the properties of the corresponding\n  flash view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "scid",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "property",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "logFlash",
        "displayName": "SC.AudioView.logFlash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Function to log events coming from flash.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "message",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "flashViews",
        "displayName": "SC.AudioView.flashViews",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AudioView",
        "overview": "Hash to store references to the different flash audios.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36377,
    "name": "AutoMixin",
    "displayName": "SC.AutoMixin",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/auto_mixin.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Use this mixin to automatically mix in a a collection of mixins into all\n  child views created _by the view_ (that are created at view initialization).",
    "methods": [],
    "properties": [
      {
        "name": "autoMixins",
        "displayName": "SC.AutoMixin.autoMixins",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoMixin",
        "overview": "The mixins to automatically mix in.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36388,
    "name": "AutoResize",
    "displayName": "SC.AutoResize",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/auto_resize.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Use this mixin to make your view automatically resize based upon its value,\n  title, or other string property. Only works for views that support automatic\n  resizing.\n\n  Supporting Automatic Resizing\n  -------------------------------------\n  To support automatic resizing, your view must provide these properties:\n\n  - *`supportsAutoResize`.* Must be set to YES.\n\n  - *`autoResizeLayer`* A DOM element to use as a template for resizing the\n    view. Font sizes and other styles will be copied to the measuring element\n    SproutCore uses to measure the text.\n\n  - *`autoResizeText`.* The text to measure. A button view might make a proxy\n    to its `displayTitle`, for instance.\n\n  Your view may also supply:\n\n  - *`autoResizePadding`.* An amount to add to the measured size. This may be either\n    a single number to be added to both width and height, or a hash containing\n    separate `width` and `height` properties.\n\n\n  NOTE: these properties are not defined in the mixin itself because the supporting view,\n  rather than the user of SC.AutoResize, will be providing the properties, and mixing\n  SC.AutoResize into the view should not override these properties.",
    "methods": [
      {
        "name": "scheduleMeasurement",
        "displayName": "SC.AutoResize.scheduleMeasurement",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Schedules a measurement to happen later, in batch mode. Only valid when the view\n    has a `batchResizeId`.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "measureSize",
        "displayName": "SC.AutoResize.measureSize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Measures the size of the view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "batch",
            "isOptional": false,
            "defaultValue": "",
            "desc": "For internal use during batch resizing."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "shouldAutoResize",
        "displayName": "SC.AutoResize.shouldAutoResize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "If YES, automatically resizes the view (default). If NO, only measures,\n    setting 'measuredSize' to the measured value (you can bind to measuredSize\n    and update size manually).",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldMeasureSize",
        "displayName": "SC.AutoResize.shouldMeasureSize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "If NO, prevents SC.AutoResize from doing anything at all.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldResizeWidth",
        "displayName": "SC.AutoResize.shouldResizeWidth",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "Determines if the view's width should be resized\n    on calculation.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldResizeHeight",
        "displayName": "SC.AutoResize.shouldResizeHeight",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "Determines if the view's height should be resized\n    on calculation. Default is NO to retain backwards\n    compatibility.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "measuredSize",
        "displayName": "SC.AutoResize.measuredSize",
        "objectType": "property",
        "propertyType": "Rect",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "The measured size of the view's content (the value of the autoResizeField). \n    This property is observable, and, if used in conjunction with setting\n    shouldAutoResize to NO, allows you to customize the 'sizing' part, using\n    SC.AutoResize purely for its measuring code.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "batchResizeId",
        "displayName": "SC.AutoResize.batchResizeId",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.AutoResize",
        "overview": "If this property is provided, all views that share the same value for this property will be resized as a batch for increased performance.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37207,
    "name": "canvasImageRenderDelegate",
    "displayName": "SC.BaseTheme.canvasImageRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/render_delegates/canvas_image.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates DOM representations of an image.\n\n  Parameters\n  --------------------------\n  Expects these properties on the data source:\n\n  - image: An Image object which has completed loading\n\n  If any of these are not present in the data source, the render delegate\n  will throw an error.\n\n  Optional Parameters:\n  ---------------------------\n  If present, these properties will be used.\n\n  - width: Used on the canvas element. If not provided, 0 is used and the canvas\n            will not be visible.\n  - height: Used on the canvas element. If not provided, 0 is used and the canvas\n            will not be visible.\n  - scale: If provided, the image will maintain aspect ratio as specified by this\n          property. One of\n            - SC.SCALE_NONE\n            - SC.FILL\n            - SC.FILL_PROPORTIONALLY\n            - SC.BEST_FIT\n            - SC.BEST_FIT_DOWN_ONLY\n            - percentage {Number}\n          If not provided, SC.FILL will be the default (ie. expected image behaviour)\n  - align: If provided, the image will align itself within its frame.  One of\n            - SC.ALIGN_CENTER\n            - SC.ALIGN_TOP_LEFT\n            - SC.ALIGN_TOP\n            - SC.ALIGN_TOP_RIGHT\n            - SC.ALIGN_RIGHT\n            - SC.ALIGN_BOTTOM_RIGHT\n            - SC.ALIGN_BOTTOM\n            - SC.ALIGN_BOTTOM_LEFT\n            - SC.ALIGN_LEFT\n  - backgroundColor: If provided, the canvas will render a backgroundColor",
    "methods": [],
    "properties": []
  },
  {
    "guid": 37255,
    "name": "imageRenderDelegate",
    "displayName": "SC.BaseTheme.imageRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/render_delegates/image.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates DOM representations of an image.\n\n  Parameters\n  --------------------------\n  Expects these properties on the data source:\n\n  - image: An Image object which has completed loading\n\n  If any of these are not present in the data source, the render delegate\n  will throw an error.\n\n  Optional Parameters:\n  ---------------------------\n  If present, these properties will be used.\n\n  - imageValue: A String which represents the src or CSS class of the image\n  - displayToolTip: A String which is rendered as a toolTip on the element\n  - type: The type of image being rendered. One of:\n              - SC.IMAGE_TYPE_NONE\n              - SC.IMAGE_TYPE_URL\n              - SC.IMAGE_TYPE_CSS_CLASS\n          If not provided, SC.IMAGE_TYPE_URL is the default",
    "methods": [],
    "properties": []
  },
  {
    "guid": 37273,
    "name": "labelRenderDelegate",
    "displayName": "SC.BaseTheme.labelRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/render_delegates/label.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates DOM representations of a label.\n  \n  Parameters\n  --------------------------\n  Expects these properties on the data source:\n  \n  - title\n  \n  If any of these are not present in the data source, the render delegate\n  will throw an error.\n  \n  Optional Parameters:\n  ---------------------------\n  If present, these properties will be used.\n  \n  - icon: should be either a class name or a URL\n  - hint: allows the label to display a hint value if its title is empty.\n  - escapeHTML: whether the HTML should be escaped to prevent XSS attacks\n    and the like.\n  - textAlign\n  - fontWeight\n  - needsEllipsis: Whether an ellipsis (...) should be added after the title\n    if the title is too long.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 22607,
    "name": "radioGroupRenderDelegate",
    "displayName": "SC.BaseTheme.radioGroupRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/render_delegates/radio_group.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates the HTML representation of a group of radio buttons.\n  \n  Expects Properties\n  -------------------------------\n  \n   - `items` -- a collection of data sources for radioRenderDelegates\n   - `layoutDirection`\n   - `isEnabled`\n  \n  Extended API\n  --------------------------------\n  As this encompasses an entire group, it must provide a way to determine\n  which radio button is the target of an event. The indexForEvent method\n  does exactly this, and all radioGroupRenderDelegates _must_ support it.\n  \n  Also, as it would be low-performance to update any but the changed radio\n  button, there is a method to update a specific index.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 35362,
    "name": "selectRenderDelegate",
    "displayName": "SC.BaseTheme.selectRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/select_view/render_delegates/select_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates the DOM representation of a SelectView.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 37312,
    "name": "Benchmark",
    "displayName": "SC.Benchmark",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/benchmark.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This bit of meta-programming magic can install a benchmark handler on any\n  object method.  When a benchmark is installed, the time required to execute\n  the method will be printed to the console log everytime the method is\n  called.\n\n  This class can be used to implement benchmarking.  To use this object, just\n  call start() with a key name and end() with a keyname.  The benchmark will\n  be logged.  If you set verbose = true, then benchmark will log everytime it\n  saves a bench.  Otherwise, it just keeps stats.  You can get the stats by\n  calling report().\n\n  Benchmark does not require anything other than the date.js class.  It also\n  does not rely on SC.Object so that you can benchmark code in that area as\n  well.\n\n  The benchmark has three types of reports.\n\n    - report(): Returns an abbreviated list with just the durations of the bench.\n              Also, it averages multiple runs. Everything is reported on the top\n              level only.\n    - timelineReport(): Returns an list of benchmarks and sub-benchmarks. If the\n                      the globalStartTime is set, then it will show relative\n                      time from that time.\n    - timelineChart(): Displays a chart of all the benchmarks (not sub-benchmarks)\n                     relative to the first time capture or to the globalStartTime.\n                     Hide this by calling hideChart()",
    "methods": [
      {
        "name": "addEvent",
        "displayName": "SC.Benchmark.addEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds an 'event' to the events hash.\n\n    Unlike normal benchmarks, recorded with start/end and that represent a block of time,\n    events represent a single instance in time. Further, unlike normal benchmarks, which\n    may be run more than once for the same benchmark name, only one instance in time\n    will be recorded for any event name.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A name that identifies the event. If addEvent is called again with the same name,\n      the previous call's timestamp will be overwritten."
          },
          {
            "title": "param",
            "type": "Timestamp",
            "name": "time",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optional. The timestamp to record for the event."
          }
        ]
      },
      {
        "name": "start",
        "displayName": "SC.Benchmark.start",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method at the start of whatever you want to collect.\n    If a parentKey is passed, then you will attach the stat to the parent,\n    otherwise it will be on the top level. If topLevelOnly is passed, then\n    recursive calls to the start will be ignored and only the top level call\n    will be benchmarked.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the passed key"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A unique key that identifies this benchmark.  All calls to start/end\n      with the same key will be groups together."
          },
          {
            "title": "param",
            "type": "String",
            "name": "parentKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A unique key that identifies the parent benchmark.  All calls to\n      start/end with the same key will be groups together."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "topLevelOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "If true then recursive calls to this method with the same key will be\n      ignored."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "time",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Only pass if you want to explicitly set the start time.  Otherwise the\n      start time is now."
          }
        ]
      },
      {
        "name": "end",
        "displayName": "SC.Benchmark.end",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method at the end of whatever you want to collect.  This will\n    save the collected benchmark.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The benchmark key you used when you called start()"
          },
          {
            "title": "param",
            "type": "String",
            "name": "parentKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The benchmark parent key you used when you called start()"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "time",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Only pass if you want to explicitly set the end time.  Otherwise start\n      time is now."
          }
        ]
      },
      {
        "name": "bench",
        "displayName": "SC.Benchmark.bench",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is a simple way to benchmark a function.  The function will be\n    run with the name you provide the number of times you indicate.  Only the\n    function is a required param.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "reps",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "install",
        "displayName": "SC.Benchmark.install",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This bit of metaprogramming magic install a wrapper around a method and\n    benchmark it whenever it is run.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "topLevelOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "restore",
        "displayName": "SC.Benchmark.restore",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Restore the original method, deactivating the benchmark.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to change"
          },
          {
            "title": "param",
            "type": "String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method name as a string."
          }
        ]
      },
      {
        "name": "report",
        "displayName": "SC.Benchmark.report",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will return a string containing a report of the stats\n    collected so far.  If you pass a key, only the stats for that key will\n    be returned.  Otherwise, all keys will be used.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "timelineReport",
        "displayName": "SC.Benchmark.timelineReport",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generate a human readable benchmark report. Pass in appName if you desire.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "application",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name."
          }
        ]
      },
      {
        "name": "getTimelineChartContent",
        "displayName": "SC.Benchmark.getTimelineChartContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a hash containing the HTML representing the timeline chart, and\n    various metrics and information about the chart:\n\n        - html\n        - totalWidth\n        - totalHeight\n        - totalCapturedTime\n        - pointsCaptured",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "getTimelineChartView",
        "displayName": "SC.Benchmark.getTimelineChartView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a view with the timeline chart. The view has a 'reload' method to\n    refresh its data.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "timelineChart",
        "displayName": "SC.Benchmark.timelineChart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generate a human readable benchmark chart. Pass in appName if you desire.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "appName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "log",
        "displayName": "SC.Benchmark.log",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is just like report() except that it will log the results to\n    the console.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "startProfile",
        "displayName": "SC.Benchmark.startProfile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will activate profiling if you have Firebug installed.  Otherwise\n    does nothing.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "verbose",
        "displayName": "SC.Benchmark.verbose",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Benchmark",
        "overview": "If true, then benchmarks will be logged to the console as they are\n    recorded.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "enabled",
        "displayName": "SC.Benchmark.enabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Benchmark",
        "overview": "If false, benchmarking will be disabled.  You might want to disable this\n    during production to maximize performance.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "events",
        "displayName": "SC.Benchmark.events",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Benchmark",
        "overview": "Events are a way of assigning specific, individual times to names, rather than\n    durations of time. A benchmark event can only occur onceâif it occurs again, it\n    will overwrite the old event.\n\n    The purpose of events is different than the purpose for normal benchmarks. Normal\n    benchmarks may be used to benchmark a specific process, and may do so repeatedly;\n    events, conversely, are usually used to benchmark things like startup time, and\n    occur only once. For instance, an 'event' is registered when the document is ready.\n\n    Events are kept as a hash of names to timestamps. To add an event, just set it:\n\n        SC.Benchmark.events['myEventName'] = new Date().getTime();\n\n        // Or, more conveniently:\n        SC.Benchmark.addEvent('myEventName', [optional time]);\n\n    On a timeline chart, events are usually represented as lines rather than bars. However,\n    if you add eventNameStart and eventNameEnd, they will be automatically added as standard\n    benchmarks.\n\n    This is useful when adding preload events to SC.benchmarkPreloadEvents; as SC.Benchmark\n    does not yet exist, you cannot call .start() and .end(), but adding the items to\n    SC.benchmarkPreloadEvents will ensure they are included.",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "stats",
        "displayName": "SC.Benchmark.stats",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Benchmark",
        "overview": "This hash stores collected stats.  It contains key value pairs.  The value\n    will be a hash with the following properties:\n\n      - *runs*: the number of times this stat has run\n      - *amt*: the total time consumed by this (divide by runs to get avg)\n      - *name*: an optional longer name you assigned to the stat key.  Set this  using name().",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "globalStartTime",
        "displayName": "SC.Benchmark.globalStartTime",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Benchmark",
        "overview": "If set, one can tell when the benchmark is started relatively to the global start time.\n\n    This property is set to a default automatically (from HTML5 NavigationTiming if possible,\n    otherwise the SC bootstrap).",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 47439,
    "name": "Binding",
    "displayName": "SC.Binding",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/binding.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A binding simply connects the properties of two objects so that whenever the\n  value of one property changes, the other property will be changed also.  You\n  do not usually work with Binding objects directly but instead describe\n  bindings in your class definition using something like:\n\n        valueBinding: \"MyApp.someController.title\"\n\n  This will create a binding from \"MyApp.someController.title\" to the \"value\"\n  property of your object instance automatically.  Now the two values will be\n  kept in sync.\n\n  Customizing Your Bindings\n  ===\n\n  In addition to synchronizing values, bindings can also perform some basic\n  transforms on values.  These transforms can help to make sure the data fed\n  into one object always meets the expectations of that object regardless of\n  what the other object outputs.\n\n  To customize a binding, you can use one of the many helper methods defined\n  on SC.Binding like so:\n\n        valueBinding: SC.Binding.single(\"MyApp.someController.title\")\n\n  This will create a binding just like the example above, except that now the\n  binding will convert the value of MyApp.someController.title to a single\n  object (removing any arrays) before applying it to the \"value\" property of\n  your object.\n\n  You can also chain helper methods to build custom bindings like so:\n\n        valueBinding: SC.Binding.single(\"MyApp.someController.title\").notEmpty(\"(EMPTY)\")\n\n  This will force the value of MyApp.someController.title to be a single value\n  and then check to see if the value is \"empty\" (null, undefined, empty array,\n  or an empty string).  If it is empty, the value will be set to the string\n  \"(EMPTY)\".\n\n  One Way Bindings\n  ===\n\n  One especially useful binding customization you can use is the oneWay()\n  helper.  This helper tells SproutCore that you are only interested in\n  receiving changes on the object you are binding from.  For example, if you\n  are binding to a preference and you want to be notified if the preference\n  has changed, but your object will not be changing the preference itself, you\n  could do:\n\n        bigTitlesBinding: SC.Binding.oneWay(\"MyApp.preferencesController.bigTitles\")\n\n  This way if the value of MyApp.preferencesController.bigTitles changes the\n  \"bigTitles\" property of your object will change also.  However, if you\n  change the value of your \"bigTitles\" property, it will not update the\n  preferencesController.\n\n  One way bindings are almost twice as fast to setup and twice as fast to\n  execute because the binding only has to worry about changes to one side.\n\n  You should consider using one way bindings anytime you have an object that\n  may be created frequently and you do not intend to change a property; only\n  to monitor it for changes. (such as in the example above).\n\n  Adding Custom Transforms\n  ===\n\n  In addition to using the standard helpers provided by SproutCore, you can\n  also defined your own custom transform functions which will be used to\n  convert the value.  To do this, just define your transform function and add\n  it to the binding with the transform() helper.  The following example will\n  not allow Integers less than ten.  Note that it checks the value of the\n  bindings and allows all other values to pass:\n\n        valueBinding: SC.Binding.transform(function(value, binding) {\n          return ((SC.typeOf(value) === SC.T_NUMBER) && (value < 10)) ? 10 : value;\n        }).from(\"MyApp.someController.value\")\n\n  If you would like to instead use this transform on a number of bindings,\n  you can also optionally add your own helper method to SC.Binding.  This\n  method should simply return the value of this.transform(). The example\n  below adds a new helper called notLessThan() which will limit the value to\n  be not less than the passed minimum:\n\n      SC.Binding.notLessThan = function(minValue) {\n        return this.transform(function(value, binding) {\n          return ((SC.typeOf(value) === SC.T_NUMBER) && (value < minValue)) ? minValue : value ;\n        }) ;\n      } ;\n\n  You could specify this in your core.js file, for example.  Then anywhere in\n  your application you can use it to define bindings like so:\n\n        valueBinding: SC.Binding.from(\"MyApp.someController.value\").notLessThan(10)\n\n  Also, remember that helpers are chained so you can use your helper along with\n  any other helpers.  The example below will create a one way binding that\n  does not allow empty values or values less than 10:\n\n        valueBinding: SC.Binding.oneWay(\"MyApp.someController.value\").notEmpty().notLessThan(10)\n\n  Note that the built in helper methods all allow you to pass a \"from\"\n  property path so you don't have to use the from() helper to set the path.\n  You can do the same thing with your own helper methods if you like, but it\n  is not required.\n\n  Creating Custom Binding Templates\n  ===\n\n  Another way you can customize bindings is to create a binding template.  A\n  template is simply a binding that is already partially or completely\n  configured.  You can specify this template anywhere in your app and then use\n  it instead of designating your own custom bindings.  This is a bit faster on\n  app startup but it is mostly useful in making your code less verbose.\n\n  For example, let's say you will be frequently creating one way, not empty\n  bindings that allow values greater than 10 throughout your app.  You could\n  create a binding template in your core.js like this:\n\n        MyApp.LimitBinding = SC.Binding.oneWay().notEmpty().notLessThan(10);\n\n  Then anywhere you want to use this binding, just refer to the template like\n  so:\n\n        valueBinding: MyApp.LimitBinding.beget(\"MyApp.someController.value\")\n\n  Note that when you use binding templates, it is very important that you\n  always start by using beget() to extend the template.  If you do not do\n  this, you will end up using the same binding instance throughout your app\n  which will lead to erratic behavior.\n\n  How to Manually Activate a Binding\n  ===\n\n  All of the examples above show you how to configure a custom binding, but\n  the result of these customizations will be a binding template, not a fully\n  active binding.  The binding will actually become active only when you\n  instantiate the object the binding belongs to.  It is useful however, to\n  understand what actually happens when the binding is activated.\n\n  For a binding to function it must have at least a \"from\" property and a \"to\"\n  property.  The from property path points to the object/key that you want to\n  bind from while the to path points to the object/key you want to bind to.\n\n  When you define a custom binding, you are usually describing the property\n  you want to bind from (such as \"MyApp.someController.value\" in the examples\n  above).  When your object is created, it will automatically assign the value\n  you want to bind \"to\" based on the name of your binding key.  In the\n  examples above, during init, SproutCore objects will effectively call\n  something like this on your binding:\n\n        binding = this.valueBinding.beget().to(\"value\", this) ;\n\n  This creates a new binding instance based on the template you provide, and\n  sets the to path to the \"value\" property of the new object.  Now that the\n  binding is fully configured with a \"from\" and a \"to\", it simply needs to be\n  connected to become active.  This is done through the connect() method:\n\n        binding.connect() ;\n\n  Now that the binding is connected, it will observe both the from and to side\n  and relay changes.\n\n  If you ever needed to do so (you almost never will, but it is useful to\n  understand this anyway), you could manually create an active binding by\n  doing the following:\n\n        SC.Binding.from(\"MyApp.someController.value\")\n         .to(\"MyApp.anotherObject.value\")\n         .connect();\n\n  You could also use the bind() helper method provided by SC.Object. (This is\n  the same method used by SC.Object.init() to setup your bindings):\n\n        MyApp.anotherObject.bind(\"value\", \"MyApp.someController.value\") ;\n\n  Both of these code fragments have the same effect as doing the most friendly\n  form of binding creation like so:\n\n\n        MyApp.anotherObject = SC.Object.create({\n          valueBinding: \"MyApp.someController.value\",\n\n          // OTHER CODE FOR THIS OBJECT...\n\n        }) ;\n\n  SproutCore's built in binding creation method make it easy to automatically\n  create bindings for you.  You should always use the highest-level APIs\n  available, even if you understand how to it works underneath.",
    "methods": [
      {
        "name": "dateTime",
        "displayName": "SC.Binding.dateTime",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform to format the DateTime value to a String value according\n  to the passed format string. \n  \n\n      valueBinding: SC.Binding.dateTime('%Y-%m-%d %H:%M:%S')\n                              .from('MyApp.myController.myDateTime');",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "format",
            "isOptional": false,
            "defaultValue": "",
            "desc": "format string"
          }
        ]
      },
      {
        "name": "beget",
        "displayName": "SC.Binding#beget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the core method you use to create a new binding instance.  The\n    binding instance will have the receiver instance as its parent which means\n    any configuration you have there will be inherited.\n\n    The returned instance will also have its parentBinding property set to the\n    receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new binding instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path."
          }
        ]
      },
      {
        "name": "builder",
        "displayName": "SC.Binding#builder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a builder function for compatibility.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "from",
        "displayName": "SC.Binding#from",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will set \"from\" property path to the specified value.  It will not\n    attempt to resolve this property path to an actual object/property tuple\n    until you connect the binding.\n\n    The binding will search for the property path starting at the root level\n    unless you specify an alternate root object as the second paramter to this\n    method.  Alternatively, you can begin your property path with either \".\" or\n    \"*\", which will use the root object of the to side be default.  This special\n    behavior is used to support the high-level API provided by SC.Object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Tuple",
            "name": "propertyPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A property path or tuple"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "root",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional root object to use when resolving the path."
          }
        ]
      },
      {
        "name": "to",
        "displayName": "SC.Binding#to",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will set the \"to\" property path to the specified value.  It will not\n   attempt to reoslve this property path to an actual object/property tuple\n   until you connect the binding.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Tuple",
            "name": "propertyPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A property path or tuple"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "root",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional root object to use when resolving the path."
          }
        ]
      },
      {
        "name": "connect",
        "displayName": "SC.Binding#connect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to connect this binding instance so that it can receive and relay\n    changes.  This method will raise an exception if you have not set the\n    from/to properties yet.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": []
      },
      {
        "name": "disconnect",
        "displayName": "SC.Binding#disconnect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Disconnects the binding instance.  Changes will no longer be relayed.  You\n    will not usually need to call this method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": []
      },
      {
        "name": "fromPropertyDidChange",
        "displayName": "SC.Binding#fromPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the value of the \"from\" property changes.  This will mark\n    the binding as dirty if the value has changed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that contains the key"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the property which changed"
          }
        ]
      },
      {
        "name": "toPropertyDidChange",
        "displayName": "SC.Binding#toPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the value of the \"to\" property changes.  This will mark the\n    binding as dirty only if:\n\n    - the binding is not one way\n    - the value does not match the stored transformedBindingValue\n\n    if the value does not match the transformedBindingValue, then it will\n    become the new bindingValue.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that contains the key"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the property which changed"
          }
        ]
      },
      {
        "name": "flushPendingChanges",
        "displayName": "SC.Binding#flushPendingChanges",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method on SC.Binding to flush all bindings with changed pending.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if changes were flushed."
          }
        ],
        "params": []
      },
      {
        "name": "applyBindingValue",
        "displayName": "SC.Binding#applyBindingValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called at the end of the Run Loop to relay the changed\n    binding value from one side to the other.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sync",
        "displayName": "SC.Binding#sync",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calling this method on a binding will cause it to check the value of the\n    from side of the binding matches the current expected value of the\n    binding. If not, it will relay the change as if the from side's value has\n    just changed.\n\n    This method is useful when you are dynamically connecting bindings to a\n    network of objects that may have already been initialized.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "oneWay",
        "displayName": "SC.Binding#oneWay",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Configures the binding as one way.  A one-way binding will relay changes\n    on the \"from\" side to the \"to\" side, but not the other way around.  This\n    means that if you change the \"to\" side directly, the \"from\" side may have\n    a different value.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path to connect."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Optionally pass NO to set the binding back to two-way"
          }
        ]
      },
      {
        "name": "transform",
        "displayName": "SC.Binding#transform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the specified transform function to the array of transform functions.\n\n    The function you pass must have the following signature:\n\n          function(value) {} ;\n\n    It must return either the transformed value or an error object.\n\n    Transform functions are chained, so they are called in order.  If you are\n    extending a binding and want to reset the transforms, you can call\n    resetTransform() first.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "transformFunc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the transform function."
          }
        ]
      },
      {
        "name": "resetTransforms",
        "displayName": "SC.Binding#resetTransforms",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets the transforms for the binding.  After calling this method the\n    binding will no longer transform values.  You can then add new transforms\n    as needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": []
      },
      {
        "name": "noError",
        "displayName": "SC.Binding#noError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Specifies that the binding should not return error objects.  If the value\n    of a binding is an Error object, it will be transformed to a null value\n    instead.\n\n    Note that this is not a transform function since it will be called at the\n    end of the transform chain.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path to connect."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally pass NO to allow error objects again."
          }
        ]
      },
      {
        "name": "single",
        "displayName": "SC.Binding#single",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform to the chain that will allow only single values to pass.\n    This will allow single values, nulls, and error values to pass through.  If\n    you pass an array, it will be mapped as so:\n\n          [] => null\n          [a] => a\n          [a,b,c] => Multiple Placeholder\n\n    You can pass in an optional multiple placeholder or it will use the\n    default.\n\n    Note that this transform will only happen on forwarded valued.  Reverse\n    values are send unchanged.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "from path or null"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "placeholder",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional placeholder value."
          }
        ]
      },
      {
        "name": "notEmpty",
        "displayName": "SC.Binding#notEmpty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that will return the placeholder value if the value is\n    null, undefined, an empty array or an empty string.  See also notNull().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "from path or null"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "placeholder",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional placeholder."
          }
        ]
      },
      {
        "name": "notNull",
        "displayName": "SC.Binding#notNull",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that will return the placeholder value if the value is\n    null or undefined.  Otherwise it will passthrough untouched.  See also notEmpty().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "from path or null"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "placeholder",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional placeholder;"
          }
        ]
      },
      {
        "name": "multiple",
        "displayName": "SC.Binding#multiple",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that will convert the passed value to an array.  If\n    the value is null or undefined, it will be converted to an empty array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path"
          }
        ]
      },
      {
        "name": "bool",
        "displayName": "SC.Binding#bool",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform to convert the value to a bool value.  If the value is\n    an array it will return YES if array is not empty.  If the value is a string\n    it will return YES if the string is not empty.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path"
          }
        ]
      },
      {
        "name": "and",
        "displayName": "SC.Binding#and",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that forwards the logical 'AND' of values at 'pathA' and\n    'pathB' whenever either source changes.  Note that the transform acts strictly\n    as a one-way binding, working only in the direction\n\n      'pathA' AND 'pathB' --> value  (value returned is the result of ('pathA' && 'pathB'))\n\n    Usage example where a delete button's 'isEnabled' value is determined by whether\n    something is selected in a list and whether the current user is allowed to delete:\n\n      deleteButton: SC.ButtonView.design({\n        isEnabledBinding: SC.Binding.and('MyApp.itemsController.hasSelection', 'MyApp.userController.canDelete')\n      })",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "pathA",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The first part of the conditional"
          },
          {
            "title": "param",
            "type": "String",
            "name": "pathB",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The second part of the conditional"
          }
        ]
      },
      {
        "name": "or",
        "displayName": "SC.Binding#or",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that forwards the 'OR' of values at 'pathA' and\n    'pathB' whenever either source changes.  Note that the transform acts strictly\n    as a one-way binding, working only in the direction\n\n      'pathA' AND 'pathB' --> value  (value returned is the result of ('pathA' || 'pathB'))",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "pathA",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The first part of the conditional"
          },
          {
            "title": "param",
            "type": "String",
            "name": "pathB",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The second part of the conditional"
          }
        ]
      },
      {
        "name": "not",
        "displayName": "SC.Binding#not",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform to convert the value to the inverse of a bool value.  This\n    uses the same transform as bool() but inverts it.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path"
          }
        ]
      },
      {
        "name": "isNull",
        "displayName": "SC.Binding#isNull",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a transform that will return YES if the value is null or undefined, NO otherwise.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "fromPath",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from path"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isBinding",
        "displayName": "SC.Binding.isBinding",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Binding",
        "overview": "Extend SC.Binding with properites that make it easier to detect bindings\n  in the inspector",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21397,
    "name": "Border",
    "displayName": "SC.Border",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/border.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "The `SC.Border` mixin has be deprecated in favour of applying border properties\n  to an `SC.View`'s layout object. See {@link SC.View#layout}.\n\n  The Border mixin can be applied to any view to give it a visual border.\n  In addition to specifying the mixin itself, you should specify the border\n  style with the borderStyle property on your view.\n\n  Border style can be any predefined CSS class name or a border color.\n\n  If you specify a CSS class name, it must end in \"-border\". Additionally,\n  you should set the `borderTop`, `borderRight`, `borderBottom`, and\n  `borderLeft` properties so SproutCore can accurately account for the size\n  of your view.\n\n  SproutCore pre-defines several useful border styles including:\n\n   - `SC.BORDER_BEZEL`  -- displays an inlaid bezel\n   - `SC.BORDER_BLACK`  -- displays a black border\n   - `SC.BORDER_GRAY`   -- displays a gray border\n   - `SC.BORDER_TOP`    -- displays a border on the top only\n   - `SC.BORDER_BOTTOM` -- displays a border on the bottom only\n   - `SC.BORDER_NONE`   -- disables the border",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "borderTop",
        "displayName": "SC.Border.borderTop",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Border",
        "overview": "The thickness of the top border.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "borderRight",
        "displayName": "SC.Border.borderRight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Border",
        "overview": "The thickness of the right border.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "borderBottom",
        "displayName": "SC.Border.borderBottom",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Border",
        "overview": "The thickness of the bottom border.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "borderLeft",
        "displayName": "SC.Border.borderLeft",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Border",
        "overview": "The thickness of the left border.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "borderStyle",
        "displayName": "SC.Border.borderStyle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Border",
        "overview": "The style of the border. You may specify a color string (like 'red' or\n    '#fff'), a CSS class name, or one of:\n\n      - SC.BORDER_BEZEL\n      - SC.BORDER_BLACK\n      - SC.BORDER_GRAY\n      - SC.BORDER_TOP\n      - SC.BORDER_BOTTOM\n      - SC.BORDER_NONE\n\n    If you specify a CSS class name, it must end in \"-border\".",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 5394,
    "name": "browser",
    "displayName": "SC.browser",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/bootstrap/system/browser.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Contains information about the browser environment that SproutCore\n  is running in. String properties, such as `SC.browser.webkit` or\n  `SC.browser.msie`, will have a value that represents the browser build\n  number if that browser is being used. Otherwise, they will have a\n  falsey value. For convenience, Boolean counterparts for all of the\n  versioned properties are provided.",
    "methods": [
      {
        "name": "compareVersion",
        "displayName": "SC.browser.compareVersion",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pass any number of arguments, and this will check them against the browser\n    version split on \".\".  If any of them are not equal, return the inequality.\n    If as many arguments as were passed in are equal, return 0.  If something\n    is NaN, return 0.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isWindows",
        "displayName": "SC.browser.isWindows",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMac",
        "displayName": "SC.browser.isMac",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPhone",
        "displayName": "SC.browser.isiPhone",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPod",
        "displayName": "SC.browser.isiPod",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPad",
        "displayName": "SC.browser.isiPad",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiOS",
        "displayName": "SC.browser.isiOS",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isAndroid",
        "displayName": "SC.browser.isAndroid",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "opera",
        "displayName": "SC.browser.opera",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isOpera",
        "displayName": "SC.browser.isOpera",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "msie",
        "displayName": "SC.browser.msie",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isIE",
        "displayName": "SC.browser.isIE",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isIE8OrLower",
        "displayName": "SC.browser.isIE8OrLower",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "mozilla",
        "displayName": "SC.browser.mozilla",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMozilla",
        "displayName": "SC.browser.isMozilla",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "webkit",
        "displayName": "SC.browser.webkit",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isWebkit",
        "displayName": "SC.browser.isWebkit",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "chrome",
        "displayName": "SC.browser.chrome",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isChrome",
        "displayName": "SC.browser.isChrome",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "mobileSafari",
        "displayName": "SC.browser.mobileSafari",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMobileSafari",
        "displayName": "SC.browser.isMobileSafari",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "iPadSafari",
        "displayName": "SC.browser.iPadSafari",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPadSafari",
        "displayName": "SC.browser.isiPadSafari",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "iPhoneSafari",
        "displayName": "SC.browser.iPhoneSafari",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPhoneSafari",
        "displayName": "SC.browser.isiPhoneSafari",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "iPodSafari",
        "displayName": "SC.browser.iPodSafari",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isiPodSafari",
        "displayName": "SC.browser.isiPodSafari",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "safari",
        "displayName": "SC.browser.safari",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSafari",
        "displayName": "SC.browser.isSafari",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "language",
        "displayName": "SC.browser.language",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "current",
        "displayName": "SC.browser.current",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.browser",
        "overview": "Possible values:\n    \n      - 'msie'\n      - 'mozilla'\n      - 'chrome'\n      - 'safari'\n      - 'opera'\n      - 'mobile-safari'\n      - 'unknown'",
        "defaultValue": "'unknown'",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6357,
    "name": "Builder",
    "displayName": "SC.Builder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/builder.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The Builder class makes it easy to create new chained-builder API's such as\n  those provided by CoreQuery or jQuery.  Usually you will not create a new\n  builder yourself, but you will often use instances of the Builder object to\n  configure parts of the UI such as menus and views.\n  \n  # Anatomy of a Builder\n  \n  You can create a new Builder much like you would any other class in \n  SproutCore.  For example, you could create a new CoreQuery-type object with\n  the following:\n  \n      SC.$ = SC.Builder.create({\n        // methods you can call go here.\n      });\n  \n  Unlike most classes in SproutCore, Builder objects are actually functions \n  that you can call to create new instances.  In the example above, to use \n  the builder, you must call it like a function:\n  \n      buildit = SC.$();\n  \n  If you define an init() method on a builder, it will be invoked wheneve the\n  builder is called as a function, including any passed params.  Your init()\n  method MUST return this, unlike regular SC objects.  i.e.\n  \n      SC.$ = SC.Builder.create({\n        init: function(args) { \n          this.args = SC.A(args);\n          return this;\n        }\n      });\n      \n      buildit = SC.$('a', 'b');\n      buildit.args => ['a','b']\n  \n  In addition to defining a function like this, all builder objects also have\n  an 'fn' property that contains a hash of all of the helper methods defined\n  on the builder function.  Once a builder has been created, you can add \n  addition \"plugins\" for the builder by simply adding new methods to the\n  fn property.\n  \n  # Writing Builder Functions\n  \n  All builders share a few things in common:\nwhen a new builder is created, it's init() method will be called.  The default version of this method simply copies the passed parameters into the builder as content, but you can override this with anything you want.\nthe content the builder works on is stored as indexed properties (i.e. 0,1,2,3, like an array).  The builder should also have a length property if you want it treated like an array.\n- Builders also maintain a stack of previous builder instances which you can pop off at any time.\n  \n  To get content back out of a builder once you are ready with it, you can\n  call the method done().  This will return an array or a single object, if \n  the builder only works on a single item.\n  \n  You should write your methods using the getEach() iterator to work on your\n  member objects.  All builders implement SC.Enumerable in the fn() method.\n\n      CoreQuery = SC.Builder.create({\n        ...\n      }) ;\n      \n      CoreQuery = new SC.Builder(properties) {\n        ...\n      } ;\n      \n      CoreQuery2 = CoreQuery.extend() {\n      }",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.Builder.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create a new builder object, applying the passed properties to the \n  builder's fn property hash.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Builder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "properties",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "fn",
        "displayName": "SC.Builder.fn",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Builder",
        "overview": "This is the default set of helper methods defined for new builders.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 27070,
    "name": "ButtonView",
    "displayName": "SC.ButtonView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "Implements a push-button-style button.  This class is used to implement\n  both standard push buttons and tab-style controls.  See also SC.CheckboxView\n  and SC.RadioView which are implemented as field views, but can also be\n  treated as buttons.\n\n  By default, a button uses the SC.Control mixin which will apply CSS\n  classnames when the state of the button changes:\n\n   - `active` -- when button is active\n   - `sel` -- when button is toggled to a selected state",
    "methods": [
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.ButtonView#acceptsFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tied to the isEnabled state",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "displayTitle",
        "displayName": "SC.ButtonView#displayTitle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is generated by localizing the title property if necessary.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "triggerActionAfterDelay",
        "displayName": "SC.ButtonView#triggerActionAfterDelay",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the user presses a shortcut key, such as return or cancel,\n    associated with this button.\n\n    Highlights the button to show that it is being triggered, then, after a\n    delay, performs the button's action.\n\n    Does nothing if the button is disabled.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if successful, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didTriggerAction",
        "displayName": "SC.ButtonView#didTriggerAction",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Callback called anytime the button's action is triggered.  You can\n    implement this method in your own subclass to perform any cleanup needed\n    after an action is performed.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "contentPropertyDidChange",
        "displayName": "SC.ButtonView#contentPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the value, title, and icon keys based on the content object, if\n    set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ButtonView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "performKeyEquivalent",
        "displayName": "SC.ButtonView#performKeyEquivalent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handle a key equivalent if set.  Trigger the default action for the \n    button.  Depending on the implementation this may vary.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keystring",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "computeIsSelectedForValue",
        "displayName": "SC.ButtonView#computeIsSelectedForValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the standard logic to compute a proposed isSelected state for a\n    new value.  This takes into account the `toggleOnValue`/`toggleOffValue`\n    properties, among other things.  It may return `YES`, `NO`, or\n    `SC.MIXED_STATE`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "return state"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ButtonView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "",
        "defaultValue": "['sc-button-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "themeName",
        "displayName": "SC.ButtonView#themeName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The theme to apply to the button. By default, a subtheme with the name of\n    'square' is created for backwards-compatibility.",
        "defaultValue": "'square'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.ButtonView#value",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "Used to automatically update the state of the button view for toggle style\n    buttons.\n\n    For toggle style buttons, you can set the value and it will be used to\n    update the isSelected state of the button view.  The value will also\n    change as the user selects or deselects.  You can control which values\n    the button will treat as `isSelected` by setting the `toggleOnValue` and\n    `toggleOffValue`.  Alternatively, if you leave these properties set to\n    `YES` or `NO`, the button will do its best to convert a value to an\n    appropriate state:\n  \n     - `null`, `false`, `0` -- `isSelected = false`\n     - any other single value -- `isSelected = true`\n     - array -- if all values are the same state, that state; otherwise `MIXED`.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toggleOnValue",
        "displayName": "SC.ButtonView#toggleOnValue",
        "objectType": "property",
        "propertyType": "Boolean|Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "Value of a selected toggle button.\n    \n    For a toggle button, set this to any object value you want. The button\n    will be selected if the value property equals the targetValue. If the\n    value is an array of multiple items that contains the targetValue, then\n    the button will be set to a mixed state.\n    \n    default is YES",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toggleOffValue",
        "displayName": "SC.ButtonView#toggleOffValue",
        "objectType": "property",
        "propertyType": "Boolean|Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "Value of an unselected toggle button.\n    \n    For a toggle button, set this to any object value you want.  When the\n    user toggle's the button off, the value of the button will be set to this\n    value.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.ButtonView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If YES, then the title will be localized.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "title",
        "displayName": "SC.ButtonView#title",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The button title.  If localize is `YES`, then this should be the\n    localization key to display.  Otherwise, this will be the actual string\n    displayed in the title.  This property is observable and bindable.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentTitleKey",
        "displayName": "SC.ButtonView#contentTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If set, the title property will be updated automatically\n    from the content using the key you specify.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.ButtonView#icon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The button icon. Set this to either a URL or a CSS class name (for\n    spriting). Note that if you pass a URL, it must contain at\n    least one slash to be detected as such.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIconKey",
        "displayName": "SC.ButtonView#contentIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If you set this property, the icon will be updated automatically from the\n    content using the key you specify.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsEllipsis",
        "displayName": "SC.ButtonView#needsEllipsis",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If YES, button will attempt to display an ellipsis if the title cannot\n    fit inside of the visible area. This feature is not available on all\n    browsers.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "keyEquivalent",
        "displayName": "SC.ButtonView#keyEquivalent",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The key equivalent that should trigger this button on the page.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonBehavior",
        "displayName": "SC.ButtonView#buttonBehavior",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The behavioral mode of this button.\n\n    Possible values are:\n\n     - `SC.PUSH_BEHAVIOR` -- Pressing the button will trigger an action tied to the\n       button. Does not change the value of the button.\n     - `SC.TOGGLE_BEHAVIOR` -- Pressing the button will invert the current value of\n       the button. If the button has a mixed value, it will be set to true.\n     - `SC.TOGGLE_ON_BEHAVIOR` -- Pressing the button will set the current state to\n       true no matter the previous value.\n     - `SC.TOGGLE_OFF_BEHAVIOR` -- Pressing the button will set the current state to\n       false no matter the previous value.\n     - `SC.HOLD_BEHAVIOR` -- Pressing the button will cause the action to repeat at a\n       regular interval specifed by 'holdInterval'",
        "defaultValue": "SC.PUSH_BEHAVIOR",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isDefault",
        "displayName": "SC.ButtonView#isDefault",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If YES, then this button will be triggered when you hit return.\n\n    This is the same as setting the `keyEquivalent` to 'return'.  This will also\n    apply the \"def\" classname to the button.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isCancel",
        "displayName": "SC.ButtonView#isCancel",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If YES, then this button will be triggered when you hit escape.\n    This is the same as setting the keyEquivalent to 'escape'.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "action",
        "displayName": "SC.ButtonView#action",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The name of the action you want triggered when the button is pressed.\n\n    This property is used in conjunction with the target property to execute\n    a method when a regular button is pressed.  These properties are not\n    relevant when the button is used in toggle mode.\n\n    If you do not set a target, then pressing a button will cause the\n    responder chain to search for a view that implements the action you name\n    here.  If you set a target, then the button will try to call the method\n    on the target itself.\n\n    For legacy support, you can also set the action property to a function.\n    Doing so will cause the function itself to be called when the button is\n    clicked.  It is generally better to use the target/action approach and\n    to implement your code in a controller of some type.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "target",
        "displayName": "SC.ButtonView#target",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The target object to invoke the action on when the button is pressed.\n\n    If you set this target, the action will be called on the target object\n    directly when the button is clicked.  If you leave this property set to\n    null, then the button will search the responder chain for a view that\n    implements the action when the button is pressed instead.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportFocusRing",
        "displayName": "SC.ButtonView#supportFocusRing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "If YES, use a focus ring.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoResizePadding",
        "displayName": "SC.ButtonView#autoResizePadding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The padding to add to the measured size of the text to arrive at the measured\n    size for the view.\n\n    `SC.ButtonView` gets this from its render delegate, but if not supplied, defaults\n    to 10.",
        "defaultValue": "10",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "titleMinWidth",
        "displayName": "SC.ButtonView#titleMinWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The minimum width the button title should consume.  This property is used\n    when generating the HTML styling for the title itself.  The default\n    width of 80 usually provides a nice looking style, but you can set it to 0\n    if you want to disable minimum title width.\n\n    Note that the title width does not exactly match the width of the button\n    itself.  Extra padding added by the theme can impact the final total\n    size.",
        "defaultValue": "80",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.ButtonView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The WAI-ARIA role of the button.",
        "defaultValue": "'button'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.ButtonView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The following properties affect how `SC.ButtonView` is rendered, and will\n    cause the view to be rerendered if they change.",
        "defaultValue": "[\n      'icon', 'displayTitle', 'value', 'displayToolTip', 'isDefault', 'isCancel', \n      'escapeHTML', 'needsEllipsis', 'hint', 'titleMinWidth', 'supportFocusRing'\n    ]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.ButtonView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The name of the render delegate in the theme that should be used to\n    render the button.\n    \n    In this case, the 'button' property will be retrieved from the theme and\n    set to the render delegate of this view.",
        "defaultValue": "'buttonRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "CLICK_AND_HOLD_DELAY",
        "displayName": "SC.ButtonView.CLICK_AND_HOLD_DELAY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ButtonView",
        "overview": "The delay after which \"click\" behavior should transition to \"click and hold\"\n  behavior. This is used by subclasses such as PopupButtonView and\n  SelectButtonView.",
        "isConstant": true,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 34972,
    "name": "CalculatesEmptiness",
    "displayName": "SC.CalculatesEmptiness",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/forms/mixins/emptiness.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A view is empty if all of its children are empty. A view is automatically counted as empty if it is not visible and not empty if it is being edited.\n  All fields must mix this in for it to work properly.",
    "methods": [
      {
        "name": "isEmpty",
        "displayName": "SC.CalculatesEmptiness.isEmpty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "YES if the field itself is empty. Even if the value is non-empty, the field can be empty due to isVisible.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isValue",
        "displayName": "SC.CalculatesEmptiness.isValue",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CalculatesEmptiness",
        "overview": "Whether this view should be considered a value. If it is not it will be ignored for calculating emptiness.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isValueEmpty",
        "displayName": "SC.CalculatesEmptiness.isValueEmpty",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CalculatesEmptiness",
        "overview": "YES if the value of the field is empty. Defaults to yes so if you don't override this, it will only consider child fields in emptiness calculation (this is the desired behavior for forms).",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14617,
    "name": "CascadeDataSource",
    "displayName": "SC.CascadeDataSource",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/data_sources/cascade.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.DataSource"
      }
    ],
    "overview": "A cascading data source will actually forward requests onto an array of \n  additional data sources, stopping when one of the data sources returns YES,\n  indicating that it handled the request.  \n  \n  You can use a cascading data source to tie together multiple data sources,\n  treating them as a single namespace.\n  \n  ## Configuring a Cascade Data Source\n  \n  You will usually define your cascading data source in your main method after\n  all the classes you have are loaded.\n  \n      MyApp.dataSource = SC.CascadeDataSource.create({\n        dataSources: \"prefs youtube photos\".w(),\n        \n        prefs:   MyApp.PrefsDataSource.create({ root: \"/prefs\" }),\n        youtube: YouTube.YouTubeDataSource.create({ apiKey: \"123456\" }),\n        photos:  MyApp.PhotosDataSource.create({ root: \"photos\" })\n        \n      });\n      \n      MyApp.store.set('dataSource', MyApp.dataSource);\n  \n  Note that the order you define your dataSources property will determine the\n  order in which requests will cascade from the store.\n  \n  Alternatively, you can use a more jQuery-like API for defining your data\n  sources:\n  \n      MyApp.dataSource = SC.CascadeDataSource.create()\n        .from(MyApp.PrefsDataSource.create({ root: \"/prefs\" }))\n        .from(YouTube.YouTubeDataSource.create({ apiKey: \"123456\" }))\n        .from(MyApp.PhotosDataSource.create({ root: \"photos\" }));\n\n      MyApp.store.set('dataSource', MyApp.dataSource);\n\n  In this case, the order you call from() will determine the order the request\n  will cascade.",
    "methods": [
      {
        "name": "from",
        "displayName": "SC.CascadeDataSource#from",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add a data source to the list of sources to use when cascading.  Used to\n    build the data source cascade effect.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CascadeDataSource",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DataSource",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a data source instance to add."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "dataSources",
        "displayName": "SC.CascadeDataSource#dataSources",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CascadeDataSource",
        "overview": "The data sources used by the cascade, in the order that they are to be \n    followed.  Usually when you define the cascade, you will define this\n    array.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6127,
    "name": "Checkbox",
    "displayName": "SC.Checkbox",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/mixins/template_helpers/checkbox_support.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 27189,
    "name": "CheckboxView",
    "displayName": "SC.CheckboxView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/checkbox.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "Represents a Checkbox Button.\n  \n  The view is an `SC.ButtonView` put into toggle mode and with the 'theme' property\n  set to \"checkbox\".\n  \n  Rendering\n  ----------------------------\n  SC.ButtonView delegates its rendering to its theme. As the theme is set\n  to \"checkbox\", the way the checkbox renders (including DOM) will actually\n  be different than SC.ButtonView's.",
    "methods": [
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.CheckboxView#acceptsFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "`YES` if `isEnabled` is `YES`, `NO` otherwise",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.CheckboxView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CheckboxView",
        "overview": "",
        "defaultValue": "['sc-checkbox-view', 'sc-checkbox-control']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.CheckboxView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CheckboxView",
        "overview": "The WAI-ARIA role of checkbox.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.CheckboxView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CheckboxView",
        "overview": "",
        "defaultValue": "'checkboxRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsEllipsis",
        "displayName": "SC.CheckboxView#needsEllipsis",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CheckboxView",
        "overview": "Ellipsis is disabled by default to allow multiline text",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 15240,
    "name": "ChildArray",
    "displayName": "SC.ChildArray",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/child_array.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Array"
      }
    ],
    "overview": "A `ChildArray` is used to map an array of `ChildRecord` objects.",
    "methods": [
      {
        "name": "store",
        "displayName": "SC.ChildArray#store",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The store that owns this record array.  All record arrays must have a\n    store to function properly.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "storeKey",
        "displayName": "SC.ChildArray#storeKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The storeKey for the parent record of this many array.  Editing this\n    array will place the parent record into a `READY_DIRTY state.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "readOnlyChildren",
        "displayName": "SC.ChildArray#readOnlyChildren",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the storeIds in read only mode.  Avoids modifying the record\n    unnecessarily.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "editableChildren",
        "displayName": "SC.ChildArray#editableChildren",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an editable array of child hashes.  Marks the owner records as\n    modified.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "objectAt",
        "displayName": "SC.ChildArray#objectAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Looks up the store id in the store ids array and materializes a\n    records.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The record if found or undefined."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of the object to retrieve."
          }
        ]
      },
      {
        "name": "replace",
        "displayName": "SC.ChildArray#replace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pass through to the underlying array.  The passed in objects must be\n    records, which can be converted to `storeId`s.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The record if found or undefined."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index of the object to replace."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of records to replace starting at idx."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "recs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array with records to replace."
          }
        ]
      },
      {
        "name": "normalize",
        "displayName": "SC.ChildArray#normalize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calls normalize on each object in the array",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "recordPropertyDidChange",
        "displayName": "SC.ChildArray#recordPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the children array changes.  Observes changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ChildArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "itself."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "keys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "defaultRecordType",
        "displayName": "SC.ChildArray#defaultRecordType",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ChildArray",
        "overview": "If set, it is the default record `recordType`",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "record",
        "displayName": "SC.ChildArray#record",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ChildArray",
        "overview": "If set, the parent record will be notified whenever the array changes so that\n    it can change its own state",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "propertyName",
        "displayName": "SC.ChildArray#propertyName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ChildArray",
        "overview": "If set will be used by the many array to get an editable version of the\n    `storeId`s from the owner.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "children",
        "displayName": "SC.ChildArray#children",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ChildArray",
        "overview": "Actual references to the hashes",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14804,
    "name": "ChildAttribute",
    "displayName": "SC.ChildAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/child_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.RecordAttribute"
      }
    ],
    "overview": "ChildAttribute is a subclass of `RecordAttribute` and handles to-one \n  relationships for child records.\n  \n  When setting ( `.set()` ) the value of a toMany attribute, make sure\n  to pass in an array of `SC.Record` objects.\n  \n  There are many ways you can configure a ManyAttribute:\n  \n      contacts: SC.ChildAttribute.attr('SC.Child');",
    "methods": [
      {
        "name": "call",
        "displayName": "SC.ChildAttribute#call",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The core handler.  Called from the property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record instance"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key used to access this attribute on the record"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property value if called as a setter"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 14824,
    "name": "ChildRecord",
    "displayName": "SC.ChildRecord",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/child_record.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 14826,
    "name": "ChildrenAttribute",
    "displayName": "SC.ChildrenAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/children_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.RecordAttribute"
      }
    ],
    "overview": "ChildrenAttribute is a subclass of ChildAttribute and handles to-many \n  relationships for child records.\n  \n  When setting ( `.set()` ) the value of a toMany attribute, make sure\n  to pass in an array of SC.Record objects.\n  \n  There are many ways you can configure a ChildrenAttribute:\n  \n      contacts: SC.ChildrenAttribute.attr('SC.Child');",
    "methods": [],
    "properties": []
  },
  {
    "guid": 36452,
    "name": "CollectionContent",
    "displayName": "SC.CollectionContent",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/collection_content.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This mixin provides standard methods used by a CollectionView to provide\n  additional meta-data about content in a collection view such as selection\n  or enabled state.\n  \n  You can apply this mixin to a class that you set as a delegate or to the\n  object you set as content.",
    "methods": [
      {
        "name": "contentIndexIsSelected",
        "displayName": "SC.CollectionContent.contentIndexIsSelected",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Return YES if the content index should be selected.  Default behavior \n    looks at the selection property on the view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexIsEnabled",
        "displayName": "SC.CollectionContent.contentIndexIsEnabled",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the content index should be enabled.  Default looks at the\n    isEnabled state of the collection view.\n    looks at the selection property on the view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentGroupIndexes",
        "displayName": "SC.CollectionContent.contentGroupIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Optionally return an index set containing the indexes that may be group\n    views.  For each group view, the delegate will actually be asked to \n    confirm the view is a group using the contentIndexIsGroup() method.\n    \n    If grouping is not enabled, return null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the calling view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          }
        ]
      },
      {
        "name": "contentIndexIsGroup",
        "displayName": "SC.CollectionContent.contentIndexIsGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the item at the specified content index should be rendered\n    using the groupExampleView instead of the regular exampleView.  Note that\n    a group view is different from a branch/leaf view.  Group views often \n    appear with different layout and a different look and feel.\n\n    Default always returns NO.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexOutlineLevel",
        "displayName": "SC.CollectionContent.contentIndexOutlineLevel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the outline level for the item at the specified index.  Can be \n    used to display hierarchical lists.\n    \n    Default always returns -1 (no outline).",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexDisclosureState",
        "displayName": "SC.CollectionContent.contentIndexDisclosureState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a constant indicating the disclosure state of the item.  Must be\n    one of SC.BRANCH_OPEN, SC.BRANCH_CLOSED, SC.LEAF_NODE.  If you return one\n    of the BRANCH options then the item may be rendered with a disclosure \n    triangle open or closed.  If you return SC.LEAF_NODe then the item will \n    be rendered as a leaf node.  \n\n    Default returns SC.LEAF_NODE.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexExpand",
        "displayName": "SC.CollectionContent.contentIndexExpand",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to expand a content index item if it is currently in a closed \n    disclosure state.  The default implementation does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexCollapse",
        "displayName": "SC.CollectionContent.contentIndexCollapse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to collapse a content index item if it is currently in an open \n    disclosure state.  The default implementation does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isCollectionContent",
        "displayName": "SC.CollectionContent.isCollectionContent",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionContent",
        "overview": "Used to detect the mixin by SC.CollectionView",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21422,
    "name": "CollectionFastPath",
    "displayName": "SC.CollectionFastPath",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/collection_fast_path.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "An experimental `CollectionView` mixin that makes it extremely fast under\n  certain circumstances, including for mobile devices.",
    "methods": [
      {
        "name": "poolForExampleView",
        "displayName": "SC.CollectionFastPath.poolForExampleView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the pool for a given example view.\n    \n    The pool is calculated based on the guid for the example view class.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "exampleView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "createItemViewFromExampleView",
        "displayName": "SC.CollectionFastPath.createItemViewFromExampleView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates an item view from a given example view, configuring it with basic settings\n    and the supplied attributes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "exampleView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "configureItemView",
        "displayName": "SC.CollectionFastPath.configureItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "itemView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "wakePooledView",
        "displayName": "SC.CollectionFastPath.wakePooledView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Configures a pooled view, calling `.awakeFromPool` if it is defined.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "itemView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "allocateItemView",
        "displayName": "SC.CollectionFastPath.allocateItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets an item view from an example view, from a pool if possible, and otherwise\n    by generating it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "exampleView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "releaseItemView",
        "displayName": "SC.CollectionFastPath.releaseItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Releases an item view. If the item view is pooled, it puts it into the pool;\n    otherwise, this calls `.destroy()`.\n    \n    This is called for one of two purposes: to release a view that is no longer displaying,\n    or to release an older cached version of a view that needed to be replaced because the\n    example view changed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "itemView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "itemViewForContentIndex",
        "displayName": "SC.CollectionFastPath.itemViewForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the item view for the given content index.\n    NOTE: THIS WILL ADD THE VIEW TO DOM TEMPORARILY (it will be cleaned if\n          it is not used). As such, use sparingly.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reloadIfNeeded",
        "displayName": "SC.CollectionFastPath.reloadIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reloads.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "nowShowing",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "scrollOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "processRemovals",
        "displayName": "SC.CollectionFastPath.processRemovals",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Loops through remove queue and removes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "oldMap",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateItemView",
        "displayName": "SC.CollectionFastPath.updateItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the specified item view. If the view is not \"layer cacheable\" or the\n    example view has changed, it will be redrawn.\n    \n    Otherwise, nothing will happen.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "current",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "exampleView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "domPoolSize",
        "displayName": "SC.CollectionFastPath.domPoolSize",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionFastPath",
        "overview": "",
        "defaultValue": "10",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21622,
    "name": "CollectionGroup",
    "displayName": "SC.CollectionGroup",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/collection_group.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Any view you want to use as a group view in a collection must include this\n  mixin.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.CollectionGroup.classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionGroup",
        "overview": "",
        "defaultValue": "['sc-collection-group']",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21624,
    "name": "CollectionRowDelegate",
    "displayName": "SC.CollectionRowDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/collection_row_delegate.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "`CollectionRowDelegate`s are consulted by `SC.ListView` and `SC.TableView` to\n  control the height of rows, including specifying custom heights for\n  specific rows.\n  \n  You can implement a custom row height in one of two ways.",
    "methods": [
      {
        "name": "rowHeight",
        "displayName": "SC.CollectionRowDelegate.rowHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Total row height used for calculation. Equal to `itemHeight + (2 * rowPadding)`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexRowHeight",
        "displayName": "SC.CollectionRowDelegate.contentIndexRowHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called for each index in the `customRowHeightIndexes` set to get the\n    actual row height for the index.  This method should return the default\n    rowHeight if you don't want the row to have a custom height.\n    \n    The default implementation just returns the default rowHeight.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "row height"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the calling view"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content array"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "contentIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isCollectionRowDelegate",
        "displayName": "SC.CollectionRowDelegate.isCollectionRowDelegate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionRowDelegate",
        "overview": "Walk like a duck.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemHeight",
        "displayName": "SC.CollectionRowDelegate.itemHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionRowDelegate",
        "overview": "Size of an item without spacing or padding.\n    Unless you implement some custom row height\n    support, this row height will be used for all items.",
        "defaultValue": "18",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowSpacing",
        "displayName": "SC.CollectionRowDelegate.rowSpacing",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionRowDelegate",
        "overview": "This inserts empty space between rows that you can use for borders.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowPadding",
        "displayName": "SC.CollectionRowDelegate.rowPadding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionRowDelegate",
        "overview": "This is useful if you are using a custom item view that needs to be padded.\n    This value is added to the top and bottom of the `itemHeight`.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "customRowHeightIndexes",
        "displayName": "SC.CollectionRowDelegate.customRowHeightIndexes",
        "objectType": "property",
        "propertyType": "SC.IndexSet",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionRowDelegate",
        "overview": "Index set of rows that should have a custom row height. If you need\n    certains rows to have a custom row height, then set this property to a\n    non-null value.  Otherwise leave it blank to disable custom row heights.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 27209,
    "name": "CollectionView",
    "displayName": "SC.CollectionView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/collection.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 0.9",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionViewDelegate"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionContent"
      }
    ],
    "overview": "Renders a collection of views from a source array of model objects.\n   \n  The `CollectionView` is the root view class for rendering collections of\n  views based on a source array of objects.  It can automatically create the\n  and layout the views, including displaying them in groups.  It also \n  handles event input for the entire collection.\n  \n  To use `CollectionView`, just create the view and set the 'content' property\n  to an array of objects.  (Note that if you setup a binding, it will \n  always transform content to an array.)  The view will create instances of\n  exampleView to render the array.  You can also bind to the selection \n  property if you want to monitor selection. (be sure to set the isEnabled\n  property to allow selection.)",
    "methods": [
      {
        "name": "computeLayout",
        "displayName": "SC.CollectionView#computeLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return the computed layout dimensions of the collection view.\n    You can omit any dimensions you don't care about setting in your \n    computed value.\n    \n    This layout is automatically applied whenever the content changes.\n    \n    If you don't care about computing the layout at all, you can return null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "layout properties"
          }
        ],
        "params": []
      },
      {
        "name": "layoutForContentIndex",
        "displayName": "SC.CollectionView#layoutForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to compute the layout of the itemView for the content at the \n    specified index.  This layout will be applied to the view just before it\n    is rendered.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a view layout"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "contentIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of content being rendered by\n      itemView"
          }
        ]
      },
      {
        "name": "contentIndexesInRect",
        "displayName": "SC.CollectionView#contentIndexesInRect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return an IndexSet with the indexes that are at least \n    partially visible in the passed rectangle.  This method is used by the \n    default implementation of `computeNowShowing()` to determine the new\n    `nowShowing` range after a scroll.\n    \n    Override this method to implement incremental rendering.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "now showing indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "rect",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the visible rect"
          }
        ]
      },
      {
        "name": "computeNowShowing",
        "displayName": "SC.CollectionView#computeNowShowing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Compute the nowShowing index set.  The default implementation simply \n    returns the full range.  Override to implement incremental rendering.\n    \n    You should not normally call this method yourself.  Instead get the \n    nowShowing property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new now showing range"
          }
        ],
        "params": []
      },
      {
        "name": "showInsertionPoint",
        "displayName": "SC.CollectionView#showInsertionPoint",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to show the insertion point during a drag.\n    \n    Called during a drag to show the insertion point.  Passed value is the\n    item view that you should display the insertion point before.  If the\n    passed value is `null`, then you should show the insertion point *AFTER* that\n    last item view returned by the itemViews property.\n    \n    Once this method is called, you are guaranteed to also recieve a call to\n    `hideInsertionPoint()` at some point in the future.\n    \n    The default implementation of this method does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "itemView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.ClassicView} view the insertion point should appear directly before. If null, show insertion point at end."
          },
          {
            "title": "param",
            "type": "",
            "name": "dropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} the drop operation.  will be SC.DROP_BEFORE, SC.DROP_AFTER, or SC.DROP_ON"
          }
        ]
      },
      {
        "name": "hideInsertionPoint",
        "displayName": "SC.CollectionView#hideInsertionPoint",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to hide the insertion point when a drag ends.\n    \n    Called during a drag to hide the insertion point.  This will be called \n    when the user exits the view, cancels the drag or completes the drag.  It \n    will not be called when the insertion point changes during a drag.\n    \n    You should expect to receive one or more calls to \n    `showInsertionPointBefore()` during a drag followed by at least one call to\n    this method at the end.  Your method should not raise an error if it is \n    called more than once.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "contentRangeDidChange",
        "displayName": "SC.CollectionView#contentRangeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the content array or an item in the content array or a\n    property on an item in the content array changes.  Reloads the appropriate\n    item view when the content array itself changes or calls \n    `contentPropertyDidChange()` if a property changes.\n    \n    Normally you will not call this method directly though you may override\n    it if you need to change the way changes to observed ranges are handled.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content array generating the change"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the changed object"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the changed property or '[]' or an array change"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "affected indexes or null for all items"
          }
        ]
      },
      {
        "name": "contentPropertyDidChange",
        "displayName": "SC.CollectionView#contentPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever a property on an item in the content array changes.  This\n    is only called if you have set `observesContentProperties` to `YES`.\n    \n    Override this property if you want to do some custom work whenever a \n    property on a content object changes.\n\n    The default implementation does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object that changed"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property that changed value"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the indexes in the content array affected"
          }
        ]
      },
      {
        "name": "updateContentRangeObserver",
        "displayName": "SC.CollectionView#updateContentRangeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the view needs to updates its `contentRangeObserver` to\n    reflect the current nowShowing index set.  You will not usually call this\n    method yourself but you may override it if you need to provide some \n    custom range observer behavior.\n\n    Note that if you do implement this method, you are expected to maintain\n    the range observer object yourself.  If a range observer has not been\n    created yet, this method should create it.  If an observer already exists\n    this method should udpate it.\n    \n    When you create a new range observer, the oberver must eventually call\n    `contentRangeDidChange()` for the collection view to function properly.\n    \n    If you override this method you probably also need to override \n    `destroyRangeObserver()` to cleanup any existing range observer.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "removeContentRangeObserver",
        "displayName": "SC.CollectionView#removeContentRangeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whever the view needs to invalidate the current content range \n    observer.  This is called whenever the content array changes.  You will \n    not usually call this method yourself but you may override it if you \n    provide your own range observer behavior.\n    \n    Note that if you override this method you should probably also override\n    `updateRangeObserver()` to create or update a range oberver as needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "contentLengthDidChange",
        "displayName": "SC.CollectionView#contentLengthDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the content length changes.  This will invalidate the \n    length property of the view itself causing the nowShowing to recompute\n    which will in turn update the UI accordingly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "reload",
        "displayName": "SC.CollectionView#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Regenerates the item views for the content items at the specified indexes.\n    If you pass null instead of an index set, regenerates all item views.\n    \n    This method is called automatically whenever the content array changes in\n    an observable way, but you can call its yourself also if you need to \n    refresh the collection view for some reason.\n    \n    Note that if the length of the content is shorter than the child views\n    and you call this method, then the child views will be removed no matter\n    what the index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reloadIfNeeded",
        "displayName": "SC.CollectionView#reloadIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked once per runloop to actually reload any needed item views.\n    You can call this method at any time to actually force the reload to\n    happen immediately if any item views need to be reloaded.\n    \n    Note that this method will also invoke two other callback methods if you\n    define them on your subclass:\n    \n      - *willReload()* is called just before the items are reloaded\n      - *didReload()* is called jsut after items are reloaded\n    \n    You can use these two methods to setup and teardown caching, which may\n    reduce overall cost of a reload.  Each method will be passed an index set\n    of items that are reloaded or null if all items are reloaded.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "itemViewForContentIndex",
        "displayName": "SC.CollectionView#itemViewForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the item view for the content object at the specified index. Call\n    this method instead of accessing child views directly whenever you need \n    to get the view associated with a content index.\n\n    Although this method take two parameters, you should almost always call\n    it with just the content index.  The other two parameters are used \n    internally by the CollectionView.\n    \n    If you need to change the way the collection view manages item views\n    you can override this method as well.  If you just want to change the\n    default options used when creating item views, override createItemView()\n    instead.\n  \n    Note that if you override this method, then be sure to implement this \n    method so that it uses a cache to return the same item view for a given\n    index unless \"force\" is YES.  In that case, generate a new item view and\n    replace the old item view in your cache with the new item view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "instantiated view"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "rebuild",
            "isOptional": false,
            "defaultValue": "",
            "desc": "internal use only"
          }
        ]
      },
      {
        "name": "itemViewForContentObject",
        "displayName": "SC.CollectionView#itemViewForContentObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method for getting the item view of a specific content object",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "createItemView",
        "displayName": "SC.CollectionView#createItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Primitive to instantiate an item view.  You will be passed the class \n    and a content index.  You can override this method to perform any other\n    one time setup.\n\n    Note that item views may be created somewhat frequently so keep this fast.\nIMPORTANT:* The attrs hash passed is reused each time this method is \n    called.   If you add properties to this hash be sure to delete them before\n    returning from this method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "item view instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "exampleClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "example view class"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "expected attributes"
          }
        ]
      },
      {
        "name": "layerIdFor",
        "displayName": "SC.CollectionView#layerIdFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a layerId for the passed index and item.  Usually the default\n    implementation is suitable.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "layer id, must be suitable for use in HTML id attribute"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "contentIndexForLayerId",
        "displayName": "SC.CollectionView#contentIndexForLayerId",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extracts the content index from the passed layerID.  If the layer id does\n    not belong to the receiver or if no value could be extracted, returns NO.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the layer id"
          }
        ]
      },
      {
        "name": "itemViewForEvent",
        "displayName": "SC.CollectionView#itemViewForEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find the first content item view for the passed event.\n    \n    This method will go up the view chain, starting with the view that was the \n    target of the passed event, looking for a child item.  This will become \n    the view that is selected by the mouse event.\n    \n    This method only works for mouseDown & mouseUp events.  mouseMoved events \n    do not have a target.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item view or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An event"
          }
        ]
      },
      {
        "name": "expand",
        "displayName": "SC.CollectionView#expand",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Expands any items in the passed selection array that have a disclosure\n    state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the indexes to expand"
          }
        ]
      },
      {
        "name": "collapse",
        "displayName": "SC.CollectionView#collapse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Collapses any items in the passed selection array that have a disclosure\n    state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the indexes to expand"
          }
        ]
      },
      {
        "name": "reloadSelectionIndexes",
        "displayName": "SC.CollectionView#reloadSelectionIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the selection changes.  The passed index set will contain\n    any affected indexes including those indexes that were previously \n    selected and now should be deselected.\n    \n    Pass null to reload the selection state for all items.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "affected indexes"
          }
        ]
      },
      {
        "name": "reloadSelectionIndexesIfNeeded",
        "displayName": "SC.CollectionView#reloadSelectionIndexesIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reloads the selection state if needed on any dirty indexes.  Normally this\n    will run once at the end of the runloop, but you can force the item views\n    to reload their selection immediately by calling this method.\n    \n    You can also override this method if needed to change the way the \n    selection is reloaded on item views.  The default behavior will simply\n    find any item views in the nowShowing range that are affected and \n    modify them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "select",
        "displayName": "SC.CollectionView#select",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Selection primitive.  Selects the passed IndexSet of items, optionally \n    extending the current selection.  If extend is NO or not passed then this\n    will replace the selection with the passed value.  Otherwise the indexes\n    will be added to the current selection.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number|SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index or indexes to select"
          },
          {
            "title": "param",
            "type": "",
            "name": "extend",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} optionally extend the selection"
          }
        ]
      },
      {
        "name": "deselect",
        "displayName": "SC.CollectionView#deselect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Primtive to remove the indexes from the selection.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number|SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index or indexes to deselect"
          }
        ]
      },
      {
        "name": "selectPreviousItem",
        "displayName": "SC.CollectionView#selectPreviousItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Select one or more items before the current selection, optionally\n    extending the current selection.  Also scrolls the selected item into \n    view.\n    \n    Selection does not wrap around.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "extend",
            "isOptional": true,
            "defaultValue": "",
            "desc": "If true, the selection will be extended \n      instead of replaced. Defaults to false."
          },
          {
            "title": "param",
            "type": "Integer",
            "name": "numberOfItems",
            "isOptional": true,
            "defaultValue": "",
            "desc": "The number of previous to be \n      selected.  Defaults to 1"
          }
        ]
      },
      {
        "name": "selectNextItem",
        "displayName": "SC.CollectionView#selectNextItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Select one or more items following the current selection, optionally\n    extending the current selection.  Also scrolls to selected item.\n    \n    Selection does not wrap around.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "extend",
            "isOptional": true,
            "defaultValue": "",
            "desc": "If true, the selection will be extended \n      instead of replaced. Defaults to false."
          },
          {
            "title": "param",
            "type": "Integer",
            "name": "numberOfItems",
            "isOptional": true,
            "defaultValue": "",
            "desc": "The number of items to be \n      selected. Defaults to 1."
          }
        ]
      },
      {
        "name": "deleteSelection",
        "displayName": "SC.CollectionView#deleteSelection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Deletes the selected content if canDeleteContent is YES.  This will invoke \n    delegate methods to provide fine-grained control.  Returns YES if the \n    deletion was possible, even if none actually occurred.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if deletion is possible."
          }
        ],
        "params": []
      },
      {
        "name": "scrollToContentIndex",
        "displayName": "SC.CollectionView#scrollToContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scroll the rootElement (if needed) to ensure that the item is visible.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "contentIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the item to scroll to"
          }
        ]
      },
      {
        "name": "scrollToItemView",
        "displayName": "SC.CollectionView#scrollToItemView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scroll to the passed item view.  If the item view is not visible on screen\n    this method will not work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CollectionView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The item view to scroll to"
          }
        ]
      },
      {
        "name": "dragDataForType",
        "displayName": "SC.CollectionView#dragDataForType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the drag data source protocol method. The implementation of\n    this method will consult the collection view delegate if one has been\n    provided.  It also respects the canReoderContent method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "computeDragOperations",
        "displayName": "SC.CollectionView#computeDragOperations",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the SC.DropTarget interface.  The default implementation will\n    consult the collection view delegate, if you implement those methods.\n    \n    This method is called once when the drag enters the view area.  It's \n    return value will be stored on the drag object as allowedDragOperations,\n    possibly further constrained by the drag source.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "logical OR'd mask of allowed drag operations."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the drag object"
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the event triggering this change, if available"
          }
        ]
      },
      {
        "name": "dragUpdated",
        "displayName": "SC.CollectionView#dragUpdated",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the SC.DropTarget interface.  The default implementation will\n    determine the drop location and then consult the collection view delegate\n    if you implement those methods.  Otherwise it will handle reordering\n    content on its own.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag that was updated"
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The event for the drag"
          }
        ]
      },
      {
        "name": "dragExited",
        "displayName": "SC.CollectionView#dragExited",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the SC.DropTarget protocol.  Hides any visible insertion \n    point and clears some cached values.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "acceptDragOperation",
        "displayName": "SC.CollectionView#acceptDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the SC.DropTarget protocol.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "performDragOperation",
        "displayName": "SC.CollectionView#performDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements the SC.DropTarget protocol. Consults the collection view\n    delegate to actually perform the operation unless the operation is \n    reordering content.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The operation performed"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag to perform the operation on"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag operation to perform"
          }
        ]
      },
      {
        "name": "collectionViewShouldBeginDrag",
        "displayName": "SC.CollectionView#collectionViewShouldBeginDrag",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default delegate method implementation, returns YES if canReorderContent\n    is also true.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "insertionIndexForLocation",
        "displayName": "SC.CollectionView#insertionIndexForLocation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the preferred insertion point for the given location, including \n    an insertion preference of before, after or on the named index.\n    \n    You can implement this method in a subclass if you like to perform a \n    more efficient check.  The default implementation will loop through the \n    item views looking for the first view to \"switch sides\" in the orientation \n    you specify.\n    \n    This method should return an array with two values.  The first value is\n    the insertion point index and the second value is the drop operation,\n    which should be one of SC.DROP_BEFORE, SC.DROP_AFTER, or SC.DROP_ON. \n    \n    The preferred drop operation passed in should be used as a hint as to \n    the type of operation the view would prefer to receive. If the \n    dropOperation is SC.DROP_ON, then you should return a DROP_ON mode if \n    possible.  Otherwise, you should never return DROP_ON.\n    \n    For compatibility, you can also return just the insertion index.  If you\n    do this, then the collction view will assume the drop operation is \n    SC.DROP_BEFORE.\n    \n    If an insertion is NOT allowed, you should return -1 as the insertion \n    point.  In this case, the drop operation will be ignored.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "format: [index, op]"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the mouse location."
          },
          {
            "title": "param",
            "type": "DropOp",
            "name": "dropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the preferred drop operation."
          }
        ]
      },
      {
        "name": "collectionViewShouldSelectItem",
        "displayName": "SC.CollectionView#collectionViewShouldSelectItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default delegate method implementation, returns YES if isSelectable\n    is also true.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.CollectionView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "",
        "defaultValue": "['sc-collection-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.CollectionView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "",
        "defaultValue": "['isFirstResponder', 'isEnabled', 'isActive']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.CollectionView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "",
        "defaultValue": "'collectionRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ACTION_DELAY",
        "displayName": "SC.CollectionView#ACTION_DELAY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "",
        "defaultValue": "200",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useFastPath",
        "displayName": "SC.CollectionView#useFastPath",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "If `YES`, uses the experimental fast `CollectionView` path.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.CollectionView#content",
        "objectType": "property",
        "propertyType": "SC.Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "An array of content objects\n    \n    This array should contain the content objects you want the collection view \n    to display.  An item view (based on the `exampleView` view class) will be\n    created for each content object, in the order the content objects appear \n    in this array.\n    \n    If you make the collection editable, the collection view will also modify \n    this array using the observable array methods of `SC.Array`.\n    \n    Usually you will want to bind this property to a controller property \n    that actually contains the array of objects you to display.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "length",
        "displayName": "SC.CollectionView#length",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The current length of the content.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nowShowing",
        "displayName": "SC.CollectionView#nowShowing",
        "objectType": "property",
        "propertyType": "SC.IndexSet",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The set of indexes that are currently tracked by the collection view.\n    This property is used to determine the range of items the collection view\n    should monitor for changes.\n    \n    The default implementation of this property returns an index set covering\n    the entire range of the content.  It changes automatically whenever the\n    length changes.\n    \n    Note that the returned index set for this property will always be frozen.\n    To change the nowShowing index set, you must create a new index set and \n    apply it.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selection",
        "displayName": "SC.CollectionView#selection",
        "objectType": "property",
        "propertyType": "SC.SelectionSet",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Indexes of selected content objects.  This `SC.SelectionSet` is modified\n    automatically by the collection view when the user changes the selection \n    on the collection.\n    \n    Any item views representing content objects in this set will have their \n    isSelected property set to `YES` automatically.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSelectable",
        "displayName": "SC.CollectionView#isSelectable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Allow user to select content using the mouse and keyboard.\n    \n    Set this property to `NO` to disallow the user from selecting items. If you\n    have items in your `selectedIndexes property, they will still be reflected\n    visually.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.CollectionView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Enable or disable the view.\n    \n    The collection view will set the `isEnabled` property of its item views to\n    reflect the same view of this property.  Whenever ``isEnabled` is false,\n    the collection view will also be not selectable or editable, regardless of \n    the settings for isEditable` & `isSelectable`.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.CollectionView#isEditable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Allow user to edit content views.\n    \n    The collection view will set the `isEditable` property on its item views to\n    reflect the same value of this property.  Whenever `isEditable` is false,\n    the user will not be able to reorder, add, or delete items regardless of \n    the `canReorderContent` and `canDeleteContent` and `isDropTarget`\n    properties.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canReorderContent",
        "displayName": "SC.CollectionView#canReorderContent",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Allow user to reorder items using drag and drop.\n    \n    If true, the user will can use drag and drop to reorder items in the list.\n    If you also accept drops, this will allow the user to drop items into \n    specific points in the list.  Otherwise items will be added to the end.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canDeleteContent",
        "displayName": "SC.CollectionView#canDeleteContent",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Allow the user to delete items using the delete key\n    \n    If true the user will be allowed to delete selected items using the delete\n    key.  Otherwise deletes will not be permitted.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canEditContent",
        "displayName": "SC.CollectionView#canEditContent",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Allow user to edit the content by double clicking on it or hitting return.\n    This will only work if isEditable is `YES` and the item view implements\n    the `beginEditing()` method.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isDropTarget",
        "displayName": "SC.CollectionView#isDropTarget",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Accept drops for data other than reordering.\n    \n    Setting this property to return true when the view is instantiated will \n    cause it to be registered as a drop target, activating the other drop \n    machinery.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useToggleSelection",
        "displayName": "SC.CollectionView#useToggleSelection",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Use toggle selection instead of normal click behavior.\n    \n    If set to true, then selection will use a toggle instead of the normal\n    click behavior.  Command modifiers will be ignored and instead clicking\n    once will select an item and clicking on it again will deselect it.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "actOnSelect",
        "displayName": "SC.CollectionView#actOnSelect",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Trigger the action method on a single click.\n    \n    Normally, clicking on an item view in a collection will select the content \n    object and double clicking will trigger the action method on the \n    collection view.\n    \n    If you set this property to `YES`, then clicking on a view will both select\n    it (if `isSelected` is true) and trigger the action method.\n    \n    Use this if you are using the collection view as a menu of items.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selectOnMouseDown",
        "displayName": "SC.CollectionView#selectOnMouseDown",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Select an item immediately on mouse down\n    \n    Normally as soon as you begin a click the item will be selected.\n    \n    In some UI scenarios, you might want to prevent selection until\n    the mouse is released, so you can perform, for instance, a drag operation\n    without actually selecting the target item.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleView",
        "displayName": "SC.CollectionView#exampleView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The view class to use when creating new item views.\n    \n    The collection view will automatically create an instance of the view \n    class you set here for each item in its content array.  You should provide \n    your own subclass for this property to display the type of content you \n    want.\n    \n    For best results, the view you set here should understand the following \n    properties:\n    \n     - `content` -- The content object from the content array your view should display\n     - `isEnabled` -- True if the view should appear enabled\n     - `isSelected` -- True if the view should appear selected\n    \n    In general you do not want your child views to actually respond to mouse \n    and keyboard events themselves.  It is better to let the collection view \n    do that.\n    \n    If you do implement your own event handlers such as mouseDown or mouseUp, \n    you should be sure to actually call the same method on the collection view \n    to give it the chance to perform its own selection housekeeping.",
        "defaultValue": "SC.ListItemView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentExampleViewKey",
        "displayName": "SC.CollectionView#contentExampleViewKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "If set, this key will be used to get the example view for a given\n    content object.  The exampleView property will be ignored.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "groupExampleView",
        "displayName": "SC.CollectionView#groupExampleView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The view class to use when creating new group item views.\n    \n    The collection view will automatically create an instance of the view \n    class you set here for each item in its content array.  You should provide \n    your own subclass for this property to display the type of content you \n    want.\n    \n    If you leave this set to null then the regular example view will be used\n    with the isGroupView property set to YES on the item view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentGroupExampleViewKey",
        "displayName": "SC.CollectionView#contentGroupExampleViewKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "If set, this key will be used to get the example view for a given\n    content object.  The `groupExampleView` property will be ignored.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "action",
        "displayName": "SC.CollectionView#action",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Invoked when the user double clicks on an item (or single clicks of \n    actOnSelect is true)\n    \n    Set this to the name of the action you want to send down the\n    responder chain when the user double clicks on an item (or single clicks \n    if `actOnSelect` is true).  You can optionally specify a specific target as\n    well using the target property.\n    \n    If you do not specify an action, then the collection view will also try to \n    invoke the action named on the target item view.\n    \n    Older versions of SproutCore expected the action property to contain an \n    actual function that would be run.  This format is still supported but is \n    deprecated for future use.  You should generally use the responder chain \n    to handle your action for you.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "target",
        "displayName": "SC.CollectionView#target",
        "objectType": "property",
        "propertyType": "String|Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Optional target to send the action to when the user double clicks.\n    \n    If you set the action property to the name of an action, you can \n    optionally specify the target object you want the action to be sent to.  \n    This can be either an actual object or a property path that will resolve \n    to an object at the time that the action is invoked.  \n    \n    This property is ignored if you use the deprecated approach of making the\n    action property a function.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentValueKey",
        "displayName": "SC.CollectionView#contentValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Property on content items to use for display.\n    \n    Built-in item views such as the `LabelView`s and `ImageView`s will use the\n    value of this property as a key on the content object to determine the\n    value they should display.\n    \n    For example, if you set `contentValueKey` to 'name' and set the \n    exampleView to an `SC.LabelView`, then the label views created by the\n    colleciton view will display the value of the content.name.\n    \n    If you are writing your own custom item view for a collection, you can\n    get this behavior automatically by including the SC.Control mixin on your\n    view.  You can also ignore this property if you like.  The collection view\n    itself does not use this property to impact rendering.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.CollectionView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Enables keyboard-based navigate, deletion, etc. if set to true.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isActive",
        "displayName": "SC.CollectionView#isActive",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Changing this property value by default will cause the `CollectionView` to\n    add/remove an 'active' class name to the root element.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "calculatedHeight",
        "displayName": "SC.CollectionView#calculatedHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This property is used to store the calculated height to have \n    a consistent scrolling behavior due to the issues generated by using top\n    instead of `scrollTop`. We could look at the min-height set in the view, but\n    to avoid perf hits we simply store it and the scrollView will use it if \n    different than 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "calculatedWidth",
        "displayName": "SC.CollectionView#calculatedWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This property is used to store the calculated width to have \n    a consistent scrolling behavior due to the issues generated by using left\n    instead of `scrollLeft`. We could look at the min-width set in the view, but\n    to avoid perf hits we simply store it and the scrollView will use it if \n    different than 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allContentIndexes",
        "displayName": "SC.CollectionView#allContentIndexes",
        "objectType": "property",
        "propertyType": "SC.IndexSet",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This computed property returns an index set selecting all content indexes.\n    It will recompute anytime the length of the collection view changes.\n    \n    This is used by the default `contentIndexesInRect()` implementation.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "delegate",
        "displayName": "SC.CollectionView#delegate",
        "objectType": "property",
        "propertyType": "SC.CollectionViewDelegate",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Delegate used to implement fine-grained control over collection view \n    behaviors.\n    \n    You can assign a delegate object to this property that will be consulted\n    for various decisions regarding drag and drop, selection behavior, and\n    even rendering.  The object you place here must implement some or all of\n    the `SC.CollectionViewDelegate` mixin.\n    \n    If you do not supply a delegate but the content object you set implements \n    the `SC.CollectionViewDelegate` mixin, then the content will be\n    automatically set as the delegate.  Usually you will work with a \n    `CollectionView` in this way rather than setting a delegate explicitly.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selectionDelegate",
        "displayName": "SC.CollectionView#selectionDelegate",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The delegate responsible for handling selection changes.  This property\n    will be either the delegate, content, or the collection view itself, \n    whichever implements the `SC.CollectionViewDelegate` mixin.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentDelegate",
        "displayName": "SC.CollectionView#contentDelegate",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "The delegate responsible for providing additional display information \n    about the content.  If you bind a collection view to a controller, this\n    the content will usually also be the content delegate, though you \n    could implement your own delegate if you prefer.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "reorderDataType",
        "displayName": "SC.CollectionView#reorderDataType",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "When reordering its content, the collection view will store its reorder\n    data using this special data type.  The data type is unique to each \n    collection view instance.  You can use this data type to detect reorders\n    if necessary.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dragContent",
        "displayName": "SC.CollectionView#dragContent",
        "objectType": "property",
        "propertyType": "SC.IndexSet",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This property is set to the IndexSet of content objects that are the \n    subject of a drag whenever a drag is initiated on the collection view.  \n    You can consult this property when implementing your collection view \n    delegate  methods, but otherwise you should not use this property in your \n    code.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "proposedInsertionIndex",
        "displayName": "SC.CollectionView#proposedInsertionIndex",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This property is set to the proposed insertion index during a call to\n    collectionViewValidateDragOperation().  Your delegate implementations can \n    change the value of this property to enforce a drop some in some other \n    location.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "proposedDropOperation",
        "displayName": "SC.CollectionView#proposedDropOperation",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "This property is set to the proposed drop operation during a call to\n    collectionViewValidateDragOperation().  Your delegate implementations can \n    change the value of this property to enforce a different type of drop \n    operation.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dragDataTypes",
        "displayName": "SC.CollectionView#dragDataTypes",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionView",
        "overview": "Implements the drag data source protocol for the collection view.  This\n    property will consult the collection view delegate if one is provided. It\n    will also do the right thing if you have set canReorderContent to YES.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21634,
    "name": "CollectionViewDelegate",
    "displayName": "SC.CollectionViewDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/collection_view_delegate.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A Collection View Delegate is consulted by a `SC.CollectionView` to make\n  policy decisions about certain behaviors such as selection control and\n  drag and drop.  If you need to control other aspects of your data, you may\n  also want to add the `SC.CollectionContent` mixin.\n  \n  To act as a Collection Delegate, just apply this mixin to your class.  You\n  must then set the \"delegate\" property on the CollectionView to your object.\n  \n  Alternatively, if no delegate is set on a CollectionView, but the content \n  implements this mixin, the content object will be used as the delegate \n  instead.\n  \n  If you set an ArrayController or its arrangedObjects property as the content\n  of a CollectionView, the ArrayController will automatically act as the \n  delegate for the view.",
    "methods": [
      {
        "name": "collectionViewSelectionForProposedSelection",
        "displayName": "SC.CollectionViewDelegate.collectionViewSelectionForProposedSelection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will be called anytime the collection view is about to\n    change the selection in response to user mouse clicks or keyboard events.\n    \n    You can use this method to adjust the proposed selection, eliminating any\n    selected objects that cannot be selected.  The default implementation of\n    this method simply returns the proposed selection.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Actual allow selection index set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "sel",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Proposed array of selected objects."
          }
        ]
      },
      {
        "name": "collectionViewShouldSelectIndexes",
        "displayName": "SC.CollectionViewDelegate.collectionViewShouldSelectIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection when attempting to select an item.  Return the\n    actual indexes you want to allow to be selected.  Return null to disallow\n    the change.  The default allows all selection.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "allowed index set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view collection view"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the indexes to be selected"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "extend",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the indexes will extend existing sel"
          }
        ]
      },
      {
        "name": "collectionViewShouldDeselectIndexes",
        "displayName": "SC.CollectionViewDelegate.collectionViewShouldDeselectIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection when attempting to deselect an item.  Return the\n    actual indexes you want to allow to be deselected.  Return `null` to\n    disallow the change.  The default allows all selection.\n    \n    Note that you should not modify the passed in IndexSet.  clone it instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "allowed index set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view collection view"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the indexes to be selected"
          }
        ]
      },
      {
        "name": "collectionViewShouldDeleteIndexes",
        "displayName": "SC.CollectionViewDelegate.collectionViewShouldDeleteIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view whenever the `deleteSelection()` method is\n    called.  You can implement this method to get fine-grained control over\n    which items can be deleted.  To prevent deletion, return null.\n    \n    This method is only called if canDeleteContent is `YES` on the collection\n    view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index set allowed to delete or null."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "proposed index set of items to delete."
          }
        ]
      },
      {
        "name": "collectionViewDeleteContent",
        "displayName": "SC.CollectionViewDelegate.collectionViewDeleteContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view to actually delete the selected items.\n    \n    The default behavior will use standard array operators to delete the\n    indexes from the array. You can implement this method to provide your own\n    deletion method.\n    \n    If you simply want to control the items to be deleted, you should instead\n    implement `collectionViewShouldDeleteItems()`. This method will only be\n    called if canDeleteContent is `YES` and `collectionViewShouldDeleteIndexes()`\n    returns a non-empty index set",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the deletion was a success."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "collection view"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the items to delete"
          },
          {
            "title": "param",
            "type": "",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "collectionViewShouldBeginDrag",
        "displayName": "SC.CollectionViewDelegate.collectionViewShouldBeginDrag",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view just before it starts a drag to give you\n    an opportunity to decide if the drag should be allowed.\n    \n    You can use this method to implement fine-grained control over when a\n    drag will be allowed and when it will not be allowed. For example, you\n    may enable content reordering but then implement this method to prevent\n    reordering of certain items in the view.\n    \n    The default implementation always returns `YES`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to alow, NO to prevent it"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          }
        ]
      },
      {
        "name": "collectionViewDragDataTypes",
        "displayName": "SC.CollectionViewDelegate.collectionViewDragDataTypes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view just before it starts a drag so that\n    you can provide the data types you would like to support in the data.\n    \n    You can implement this method to return an array of the data types you\n    will provide for the drag data.\n    \n    If you return `null` or an empty array, can you have set `canReorderContent`\n    to `YES` on the CollectionView, then the drag will go ahead but only\n    reordering will be allowed.  If `canReorderContent` is `NO`, then the drag\n    will not be allowed to start.\n    \n    If you simply want to control whether a drag is allowed or not, you\n    should instead implement `collectionViewShouldBeginDrag()`.\n    \n    The default returns an empty array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of supported data types."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view to begin dragging."
          }
        ]
      },
      {
        "name": "collectionViewDragDataForType",
        "displayName": "SC.CollectionViewDelegate.collectionViewDragDataForType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a collection view when a drag concludes to give you the option\n    to provide the drag data for the drop.\n    \n    This method should be implemented essentially as you would implement the\n    `dragDataForType()` if you were a drag data source.  You will never be asked\n    to provide drag data for a reorder event, only for other types of data.\n    \n    The default implementation returns null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the data object or null if the data could not be provided."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.CollectionView} the collection view that initiated the drag"
          },
          {
            "title": "param",
            "type": "",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the data type to provide"
          },
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Drag} the drag object"
          }
        ]
      },
      {
        "name": "collectionViewComputeDragOperations",
        "displayName": "SC.CollectionViewDelegate.collectionViewComputeDragOperations",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called once during a drag the first time view is entered. Return all\n    possible drag operations OR'd together.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed drag operations. Defaults to op"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view that initiated the drag"
          },
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the drag object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "proposedDragOperations",
            "isOptional": false,
            "defaultValue": "",
            "desc": "proposed logical OR of allowed drag operations."
          }
        ]
      },
      {
        "name": "collectionViewValidateDragOperation",
        "displayName": "SC.CollectionViewDelegate.collectionViewValidateDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view during a drag to let you determine the\n    kind and location of a drop you might want to accept.\n    \n    You can override this method to implement fine-grained control over how\n    and when a dragged item is allowed to be dropped into a collection view.\n    \n    This method will be called by the collection view both to determine in\n    general which operations you might support and specifically the operations\n    you would support if the user dropped an item over a specific location.\n    \n    If the `proposedDropOperation` parameter is `SC.DROP_ON` or `SC.DROP_BEFORE`,\n    then the `proposedInsertionPoint` will be a non-negative value and you\n    should determine the specific operations you will support if the user\n    dropped the drag item at that point.\n    \n    If you do not like the proposed drop operation or insertion point, you\n    can override these properties as well by setting the `proposedDropOperation`\n    and `proposedInsertionIndex` properties on the collection view during this\n    method. These properties are ignored all other times.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed drag operation. Defaults to op"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the current drag object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "proposed logical OR of allowed drag operations."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "proposedInsertionIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an index into the content array representing the proposed insertion point."
          },
          {
            "title": "param",
            "type": "String",
            "name": "proposedDropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the proposed drop operation. Will be one of SC.DROP_ON, SC.DROP_BEFORE, or SC.DROP_ANY."
          }
        ]
      },
      {
        "name": "collectionViewPerformDragOperation",
        "displayName": "SC.CollectionViewDelegate.collectionViewPerformDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view to actually accept a drop.  This method will\n    only be invoked AFTER your `validateDrop method has been called to\n    determine if you want to even allow the drag operation to go through.\n    \n    You should actually make changes to the data model if needed here and\n    then return the actual drag operation that was performed. If you return\n    `SC.DRAG_NONE` and the dragOperation was `SC.DRAG_REORDER`, then the default\n    reorder behavior will be provided by the collection view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed drag operation. Defaults to proposedDragOperation"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the current drag object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "proposed logical OR of allowed drag operations."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "proposedInsertionIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an index into the content array representing the proposed insertion point."
          },
          {
            "title": "param",
            "type": "String",
            "name": "proposedDropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the proposed drop operation.  Will be one of SC.DROP_ON, SC.DROP_BEFORE, or SC.DROP_ANY."
          }
        ]
      },
      {
        "name": "collectionViewDragViewFor",
        "displayName": "SC.CollectionViewDelegate.collectionViewDragViewFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Renders a drag view for the passed content indexes. If you return null\n    from this, then a default drag view will be generated for you.\n    \n    The default implementation returns null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "dragContent",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isCollectionViewDelegate",
        "displayName": "SC.CollectionViewDelegate.isCollectionViewDelegate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionViewDelegate",
        "overview": "Walk like a duck. Used to detect the mixin by SC.CollectionView.",
        "defaultValue": "YES",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "ghostActsLikeCursor",
        "displayName": "SC.CollectionViewDelegate.ghostActsLikeCursor",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CollectionViewDelegate",
        "overview": "Allows the ghost view created in `collectionViewDragViewFor` to be displayed\n    like a cursor instead of the default implementation. This sets the view \n    origin to be the location of the mouse cursor.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 46567,
    "name": "Comparable",
    "displayName": "SC.Comparable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/comparable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Implements some standard methods for comparing objects. Add this mixin to\n  any class you create that can compare its instances.\n\n  You should implement the compare() method.",
    "methods": [
      {
        "name": "compare",
        "displayName": "SC.Comparable.compare",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return the result of the comparison of the two parameters. The\n    compare method should return\n    \n    <pre>\n      -1 if a < b\n       0 if a == b\n       1 if a > b\n    </pre>\n\n\n    Default implementation raises an exception.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Integer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the result of the comparison"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the first object to compare"
          },
          {
            "title": "param",
            "type": "",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the second object to compare"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isComparable",
        "displayName": "SC.Comparable.isComparable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Comparable",
        "overview": "walk like a duck. Indicates that the object can be compared.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40694,
    "name": "ContainerView",
    "displayName": "SC.ContainerView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/container.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "A container view will display its \"content\" view as its only child.  You can\n  use a container view to easily swap out views on your page.  In addition to\n  displaying the actual view in the content property, you can also set the \n  nowShowing property to the property path of a view in your page and the\n  view will be found and swapped in for you.\n  \n  If you want to change the way the container view swaps in your new view, \n  override the replaceContent() method.",
    "methods": [
      {
        "name": "replaceContent",
        "displayName": "SC.ContainerView#replaceContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Replaces any child views with the passed new content.  \n    \n    This method is automatically called whenever your contentView property \n    changes.  You can override it if you want to provide some behavior other\n    than the default.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "newContent",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new content view or null."
          }
        ]
      },
      {
        "name": "awake",
        "displayName": "SC.ContainerView#awake",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When a container view awakes, it will try to find the nowShowing, if \n    there is one, and set it as content if necessary.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "nowShowingDidChange",
        "displayName": "SC.ContainerView#nowShowingDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the nowShowing property changes.  This will try to find\n    the new content if possible and set it.  If you set nowShowing to an \n    empty string or null, then the current content will be cleared.\n    \n    If you set the content manually, the nowShowing property will be set to\n    SC.CONTENT_SET_DIRECTLY",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "contentViewDidChange",
        "displayName": "SC.ContainerView#contentViewDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the content property changes.  This method will simply\n    call replaceContent.  Override replaceContent to change how the view is\n    swapped out.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "nowShowing",
        "displayName": "SC.ContainerView#nowShowing",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ContainerView",
        "overview": "Optional path name for the content view.  Set this to a property path\n    pointing to the view you want to display.  This will automatically change\n    the content view for you. If you pass a relative property path or a single\n    property name, then the container view will look for it first on its page\n    object then relative to itself. If you pass a full property name\n    (e.g. \"MyApp.anotherPage.anotherView\"), then the path will be followed\n    from the top-level.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentView",
        "displayName": "SC.ContainerView#contentView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ContainerView",
        "overview": "The content view to display.  This will become the only child view of\n    the view.  Note that if you set the nowShowing property to any value other\n    than 'null', the container view will automatically change the contentView\n    to reflect view indicated by the value.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36463,
    "name": "ContentDisplay",
    "displayName": "SC.ContentDisplay",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/content_display.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The SC.ContentDisplay mixin makes it easy to automatically update your view\n  display whenever relevant properties on a content object change.  To use\n  this mixin, include it in your view and then add the names of the \n  properties on the content object you want to trigger a displayDidChange() \n  method on your view. Your updateDisplay() method will then be called at the \n  end of the run loop.\n  \n  ## Example\n  \n      MyApp.MyViewClass = SC.View.extend(SC.ContentDisplay, { \n        contentDisplayProperties: 'title isEnabled hasChildren'.w(),\n        ...\n      });",
    "methods": [],
    "properties": [
      {
        "name": "contentDisplayProperties",
        "displayName": "SC.ContentDisplay.contentDisplayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ContentDisplay",
        "overview": "Add an array with the names of any property on the content object that\n    should trigger an update of the display for your view.  Changes to the\n    content object will only invoke your display method once per runloop.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36515,
    "name": "Control",
    "displayName": "SC.Control",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/control.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ContentValueSupport"
      }
    ],
    "overview": "A Control is a view that also implements some basic state functionality.\n  Apply this mixin to any view that you want to have standard control\n  functionality including showing a selected state, enabled state, focus\n  state, etc.\n  \n  ## About Values and Content\n  \n  Controls typically are used to represent a single value, such as a number,\n  boolean or string.  The value a control is managing is typically stored in\n  a \"value\" property.  You will typically use the value property when working\n  with controls such as buttons and text fields in a form.\n  \n  An alternative way of working with a control is to use it to manage some\n  specific aspect of a content object.  For example, you might use a label\n  view control to display the \"name\" property of a Contact record.  This \n  approach is often necessary when using the control as part of a collection\n  view.\n  \n  You can use the content-approach to work with a control by setting the \n  \"content\" and \"contentValueKey\" properties of the control.  The \n  \"content\" property is the content object you want to manage, while the \n  \"contentValueKey\" is the name of the property on the content object \n  you want the control to display.\n  \n  The default implementation of the Control mixin will essentially map the\n  contentValueKey of a content object to the value property of the \n  control.  Thus if you are writing a custom control yourself, you can simply\n  work with the value property and the content object support will come for\n  free.  Just write an observer for the value property and update your \n  view accordingly.\n  \n  If you are working with a control that needs to display multiple aspects\n  of a single content object (for example showing an icon and label), then\n  you can override the contentValueDidChange() method instead of observing\n  the value property.  This method will be called anytime _any_ property \n  on the content object changes.  You should use this method to check the\n  properties you care about on the content object and update your view if \n  anything you care about has changed.\n  \n  ## Delegate Support\n  \n  Controls can optionally get the contentDisplayProperty from a \n  displayDelegate, if it is set.  The displayDelegate is often used to \n  delegate common display-related configurations such as which content value\n  to show.  Anytime your control is shown as part of a collection view, the\n  collection view will be automatically set as its displayDelegate.",
    "methods": [],
    "properties": [
      {
        "name": "isControl",
        "displayName": "SC.Control#isControl",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "Walk like a duck",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSelected",
        "displayName": "SC.Control#isSelected",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "The selected state of this control. Possible values:\n    \n      - `YES`\n      - `NO`\n      - SC.MIXED_STATE.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isActive",
        "displayName": "SC.Control#isActive",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "Set to YES when the item is currently active.  Usually this means the \n    mouse is current pressed and hovering over the control, however the \n    specific implementation my vary depending on the control.\n    \n    Changing this property value by default will cause the Control mixin to\n    add/remove an 'active' class name to the root element.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fieldKey",
        "displayName": "SC.Control#fieldKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "The name of the property this control should display if it is part of an\n    SC.FormView.\n    \n    If you add a control as part of an SC.FormView, then the form view will \n    automatically bind the value to the property key you name here on the \n    content object.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fieldLabel",
        "displayName": "SC.Control#fieldLabel",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "The human readable label you want shown for errors.  May be a loc string.\n    \n    If your field fails validation, then this is the name that will be shown\n    in the error explanation.  If you do not set this property, then the \n    fieldKey or the class name will be used to generate a human readable name.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "errorLabel",
        "displayName": "SC.Control#errorLabel",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "The human readable label for this control for use in error strings.  This\n    property is computed dynamically using the following rules:\n    \n    If the fieldLabel is defined, that property is localized and returned.\n    Otherwise, if the keyField is defined, try to localize using the string \n    \"ErrorLabel.{fieldKeyName}\".  If a localized name cannot be found, use a\n    humanized form of the fieldKey.\n    \n    Try to localize using the string \"ErrorLabel.{ClassName}\". Return a \n    humanized form of the class name.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "controlSize",
        "displayName": "SC.Control#controlSize",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Control",
        "overview": "The control size.  This will set a CSS style on the element that can be \n    used by the current theme to vary the appearance of the control.\n    \n    Some controls will default to SC.AUTO_CONTROL_SIZE, which will allow you\n    to simply size the control, and the most appropriate control size will\n    automatically be picked; be warned, though, that if you don't specify\n    a height, performance will be impacted as it must be calculated; if you do\n    this, a warning will be issued. If you don't care, use SC.CALCULATED_CONTROL_SIZE.",
        "defaultValue": "SC.REGULAR_CONTROL_SIZE",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 5712,
    "name": "Controller",
    "displayName": "SC.Controller",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/controllers/controller.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The controller base class provides some common functions you will need\n  for controllers in your applications, especially related to maintaining\n  an editing context.\n  \n  In general you will not use this class, but you can use a subclass such\n  as ObjectController, TreeController, or ArrayController.\n  \n  ## EDITING CONTEXTS\n  \n  One major function of a controller is to mediate between changes in the\n  UI and changes in the model.  In particular, you usually do not want \n  changes you make in the UI to be applied to a model object directly.  \n  Instead, you often will want to collect changes to an object and then\n  apply them only when the user is ready to commit their changes.\n  \n  The editing contact support in the controller class will help you\n  provide this capability.",
    "methods": [],
    "properties": [
      {
        "name": "isEditable",
        "displayName": "SC.Controller#isEditable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Controller",
        "overview": "Makes a controller editable or not editable.  The SC.Controller class \n    itself does not do anything with this property but subclasses will \n    respect it when modifying content.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33865,
    "name": "controllersController",
    "displayName": "SC.controllersController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/controllers/controllers.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "in suppressMain mode all controllers files register with this array controller",
    "methods": [],
    "properties": []
  },
  {
    "guid": 36171,
    "name": "ControlTestPane",
    "displayName": "SC.ControlTestPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/debug/control_test_pane.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Pane"
      }
    ],
    "overview": "Generates a pane that will display vertically stacked views for testing.\n  You can use this class in test mode to easily create a palette with views\n  configured in different ways.\n  \n  # Example\n  \n      var pane = SC.ControlTestPane.design()\n        .add('basic', SC.CheckboxView.design({ title: \"Hello World\" }))\n        .add('disabled', SC.CheckboxView.design({\n          title: \"Hello World\", isEnabled: NO\n        }));\n      \n      module(\"CheckboxView UI\", pane);\n    \n      test(\"basic\", function() {\n        var view = pane.view('basic');\n        ok(view.get('isEnabled'), 'should be enabled');\n      });",
    "methods": [
      {
        "name": "view",
        "displayName": "SC.ControlTestPane#view",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves the test sample view that was added with the passed key name.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key used to register the view."
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.ControlTestPane.add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a test view to the control pane design.  The passed label will be used\n  as the key which you can use to find the view layer.  You can either pass\n  a view that is already designed or pass an array of attributes that will be\n  used to create a design on the view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ControlTestPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "label",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view key name"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a view class or view design"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional attrs to use when designing the view"
          }
        ]
      },
      {
        "name": "standardSetup",
        "displayName": "SC.ControlTestPane.standardSetup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a standard setup/teardown object for use by the module() method.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "view",
        "displayName": "SC.ControlTestPane.view",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method.  Returns the view with the given name on the current\n  pane instance if there is one.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key used to register the view."
          }
        ]
      },
      {
        "name": "show",
        "displayName": "SC.ControlTestPane.show",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Registers a final test that will instantiate the control test pane and \n  display it.  This allows the developer to interact with the controls once\n  the test has completed.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "top",
        "displayName": "SC.ControlTestPane#top",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ControlTestPane",
        "overview": "The starting top location for the first row.  This will increment as \n    views are added to the pane.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "height",
        "displayName": "SC.ControlTestPane#height",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ControlTestPane",
        "overview": "The default height of each row.  This will be used for a view unless you\n    manually specify a height in the view's layout.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "padding",
        "displayName": "SC.ControlTestPane#padding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ControlTestPane",
        "overview": "The default padding added to the edges and between each row.",
        "defaultValue": "4",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37518,
    "name": "Cookie",
    "displayName": "SC.Cookie",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/cookie.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Colin Campbell",
    "see": [],
    "since": "Sproutcore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Allows for easier handling of the document.cookie object. To create a cookie,\n  simply call SC.Cookie.create. To retrieve a cookie, use SC.Cookie.find.\n  Cookies are not added to document.cookie, which SC.Cookie.find uses, until you\n  have called SC.Cookie#write.\n\n  Heavy inspiration from the\n  {@link <a href=\"http://plugins.jquery.com/project/cookie\">jQuery cookie plugin</a>}.",
    "methods": [
      {
        "name": "destroy",
        "displayName": "SC.Cookie#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets SC.Cookie#expires to -1, which destroys the cookie.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "write",
        "displayName": "SC.Cookie#write",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Cookie.find"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Writes this SC.Cookie to document.cookie and adds it to SC.Cookie collection. To find this\n    cookie later, or on reload, use SC.Cookie.find.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "find",
        "displayName": "SC.Cookie.find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds a cookie that has been stored",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Cookie object containing name and value of cookie"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the cookie"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.Cookie#name",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.Cookie#value",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "",
        "defaultValue": "''",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "expires",
        "displayName": "SC.Cookie#expires",
        "objectType": "property",
        "propertyType": "Integer|SC.DateTime|Date",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "Amount of time until the cookie expires. Set to -1 in order to delete the cookie.\n\n    If passing an Integer, it is interpreted as a number of days.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "path",
        "displayName": "SC.Cookie#path",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "domain",
        "displayName": "SC.Cookie#domain",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "secure",
        "displayName": "SC.Cookie#secure",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "If true, the secure attribute of the cookie will be set and the cookie transmission will\n    require a secure protocol (like HTTPS).",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isCookie",
        "displayName": "SC.Cookie#isCookie",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cookie",
        "overview": "Walk like a duck",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 46570,
    "name": "Copyable",
    "displayName": "SC.Copyable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/copyable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Impelements some standard methods for copying an object.  Add this mixin to\n  any object you create that can create a copy of itself.  This mixin is\n  added automatically to the built-in array.\n\n  You should generally implement the copy() method to return a copy of the\n  receiver.\n\n  Note that frozenCopy() will only work if you also implement SC.Freezable.",
    "methods": [
      {
        "name": "copy",
        "displayName": "SC.Copyable#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return a copy of the receiver.  Default implementation raises\n    an exception.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "copy of receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "deep",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} if true, a deep copy of the object should be made"
          }
        ]
      },
      {
        "name": "frozenCopy",
        "displayName": "SC.Copyable#frozenCopy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the object implements SC.Freezable, then this will return a new copy\n    if the object is not frozen and the receiver if the object is frozen.\n\n    Raises an exception if you try to call this method on a object that does\n    not support freezing.\n\n    You should use this method whenever you want a copy of a freezable object\n    since a freezable object can simply return itself without actually\n    consuming more memory.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "copy of receiver or receiver"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isCopyable",
        "displayName": "SC.Copyable#isCopyable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Copyable",
        "overview": "Walk like a duck.  Indicates that the object can be copied.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48606,
    "name": "CoreSet",
    "displayName": "SC.CoreSet",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/set.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Set"
      }
    ],
    "overview": "CoreSet is just like set but not observable.  If you want to use the set\n  as a simple data structure with no observing, CoreSet is slightly faster\n  and more memory efficient.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 13443,
    "name": "CoreView",
    "displayName": "SC.CoreView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/views/view/base.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33949,
    "name": "CSSRule",
    "displayName": "SC.CSSRule",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/css/css_rule.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "SC.CSSRule\n\n  A css rule object represents a css rule that is part of a style sheet \n  object. You can create your own rules and add insert them in style sheets at\n  runtime.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33951,
    "name": "CSSStyle",
    "displayName": "SC.CSSStyle",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/css/css_style.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "SC.CSSStyle\n\n  A css style object represents a css style that is part of a single css rule \n  in a single css style sheet.",
    "methods": [],
    "properties": [
      {
        "name": "style",
        "displayName": "SC.CSSStyle#style",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CSSStyle",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rule",
        "displayName": "SC.CSSStyle#rule",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CSSStyle",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33957,
    "name": "CSSStyleSheet",
    "displayName": "SC.CSSStyleSheet",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/css/css_style_sheet.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "SC.CSSStyleSheet\n\n  A style sheet object wraps a document style sheet object. `C.CSSStyleSheet`\n  will re-use stylesheet objects as needed.",
    "methods": [
      {
        "name": "isEnabled",
        "displayName": "SC.CSSStyleSheet#isEnabled",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "href",
        "displayName": "SC.CSSStyleSheet#href",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "title",
        "displayName": "SC.CSSStyleSheet#title",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "insertRule",
        "displayName": "SC.CSSStyleSheet#insertRule",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can also insert and remove rules on the rules property array.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "rule",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "deleteRule",
        "displayName": "SC.CSSStyleSheet#deleteRule",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can also insert and remove rules on the rules property array.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "rule",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "styleSheet",
        "displayName": "SC.CSSStyleSheet#styleSheet",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CSSStyleSheet",
        "overview": "*DO NOT MODIFY THIS OBJECT DIRECTLY!!!!** Use the methods defined on this\n    object to update properties of the style sheet; otherwise, your changes \n    will not be reflected.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rules",
        "displayName": "SC.CSSStyleSheet#rules",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.CSSStyleSheet",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6442,
    "name": "Cursor",
    "displayName": "SC.Cursor",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/cursor.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "SC.Cursor\n\n  A Cursor object is used to sychronize the cursor used by multiple views at \n  the same time. For example, thumb views within a split view acquire a cursor\n  instance from the split view and set it as their cursor. The split view is \n  able to update its cursor object to reflect the state of the split view.\n  Because cursor objects are implemented internally with CSS, this is a very \n  efficient way to update the same cursor for a group of view objects.\n  \n  Note: This object creates an anonymous CSS class to represent the cursor. \n  The anonymous CSS class is automatically added by SproutCore to views that\n  have the cursor object set as \"their\" cursor. Thus, all objects attached to \n  the same cursor object will have their cursors updated simultaneously with a\n  single DOM call.",
    "methods": [],
    "properties": [
      {
        "name": "className",
        "displayName": "SC.Cursor#className",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cursor",
        "overview": "This property is the connection between cursors and views. The default\n    SC.View behavior is to add this className to a view's layer if it has\n    its cursor property defined.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "cursorStyle",
        "displayName": "SC.Cursor#cursorStyle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Cursor",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14666,
    "name": "DataSource",
    "displayName": "SC.DataSource",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/data_sources/data_source.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A DataSource connects an in-memory store to one or more server backends.\n  To connect to a data backend on a server, subclass `SC.DataSource`\n  and implement the necessary data source methods to communicate with the\n  particular backend.\n\n  ## Create a Data Source\n\n  To implement the data source, subclass `SC.DataSource` in a file located\n  either in the root level of your app or framework, or in a directory\n  called \"data_sources\":\n\n      MyApp.DataSource = SC.DataSource.extend({\n        // implement the data source API...\n      });\n\n  ## Connect to a Data Source\n\n  New SproutCore applications are wired up to fixtures as their data source.\n  When you are ready to connect to a server, swap the use of fixtures with a\n  call to the desired data source.\n\n  In core.js:\n\n      // change...\n      store: SC.Store.create().from(SC.Record.fixtures)\n\n      // to...\n      store: SC.Store.create().from('MyApp.DataSource')\n\n  Note that the data source class name is referenced by string since the file\n  in which it is defined may not have been loaded yet. The first time a\n  data store tries to access its data source it will look up the class name\n  and instantiate that data source.\n\n  ## Implement the Data Source API\n\n  There are three methods that a data store invokes on its data source:\n`fetch()` &mdash; called the first time you try to `find()` a query\n     on a store or any time you refresh the record array after that.\n`retrieveRecords()` &mdash; called when you access an individual\n     record that has not been loaded yet\n`commitRecords()` &mdash; called if the the store has changes\n     pending and its `commitRecords()` method is invoked.\n\n  The data store will call the `commitRecords()` method when records\n  need to be created, updated, or deleted. If the server that the data source\n  connects to handles these three actions in a uniform manner, it may be\n  convenient to implement the `commitRecords()` to handle record\n  creation, updating, and deletion.\n\n  However, if the calls the data source will need to make to the server to\n  create, update, and delete records differ from each other to a significant\n  enough degree, it will be more convenient to rely on the default behavior\n  of `commitRecords()` and instead implement the three methods that\n  it will call by default:\n`createRecords()` &mdash; called with a list of records that are new\n     and need to be created on the server.\n`updateRecords()` &mdash; called with a list of records that already\n      exist on the server but that need to be updated.\n`destroyRecords()` &mdash; called with a list of records that should\n     be deleted on the server.\n\n  ### Multiple records\n\n  The `retrieveRecords()`, `createRecords()`, `updateRecords()` and\n  `destroyRecords()` methods all work on multiple records. If your server\n  API accommodates calls where you can  pass a list of records, this might\n  be the best level at which to implement the Data Source API. On the other\n  hand, if the server requires that you send commands for it for individual\n  records, you can rely on the default implementation of these four methods,\n  which will call the following for each individual record, one at a time:\n\n   - `retrieveRecord()` &mdash; called to retrieve a single record.\n   - `createRecord()` &mdash; called to create a single record.\n   - `updateRecord()` &mdash; called to update a single record.\n   - `destroyRecord()` &mdash; called to destroy a single record.\n\n\n  ### Return Values\n\n  All of the methods you implement must return one of three values:\n   - `YES` &mdash; all the records were handled.\n   - `NO` &mdash; none of the records were handled.\n   - `SC.MIXED_STATE` &mdash; some, but not all of the records were handled.\n\n\n  ### Store Keys\n\n  Whenever a data store invokes one of the data source methods it does so\n  with a storeKeys or storeKey argument. Store keys are transient integers\n  assigned to each data hash when it is first loaded into the store. It is\n  used to track data hashes as they move up and down nested stores (even if\n  no associated record is ever created from it).\n\n  When passed a storeKey you can use it to retrieve the status, data hash,\n  record type, or record ID, using the following data store methods:\n`readDataHash(storeKey)` &mdash; returns the data hash associated with\n     a store key, if any.\n`readStatus(storeKey)` &mdash; returns the current record status\n     associated with the store key. May be `SC.Record.EMPTY`.\n`SC.Store.recordTypeFor(storeKey)` &mdash; returns the record type for\n     the associated store key.\n`recordType.idFor(storeKey)` &mdash; returns the record ID for\n     the associated store key. You must call this method on `SC.Record`\n     subclass itself, not on an instance of `SC.Record`.\n\n  These methods are safe for reading data from the store. To modify data\n  in the data store you must use the store callbacks described below. The\n  store callbacks will ensure that the record states remain consistent.\n\n  ### Store Callbacks\n\n  When a data store calls a data source method, it puts affected records into\n  a `BUSY` state. To guarantee data integrity and consistency, these records\n  cannot be modified by the rest of the application while they are in the `BUSY`\n  state.\n\n  Because records are \"locked\" while in the `BUSY` state, it is the data source's\n  responsibility to invoke a callback on the store for each record or query that\n  was passed to it and that the data source handled. To reduce the amount of work\n  that a data source must do, the data store will automatically unlock the relevant\n  records if the the data source method returned `NO`, indicating that the records\n  were unhandled.\n\n  Although a data source can invoke callback methods at any time, they should\n  usually be invoked after receiving a response from the server. For example, when\n  the data source commits a change to a record by issuing a command to the server,\n  it waits for the server to acknowledge the command before invoking the\n  `dataSourceDidComplete()` callback.\n\n  In some cases a data source may be able to assume a server's response and invoke\n  the callback on the store immediately. This can improve performance because the\n  record can be unlocked right away.\n\n\n  ### Record-Related Callbacks\n\n  When `retrieveRecords()`, `commitRecords()`, or any of the related methods are\n  called on a data source, the store puts any records to be handled by the data\n  store in a `BUSY` state. To release the records the data source must invoke one\n  of the record-related callbacks on the store:\n`dataSourceDidComplete(storeKey, dataHash, id)` &mdash; the most common\n     callback. You might use this callback when you have retrieved a record to\n     load its contents into the store. The callback tells the store that the data\n     source is finished with the storeKey in question. The `dataHash` and `id`\n     arguments are optional and will replace the current dataHash and/or id. Also\n     see \"Loading Records\" below.\n`dataSourceDidError(storeKey, error)` &mdash; a data source should call this\n     when a request could not be completed because an error occurred. The error\n     argument is optional and can contain more information about the error.\n`dataSourceDidCancel(storeKey)` &mdash; a data source should call this when\n     an operation is cancelled for some reason. This could be used when the user\n     is able to cancel an operation that is in progress.\n\n  ### Loading Records into the Store\n\n  Instead of orchestrating multiple `dataSourceDidComplete()` callbacks when loading\n  multiple records, a data source can call the `loadRecords()` method on the store,\n  passing in a `recordType`, and array of data hashes, and optionally an array of ids.\n  The `loadRecords()` method takes care of looking up storeKeys and calling the\n  `dataSourceDidComplete()` callback as needed.\n\n  `loadRecords()` is often the most convenient way to get large blocks of data into\n  the store, especially in response to a `fetch()` or `retrieveRecords()` call.\n\n\n  ### Query-Related Callbacks\n\n  Like records, queries that are passed through the `fetch()` method also have an\n  associated status property; accessed through the `status`  property on the record\n  array returned from `find()`. To properly reset this status, a data source must\n  invoke an appropriate query-related callback on the store. The callbacks for\n  queries are similar to those for records:\n`dataSourceDidFetchQuery(query)` &mdash; the data source must call this when\n     it has completed fetching any related data for the query. This returns the\n     query results (record array) status into a `READY` state.\n`dataSourceDidErrorQuery(query, error)` &mdash; the data source should call\n     this if it encounters an error in executing the query. This puts the query\n     results into an `ERROR` state.\n`dataSourceDidCancelQuery(query)` &mdash; the data source should call this\n     if loading the results is cancelled.\n\n  In addition to these callbacks, the method `loadQueryResults(query, storeKey)`\n  is used by data sources when handling remote queries. This method is similar to\n  `dataSourceDidFetchQuery()`, except that you also provide an array of storeKeys\n  (or a promise to provide store keys) that comprises the result set.",
    "methods": [
      {
        "name": "fetch",
        "displayName": "SC.DataSource#fetch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the store whenever it needs to retrieve data matching a\n    specific query, triggered by find().  This method is called anytime\n    you invoke SC.Store#find() with a query or SC.RecordArray#refresh().  You\n    should override this method to actually retrieve data from the server\n    needed to fulfill the query.  If the query is a remote query, then you\n    will also need to provide the contents of the query as well.\n\n    ### Handling Local Queries\n\n    Most queries you create in your application will be local queries.  Local\n    queries are populated automatically from whatever data you have in memory.\n    When your fetch() method is called on a local queries, all you need to do\n    is load any records that might be matched by the query into memory.\n\n    The way you choose which queries to fetch is up to you, though usually it\n    can be something fairly straightforward such as loading all records of a\n    specified type.\n\n    When you finish loading any data that might be required for your query,\n    you should always call SC.Store#dataSourceDidFetchQuery() to put the query\n    back into the READY state.  You should call this method even if you choose\n    not to load any new data into the store in order to notify that the store\n    that you think it is ready to return results for the query.\n\n    ### Handling Remote Queries\n\n    Remote queries are special queries whose results will be populated by the\n    server instead of from memory.  Usually you will only need to use this\n    type of query when loading large amounts of data from the server.\n\n    Like Local queries, to fetch a remote query you will need to load any data\n    you need to fetch from the server and add the records to the store.  Once\n    you are finished loading this data, however, you must also call\n    SC.Store#loadQueryResults() to actually set an array of storeKeys that\n    represent the latest results from the server.  This will implicitly also\n    call datasSourceDidFetchQuery() so you don't need to call this method\n    yourself.\n\n    If you want to support incremental loading from the server for remote\n    queries, you can do so by passing a SC.SparseArray instance instead of\n    a regular array of storeKeys and then populate the sparse array on demand.\n\n    ### Handling Errors and Cancelations\n\n    If you encounter an error while trying to fetch the results for a query\n    you can call SC.Store#dataSourceDidErrorQuery() instead.  This will put\n    the query results into an error state.\n\n    If you had to cancel fetching a query before the results were returned,\n    you can instead call SC.Store#dataSourceDidCancelQuery().  This will set\n    the query back into the state it was in previously before it started\n    loading the query.\n\n    ### Return Values\n\n    When you return from this method, be sure to return a Boolean.  YES means\n    you handled the query, NO means you can't handle the query.  When using\n    a cascading data source, returning NO will mean the next data source will\n    be asked to fetch the same results as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if you can handle fetching the query, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "query describing the request"
          }
        ]
      },
      {
        "name": "retrieveRecords",
        "displayName": "SC.DataSource#retrieveRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the store whenever it needs to load a specific set of store\n    keys.  The default implementation will call retrieveRecord() for each\n    storeKey.\n\n    You should implement either retrieveRecord() or retrieveRecords() to\n    actually fetch the records referenced by the storeKeys .",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "- optional"
          }
        ]
      },
      {
        "name": "commitRecords",
        "displayName": "SC.DataSource#commitRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the store whenever it has one or more records with pending\n    changes that need to be sent back to the server.  The store keys will be\n    separated into three categories:\n\n     - `createStoreKeys`: records that need to be created on server\n     - `updateStoreKeys`: existing records that have been modified\n     - `destroyStoreKeys`: records need to be destroyed on the server\n\n    If you do not override this method yourself, this method will actually\n    invoke `createRecords()`, `updateRecords()`, and `destroyRecords()` on the\n    dataSource, passing each array of storeKeys.  You can usually implement\n    those methods instead of overriding this method.\n\n    However, if your server API can sync multiple changes at once, you may\n    prefer to override this method instead.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle any of the keys, `YES` if you can handle all of the keys, or\n    `SC.MIXED_STATE` if you can handle some of them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if data source can handle keys"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "createStoreKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to create"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "updateStoreKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to update"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "destroyStoreKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to destroy"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "cancel",
        "displayName": "SC.DataSource#cancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the store whenever it needs to cancel one or more records that\n    are currently in-flight.  If any of the storeKeys match records you are\n    currently acting upon, you should cancel the in-progress operation and\n    return `YES`.\n\n    If you implement an in-memory data source that immediately services the\n    other requests, then this method will never be called on your data source.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    retrieve any of the keys, `YES` if you can retrieve all of the, or\n    `SC.MIXED_STATE` if you can retrieve some of the.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if data source can handle keys"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of storeKeys to retrieve"
          }
        ]
      },
      {
        "name": "updateRecords",
        "displayName": "SC.DataSource#updateRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `commitRecords()` to commit modified existing records to the\n    store.  You can override this method to actually send the updated\n    records to your store.  The default version will simply call\n    `updateRecord()` for each storeKey.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle any of the keys, `YES` if you can handle all of the keys, or\n    `SC.MIXED_STATE` if you can handle some of them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated from the commitRecords()\n      call on the store"
          }
        ]
      },
      {
        "name": "createRecords",
        "displayName": "SC.DataSource#createRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `commitRecords()` to commit newly created records to the\n    store.  You can override this method to actually send the created\n    records to your store.  The default version will simply call\n    `createRecord()` for each storeKey.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle any of the keys, `YES` if you can handle all of the keys, or\n    `SC.MIXED_STATE` if you can handle some of them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated from the commitRecords()\n      call on the store"
          }
        ]
      },
      {
        "name": "destroyRecords",
        "displayName": "SC.DataSource#destroyRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `commitRecords()` to commit destroted records to the\n    store.  You can override this method to actually send the destroyed\n    records to your store.  The default version will simply call\n    `destroyRecord()` for each storeKey.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle any of the keys, `YES` if you can handle all of the keys, or\n    `SC.MIXED_STATE` if you can handle some of them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES, NO, or SC.MIXED_STATE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "keys to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "updateRecord",
        "displayName": "SC.DataSource#updateRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `updatesRecords()` to update a single record.  This is the\n    most basic primitive to can implement to support updating a record.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle the passed storeKey or `YES` if you can.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "retrieveRecord",
        "displayName": "SC.DataSource#retrieveRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `retrieveRecords()` to retrieve a single record.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to retrieve"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id to retrieve"
          }
        ]
      },
      {
        "name": "createRecord",
        "displayName": "SC.DataSource#createRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `createdRecords()` to created a single record.  This is the\n    most basic primitive to can implement to support creating a record.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle the passed storeKey or `YES` if you can.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "destroyRecord",
        "displayName": "SC.DataSource#destroyRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from `destroyRecords()` to destroy a single record.  This is the\n    most basic primitive to can implement to support destroying a record.\n\n    To support cascading data stores, be sure to return `NO` if you cannot\n    handle the passed storeKey or `YES` if you can.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 27871,
    "name": "DateFieldView",
    "displayName": "SC.DateFieldView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/date_field.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Juan Pablo Goldfinger",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TextFieldView"
      }
    ],
    "overview": "A Date field add behaviour to the Text Field to support date management, \n  for example, disabling deletion, and special behaviour to tabs commands.\n  \n  This field view is tighly inregrated with SC.DateTime\n  \n  By default the Date Field View show Date only, but if you need to show the Time do:\n  \n      dateAndTime: Shared.DateFieldView.design({\n        showTime: YES,\n        valueBinding: '...'\n      }),\n  \n  and if you only need to show time:\n  \n      timeOnly: Shared.DateFieldView.design({\n        showTime: YES,\n        showDate: NO,\n        valueBinding: '...'\n      })\n  \n  Example usage with special format:\n  \n      specialDate: Shared.DateFieldView.design({\n        formatDate: '%d %b of %Y',\n        valueBinding: '...'\n      }),\n  \n  You can override these format as you like, but has some limitations,\n  actually only support these KEY from SC.DateTime:\n  \n  %a %b %d %H %I %j %m %M %p %S %U %W %y %Y\n  \n  These are keys that has FIXED length, so we can control the selection and tabing.",
    "methods": [],
    "properties": [
      {
        "name": "value",
        "displayName": "SC.DateFieldView#value",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "showDate",
        "displayName": "SC.DateFieldView#showDate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "showTime",
        "displayName": "SC.DateFieldView#showTime",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "formatTime",
        "displayName": "SC.DateFieldView#formatTime",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "'%I:%M %p'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "formatDate",
        "displayName": "SC.DateFieldView#formatDate",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "'%d/%m/%Y'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "formatDateTime",
        "displayName": "SC.DateFieldView#formatDateTime",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "",
        "defaultValue": "'%d/%m/%Y %I:%M %p'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "format",
        "displayName": "SC.DateFieldView#format",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "The current format to apply for Validator and to show.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "validator",
        "displayName": "SC.DateFieldView#validator",
        "objectType": "property",
        "propertyType": "SC.Validator.DateTime",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "The current validator to format the Date to the input field and viceversa.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tabsSelections",
        "displayName": "SC.DateFieldView#tabsSelections",
        "objectType": "property",
        "propertyType": "SC.Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateFieldView",
        "overview": "Array of Key/TextSelection found for the current format.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 20597,
    "name": "DateTime",
    "displayName": "SC.DateTime",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datetime/frameworks/core/system/datetime.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Martin Ottenwaelter, Jonathan Lewis, Josh Holt",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      }
    ],
    "overview": "A class representation of a date and time. It's basically a wrapper around\n  the Date javascript object, KVO-friendly and with common date/time\n  manipulation methods.\n\n  This object differs from the standard JS Date object, however, in that it\n  supports time zones other than UTC and that local to the machine on which\n  it is running.  Any time zone can be specified when creating an\n  `SC.DateTime` object, e.g.\n\n      // Creates a DateTime representing 5am in Washington, DC and 10am in London\n      var d = SC.DateTime.create({ hour: 5, timezone: 300 }); // -5 hours from UTC\n      var e = SC.DateTime.create({ hour: 10, timezone: 0 }); // same time, specified in UTC\n    \n  and it is true that `d.isEqual(e)`.\n\n  The time zone specified upon creation is permanent, and any calls to\n  `get()` on that instance will return values expressed in that time zone. So,\n  \n      d.get('hour') returns 5.\n      e.get('hour') returns 10.\n    \n  but\n    \n      d.get('milliseconds') === e.get('milliseconds')\n  \n  is true, since they are technically the same position in time.",
    "methods": [
      {
        "name": "adjust",
        "displayName": "SC.DateTime#adjust",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.DateTime#create for the list of options you can pass"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new `DateTime` object where one or more of the elements have been\n    changed according to the options parameter. The time options (hour,\n    minute, sec, usec) reset cascadingly, so if only the hour is passed, then\n    minute, sec, and usec is set to 0. If the hour and minute is passed, then\n    sec and usec is set to 0.\n    \n    (Parts copied from the Ruby On Rails documentation)\n    \n    If a time zone is passed in the options hash, all dates and times are assumed\n    to be local to it, and the returned `DateTime` instance has that time zone.  If\n    none is passed, it defaults to `SC.DateTime.timezone`.\n\n    Note that passing only a time zone does not affect the actual milliseconds since\n    Jan 1, 1970, only the time zone in which it is expressed when displayed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "copy of receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "options",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "resetCascadingly",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "advance",
        "displayName": "SC.DateTime#advance",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.DateTime#create for the list of options you can pass"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new `DateTime` object advanced according the the given parameters.\n    Don't use floating point values, it might give unpredicatble results.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "copy of the receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "options",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount of date/time to advance the receiver"
          }
        ]
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.DateTime#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generic getter.\n    \n    The properties you can get are:\n      - `'year'`\n      - `'month'` (January is 1, contrary to JavaScript Dates for which January is 0)\n      - `'day'`\n      - `'dayOfWeek'` (Sunday is 0)\n      - `'hour'`\n      - `'minute'`\n      - `'second'`\n      - `'millisecond'`\n      - `'milliseconds'`, the number of milliseconds since\n        January, 1st 1970 00:00:00.0 UTC\n      - `'isLeapYear'`, a boolean value indicating whether the receiver's year\n        is a leap year\n      - `'daysInMonth'`, the number of days of the receiver's current month\n      - `'dayOfYear'`, January 1st is 1, December 31th is 365 for a common year\n      - `'week'` or `'week1'`, the week number of the current year, starting with\n        the first Sunday as the first day of the first week (00..53)\n      - `'week0'`, the week number of the current year, starting with\n        the first Monday as the first day of the first week (00..53)\n      - `'lastMonday'`, `'lastTuesday'`, etc., `'nextMonday'`,\n        `'nextTuesday'`, etc., the date of the last or next weekday in\n        comparison to the receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value asked for"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property name to get"
          }
        ]
      },
      {
        "name": "toFormattedString",
        "displayName": "SC.DateTime#toFormattedString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Formats the receiver according to the given format string. Should behave\n    like the C strftime function.\n  \n    The format parameter can contain the following characters:\n      - %a -- The abbreviated weekday name (``Sun'')\n      - %A -- The full weekday name (``Sunday'')\n      - %b -- The abbreviated month name (``Jan'')\n      - %B -- The full month name (``January'')\n      - %c -- The preferred local date and time representation\n      - %d -- Day of the month (01..31)\n      - %D -- Day of the month (0..31)\n      - %h -- Hour of the day, 24-hour clock (0..23)\n      - %H -- Hour of the day, 24-hour clock (00..23)\n      - %i -- Hour of the day, 12-hour clock (1..12)\n      - %I -- Hour of the day, 12-hour clock (01..12)\n      - %j -- Day of the year (001..366)\n      - %m -- Month of the year (01..12)\n      - %M -- Minute of the hour (00..59)\n      - %p -- Meridian indicator (``AM'' or ``PM'')\n      - %S -- Second of the minute (00..60)\n      - %s -- Milliseconds of the second (000..999)\n      - %U -- Week number of the current year,\n          starting with the first Sunday as the first\n          day of the first week (00..53)\n      - %W -- Week number of the current year,\n          starting with the first Monday as the first \n          day of the first week (00..53)\n      - %w -- Day of the week (Sunday is 0, 0..6)\n      - %x -- Preferred representation for the date alone, no time\n      - %X -- Preferred representation for the time alone, no date\n      - %y -- Year without a century (00..99)\n      - %Y -- Year with century\n      - %Z -- Time zone (ISO 8601 formatted)\n      - %% -- Literal ``%'' character",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the formatted string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "format",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the format string"
          }
        ]
      },
      {
        "name": "toISO8601",
        "displayName": "SC.DateTime#toISO8601",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Formats the receiver according ISO 8601 standard. It is equivalent to\n    calling toFormattedString with the `'%Y-%m-%dT%H:%M:%S%Z'` format string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the formatted string"
          }
        ],
        "params": []
      },
      {
        "name": "isEqual",
        "displayName": "SC.DateTime#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.DateTime#compare"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` if the passed `DateTime` is equal to the receiver, ie: if their\n    number of milliseconds since January, 1st 1970 00:00:00.0 UTC are equal.\n    This is the preferred method for testing equality.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DateTime",
            "name": "aDateTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the DateTime to compare to"
          }
        ]
      },
      {
        "name": "copy",
        "displayName": "SC.DateTime#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a copy of the receiver. Because of the way `DateTime` is designed,\n    it just returns the receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "toTimezone",
        "displayName": "SC.DateTime#toTimezone",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a copy of the receiver with the timezone set to the passed\n    timezone. The returned value is equal to the receiver (ie `SC.Compare`\n    returns 0), it is just the timezone representation that changes.\n    \n    If you don't pass any argument, the target timezone is assumed to be 0,\n    ie UTC.\n\n    Note that this method does not change the underlying position in time,\n    but only the time zone in which it is displayed.  In other words, the underlying\n    number of milliseconds since Jan 1, 1970 does not change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "timezone",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "create",
        "displayName": "SC.DateTime.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new DateTime object advanced according the the given parameters.\n    The parameters can be:\n    \n     - none, to create a DateTime instance initialized to the current\n       date and time in the local timezone,\n     - a integer, the number of milliseconds since\n       January, 1st 1970 00:00:00.0 UTC\n     - a options hash that can contain any of the following properties: year,\n       month, day, hour, minute, second, millisecond, timezone\n      \n    Note that if you attempt to create a `SC.DateTime` instance that has already\n    been created, then, for performance reasons, a cached value may be\n    returned.\n    \n    The timezone option is the offset, in minutes, between UTC and local time.\n    If you don't pass a timezone option, the date object is created in the\n    local timezone. If you want to create a UTC+2 (CEST) date, for example,\n    then you should pass a timezone of -120.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the DateTime instance that corresponds to the\n      passed parameters, possibly fetched from cache"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "options",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one of the three kind of parameters descibed above"
          }
        ]
      },
      {
        "name": "parse",
        "displayName": "SC.DateTime.parse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [
          "SC.DateTime#toFormattedString for a description of the format parameter"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a `DateTime` object created from a given string parsed with a given\n    format. Returns `null` if the parsing fails.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DateTime",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the DateTime corresponding to the string parameter"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the string to parse"
          },
          {
            "title": "param",
            "type": "String",
            "name": "fmt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the format to parse the string with"
          }
        ]
      },
      {
        "name": "compare",
        "displayName": "SC.DateTime.compare",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will tell you which of the two passed `DateTime` is greater by\n    comparing their number of milliseconds since\n    January, 1st 1970 00:00:00.0 UTC.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Integer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "-1 if a < b, \n                       +1 if a > b,\n                       0 if a == b"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DateTime",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the first DateTime instance"
          },
          {
            "title": "param",
            "type": "SC.DateTime",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the second DateTime instance"
          }
        ]
      },
      {
        "name": "compareDate",
        "displayName": "SC.DateTime.compareDate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will tell you which of the two passed DateTime is greater\n    by only comparing the date parts of the passed objects. Only dates\n    with the same timezone can be compared.",
        "exceptions": [
          {
            "title": "throws",
            "type": "SC.DATETIME_COMPAREDATE_TIMEZONE_ERROR",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if the passed arguments\n      don't have the same timezone"
          }
        ],
        "returns": [
          {
            "title": "return",
            "type": "Integer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "-1 if a < b,\n                       +1 if a > b,\n                       0 if a == b"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DateTime",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the first DateTime instance"
          },
          {
            "title": "param",
            "type": "SC.DateTime",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the second DateTime instance"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "timezone",
        "displayName": "SC.DateTime#timezone",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isFrozen",
        "displayName": "SC.DateTime#isFrozen",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "A `DateTime` instance is frozen by default for better performance.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordFormat",
        "displayName": "SC.DateTime.recordFormat",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "The default format (ISO 8601) in which DateTimes are stored in a record.\n    Change this value if your backend sends and receives dates in another\n    format.\n    \n    This value can also be customized on a per-attribute basis with the format\n    property. For example:\n    \n        SC.Record.attr(SC.DateTime, { format: '%d/%m/%Y %H:%M:%S' })",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dayNames",
        "displayName": "SC.DateTime.dayNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "",
        "defaultValue": "['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "abbreviatedDayNames",
        "displayName": "SC.DateTime.abbreviatedDayNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "",
        "defaultValue": "['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "monthNames",
        "displayName": "SC.DateTime.monthNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "",
        "defaultValue": "['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "abbreviatedMonthNames",
        "displayName": "SC.DateTime.abbreviatedMonthNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "",
        "defaultValue": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "timezone",
        "displayName": "SC.DateTime.timezone",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DateTime",
        "overview": "The offset, in minutes, between UTC and the local system time. This\n    property is computed at loading time and should never be changed.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6014,
    "name": "DelegateSupport",
    "displayName": "SC.DelegateSupport",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/mixins/delegate_support.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Support methods for the Delegate design pattern.\n\n  The Delegate design pattern makes it easy to delegate a portion of your\n  application logic to another object.  This is most often used in views to\n  delegate various application-logic decisions to controllers in order to\n  avoid having to bake application-logic directly into the view itself.\n\n  The methods provided by this mixin make it easier to implement this pattern\n  but they are not required to support delegates.\n\n  ## The Pattern\n\n  The delegate design pattern typically means that you provide a property,\n  usually ending in \"delegate\", that can be set to another object in the\n  system.\n\n  When events occur or logic decisions need to be made that you would prefer\n  to delegate, you can call methods on the delegate if it is set.  If the\n  delegate is not set, you should provide some default functionality instead.\n\n  Note that typically delegates are not observable, hence it is not necessary\n  to use get() to retrieve the value of the delegate.",
    "methods": [
      {
        "name": "delegateFor",
        "displayName": "SC.DelegateSupport.delegateFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Selects the delegate that implements the specified method name.  Pass one\n    or more delegates.  The receiver is automatically included as a default.\n\n    This can be more efficient than using invokeDelegateMethod() which has\n    to marshall arguments into a delegate call.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "delegate or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object...",
            "name": "delegate",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more delegate arguments"
          }
        ]
      },
      {
        "name": "invokeDelegateMethod",
        "displayName": "SC.DelegateSupport.invokeDelegateMethod",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the named method on the delegate that you pass.  If no delegate\n    is defined or if the delegate does not implement the method, then a\n    method of the same name on the receiver will be called instead.\n\n    You can pass any arguments you want to pass onto the delegate after the\n    delegate and methodName.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "value returned by delegate"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "delegate",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a delegate object.  May be null."
          },
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a method name"
          },
          {
            "title": "param",
            "type": "Object...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(OPTIONAL) any additional arguments"
          }
        ]
      },
      {
        "name": "getDelegateProperty",
        "displayName": "SC.DelegateSupport.getDelegateProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Search the named delegates for the passed property.  If one is found,\n    gets the property value and returns it.  If none of the passed delegates\n    implement the property, search the receiver for the property as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property value or undefined"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to get."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "delegate",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more delegate"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 33787,
    "name": "DesignCoder",
    "displayName": "SC.DesignCoder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/coders/design.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectCoder"
      }
    ],
    "overview": "A DesignCoder encodes specifically the design for a set of views.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33867,
    "name": "designController",
    "displayName": "SC.designController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/controllers/design.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 34740,
    "name": "DesignerDropTarget",
    "displayName": "SC.DesignerDropTarget",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/views/designer_drop_target.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ContainerView"
      }
    ],
    "overview": "This View is used by Greenhouse when application is in design mode",
    "methods": [
      {
        "name": "performDragOperation",
        "displayName": "SC.DesignerDropTarget#performDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to actually perform the drag operation.\n    \n    Overide this method to actually perform the drag operation.  This method\n    is only called if you returned `YES` in `acceptDragOperation()`.\n    \n    Return the operation that was actually performed or `SC.DRAG_NONE` if the\n    operation was aborted.\n    \n    The default implementation returns `SC.DRAG_NONE`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DragOp",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Drag Operation actually performed"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag instance managing this drag"
          },
          {
            "title": "param",
            "type": "DragOp",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed drag operation. A drag constant."
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 33876,
    "name": "designsController",
    "displayName": "SC.designsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/controllers/designs.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "(Document Your Controller Here)\n  \n  this controller is used by Greenhouse to list all of the views in a page files",
    "methods": [
      {
        "name": "collectionViewValidateDragOperation",
        "displayName": "SC.designsController#collectionViewValidateDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view during a drag to let you determine the\n    kind and location of a drop you might want to accept.\n    \n    You can override this method to implement fine-grained control over how\n    and when a dragged item is allowed to be dropped into a collection view.\n\n    This method will be called by the collection view both to determine in \n    general which operations you might support and specifically the operations\n    you would support if the user dropped an item over a specific location.\n    \n    If the `proposedDropOperation` parameter is `SC.DROP_ON` or\n    `SC.DROP_BEFORE`, then the `proposedInsertionPoint` will be a\n    non-negative value and you should determine the specific operations you\n    will support if the user dropped the drag item at that point.\n    \n    If you do not like the proposed drop operation or insertion point, you \n    can override these properties as well by setting the proposedDropOperation\n    and proposedInsertionIndex properties on the collection view during this\n    method.  These properties are ignored all other times.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed drag operation.  Defaults to op"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.CollectionView} the collection view"
          },
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Drag} the current drag object"
          },
          {
            "title": "param",
            "type": "",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} proposed logical OR of allowed drag operations."
          },
          {
            "title": "param",
            "type": "",
            "name": "proposedInsertionIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} an index into the content array \n      representing the proposed insertion point."
          },
          {
            "title": "param",
            "type": "",
            "name": "proposedDropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the proposed drop operation.  Will be one of SC.DROP_ON, SC.DROP_BEFORE, or SC.DROP_ANY."
          }
        ]
      },
      {
        "name": "collectionViewPerformDragOperation",
        "displayName": "SC.designsController#collectionViewPerformDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view to actually accept a drop.  This method will\n    only be invoked *AFTER* your `validateDrop` method has been called to\n    determine if you want to even allow the drag operation to go through.\n    \n    You should actually make changes to the data model if needed here and\n    then return the actual drag operation that was performed.  If you return\n    SC.DRAG_NONE and the dragOperation was `SC.DRAG_REORDER`, then the default\n    reorder behavior will be provided by the collection view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed drag operation.  Defaults to proposedDragOperation"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.CollectionView}"
          },
          {
            "title": "param",
            "type": "",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Drag} the current drag object"
          },
          {
            "title": "param",
            "type": "",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} proposed logical OR of allowed drag operations."
          },
          {
            "title": "param",
            "type": "",
            "name": "proposedInsertionIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} an index into the content array representing the proposed insertion point."
          },
          {
            "title": "param",
            "type": "",
            "name": "proposedDropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the proposed drop operation.  Will be one of SC.DROP_ON, SC.DROP_BEFORE, or SC.DROP_ANY."
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 27958,
    "name": "DisclosureView",
    "displayName": "SC.DisclosureView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/disclosure.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "Disclosure triangle button. As a subclass of SC.ButtonView, this view\n  takes a lot of the same properties as a button:\n  \n    - isEnabled: whether disclosure triangle is clickable or not\n    - value: `YES` or `NO` (where `YES` implies expanded/open)\n  \n  A disclosure view also supports expanding and collapsing via\n  the keyboard.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.DisclosureView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DisclosureView",
        "overview": "",
        "defaultValue": "['sc-disclosure-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.DisclosureView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DisclosureView",
        "overview": "",
        "defaultValue": "'disclosureRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonBehavior",
        "displayName": "SC.DisclosureView#buttonBehavior",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.ButtonView#buttonBehavior"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DisclosureView",
        "overview": "",
        "defaultValue": "SC.TOGGLE_BEHAVIOR",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toggleOnValue",
        "displayName": "SC.DisclosureView#toggleOnValue",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DisclosureView",
        "overview": "This is the value that will be set when the disclosure triangle is toggled\n    open.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toggleOffValue",
        "displayName": "SC.DisclosureView#toggleOffValue",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DisclosureView",
        "overview": "The value that will be set when the disclosure triangle is toggled closed.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22713,
    "name": "Drag",
    "displayName": "SC.Drag",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/system/drag.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "An instance of this object is created whenever a drag occurs.  The instance\n  manages the mouse/touch events and coordinating with droppable targets until the\n  user releases the mouse button. \n  \n  To initiate a drag, you should call `SC.Drag.start()` with the options below\n  specified in a hash. Pass the ones you need to get the drag you want:\n  \n    - `event` -- *(req)* The mouse event/touch that triggered the drag.  This will be used\n      to position the element.\n  \n    - `source` -- *(req)* The drag source object that should be consulted during\n      the drag operations. This is usually the container view that initiated \n      the drag.\n  \n    - `dragView` -- Optional view that will be used as the source image for the\n      drag. The drag operation will clone the DOM elements for this view and\n      parent them under the drag pane, which has the class name `sc-ghost-view`.\n      The drag view is not moved from its original location during a drag.\n      If the dragView is not provided, the source is used as dragView.\n  \n    - `ghost` -- `YES` | `NO`  If `NO`, the drag view image will show, but the source\n      `dragView` will not be hidden.  Set to `YES` to make it appear that the\n      `dragView` itself is being dragged around.\n  \n    - `slideBack` -- `YES` | `NO`  If `YES` and the drag operation is cancelled, the\n      `dragView` will slide back to its source origin.\n  \n    - `origin` --  If passed, this will be used as the origin point for the\n      ghostView when it slides back.  You normally do not need to pass this \n      unless the ghost view does not appear in the main UI.\n  \n    - `data` -- Optional hash of data types and values.  You can use this to pass\n      a static set of data instead of providing a dataSource.  If you provide\n      a dataSource, it will be used instead.\n  \n    - `dataSource` --  Optional object that will provide the data for the drag to\n      be consumed by the drop target.  If you do not pass this parameter or the \n      data hash, then the source object will be used if it implements the \n      SC.DragDataSource protocol.\n  \n    - `anchorView` -- if you pass this optional view, then the drag will only be\n      allowed to happen within this view.  The ghostView will actually be added \n      as a child of this view during the drag.  Normally the anchorView is the \n      window.",
    "methods": [
      {
        "name": "inspectOperation",
        "displayName": "SC.Drag.inspectOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method to turn an operation mask into a descriptive string.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "dataTypes",
        "displayName": "SC.Drag#dataTypes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Data types supported by this drag operation.\n    \n    Returns an array of data types supported by the drag source.  This may be \n    generated dynamically depending on the data source.\n    \n    If you are implementing a drag source, you will need to provide these data\n    types so that drop targets can detect if they can accept your drag data.\n    \n    If you are implementing a drop target, you should inspect this property\n    on your `dragEntered()` and `prepareForDragOperation()` methods to determine\n    if you can handle any of the data types offered up by the drag source.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasDataType",
        "displayName": "SC.Drag#hasDataType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks for a named data type in the drag.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if data type is present in dataTypes array."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the data type"
          }
        ]
      },
      {
        "name": "dataForType",
        "displayName": "SC.Drag#dataForType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieve the data for the specified `dataType` from the drag source.\n    \n    Drop targets can use this method during their `performDragOperation()`\n    method to retrieve the actual data provided by the drag data source.  This\n    data may be generated dynamically depending on the data source.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The generated data."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "data type you want to retrieve.  Should be one of\n      the values returned in the dataTypes property"
          }
        ]
      },
      {
        "name": "hideGhostView",
        "displayName": "SC.Drag#hideGhostView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Hide the ghostView.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "unhideGhostView",
        "displayName": "SC.Drag#unhideGhostView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Unhide the ghostView.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "start",
        "displayName": "SC.Drag.start",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the method you use to initiate a new drag.  See class documentation\n   for more info on the options taken by this method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "ops",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "addDropTarget",
        "displayName": "SC.Drag.addDropTarget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Register the view object as a drop target.\n    \n    This method is called automatically whenever a view is created with the\n    isDropTarget property set to `YES`.  You generally will not need to call it\n    yourself.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a view implementing the SC.DropTarget protocol"
          }
        ]
      },
      {
        "name": "removeDropTarget",
        "displayName": "SC.Drag.removeDropTarget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Unregister the view object as a drop target.\n    \n    This method is called automatically whenever a view is removed from the \n    hierarchy.  You generally will not need to call it yourself.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A previously registered drop target"
          }
        ]
      },
      {
        "name": "addScrollableView",
        "displayName": "SC.Drag.addScrollableView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Register the view object as a scrollable view.  These views will \n    auto-scroll during a drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view that should be auto-scrolled"
          }
        ]
      },
      {
        "name": "removeScrollableView",
        "displayName": "SC.Drag.removeScrollableView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove the view object as a scrollable view.  These views will auto-scroll\n    during a drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A previously registered scrollable view"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "source",
        "displayName": "SC.Drag#source",
        "objectType": "property",
        "propertyType": "SC.DragSource",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "The source object used to coordinate this drag.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ghostView",
        "displayName": "SC.Drag#ghostView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "The view actually dragged around the screen. This is created automatically\n    from the dragView.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ghostActsLikeCursor",
        "displayName": "SC.Drag#ghostActsLikeCursor",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "If `YES`, then the `ghostView` will acts like a cursor and attach directly\n    to the mouse/touch location.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dragView",
        "displayName": "SC.Drag#dragView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "The view that was used as the source of the `ghostView`.\n    \n    The drag view is not moved from its original location during a drag.\n    Instead, the DOM content of the view is cloned and managed by the \n    ghostView.  If you want to visually indicate that the view is being \n    moved, you should set ghost to `YES`.\n    If dragView is not provided the source is used instead.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ghost",
        "displayName": "SC.Drag#ghost",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "If `YES`, the `dragView` is automatically hidden while dragging around the\n    ghost.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sourceIsDraggable",
        "displayName": "SC.Drag#sourceIsDraggable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "If `NO`, the source will not be copied, clone, no ghost view will get created,\n    and it won't be moved.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "slideBack",
        "displayName": "SC.Drag#slideBack",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "If `YES`, then the `ghostView` will slide back to its original location if\n    drag is cancelled.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ghostOffset",
        "displayName": "SC.Drag#ghostOffset",
        "objectType": "property",
        "propertyType": "Point",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "The origin to slide back to in the coordinate of the `dragView`'s\n    containerView.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "location",
        "displayName": "SC.Drag#location",
        "objectType": "property",
        "propertyType": "Point",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "The current location of the mouse pointer in window coordinates. This is \n    updated as long as the mouse button is pressed or touch is active. Drop targets are \n    encouraged to update this property in their `dragUpdated()` method\n    implementations.\n    \n    The ghostView will be positioned at this location.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dataSource",
        "displayName": "SC.Drag#dataSource",
        "objectType": "property",
        "propertyType": "SC.DragDataSource",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "Optional object used to provide the data for the drag.\n    \n    Drag source can designate a `dataSource` object to generate the data for\n    a drag dynamically.  The data source can and often is the drag source \n    object itself.  \n    \n    Data Source objects must comply with the `SC.DragDataSource` interface.  If\n    you do not want to implement this interface, you can provide the data \n    directly with the data property.\n    \n    If you are implementing a drop target, use the dataTypes property and \n    `dataForTypes()` method to access data instead of working directly with\n    these properties.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "data",
        "displayName": "SC.Drag#data",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "Optional hash of data.  Used if no dataSource was provided.\n    \n    Drag sources can provide a hash of data when the drag begins instead of \n    specifying an actual dataSource.  The data is stored in this property.\n    If you are implementing a drop target, use the dataTypes property and \n    `dataForTypes()` method to access data instead of working directly with\n    these properties.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowedDragOperations",
        "displayName": "SC.Drag#allowedDragOperations",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Drag",
        "overview": "Returns the currently allowed `dragOperations` for the drag.  This will be\n    set just before any callbacks are invoked on a drop target.  The drag \n    source is given an opportunity to set these operations.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22372,
    "name": "DragDataSource",
    "displayName": "SC.DragDataSource",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/protocols/drag_data_source.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This mixin can be used to implement a dynamic data source for a drag \n  operation.  You can return a set of allowed data types and then the \n  method will be used to actually get data in that format when requested.",
    "methods": [
      {
        "name": "dragDataForType",
        "displayName": "SC.DragDataSource.dragDataForType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this method to return the data in the format passed.  Return\n    null if the requested data type cannot be generated.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The data object for the specified type"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Drag instance managing this drag."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "dataType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed dataType to return.  This will \n      always be one of the data types declared in dragDataTypes."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "dragDataTypes",
        "displayName": "SC.DragDataSource.dragDataTypes",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DragDataSource",
        "overview": "Implement this property as an array of data types you want to support\n    for drag operations.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22375,
    "name": "DragSource",
    "displayName": "SC.DragSource",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/protocols/drag_source.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The DragSource protocol is used to dynamically generate multiple types of\n  data from a single object.  You must implement this protocol if you want to\n  provide the data for a drag event.",
    "methods": [
      {
        "name": "dragSourceOperationMaskFor",
        "displayName": "SC.DragSource.dragSourceOperationMaskFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method must be overridden for drag operations to be allowed. \n    Return a bitwise OR'd mask of the drag operations allowed on the\n    specified target.  If you don't care about the target, just return a\n    constant value.\n    \n    The default implementation returns `SC.DRAG_NONE`",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "dropTarget",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed target of the drop."
          },
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SC.Drag instance managing this drag."
          }
        ]
      },
      {
        "name": "dragDidBegin",
        "displayName": "SC.DragSource.dragDidBegin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when the drag begins. You can use this to do any\n    visual highlighting to indicate that the receiver is the source of the \n    drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Drag instance managing this drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in *window* coordinates where the drag \n      began.  You can use convertOffsetFromView() to convert this to local \n      coordinates."
          }
        ]
      },
      {
        "name": "dragDidMove",
        "displayName": "SC.DragSource.dragDidMove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called whenever the drag image is moved.  This is\n    similar to the `dragUpdated()` method called on drop targets.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Drag instance managing this drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in *window* coordinates where the drag \n      mouse is.  You can use convertOffsetFromView() to convert this to local \n      coordinates."
          }
        ]
      },
      {
        "name": "dragDidEnd",
        "displayName": "SC.DragSource.dragDidEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when the drag ended. You can use this to do any\n    cleanup.  The operation is the actual operation performed on the drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag instance managing the drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in WINDOW coordinates where the drag\n      ended."
          },
          {
            "title": "param",
            "type": "DragOp",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag operation that was performed. One of\n      SC.DRAG_COPY, SC.DRAG_MOVE, SC.DRAG_LINK, or SC.DRAG_NONE."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "ignoreModifierKeysWhileDragging",
        "displayName": "SC.DragSource.ignoreModifierKeysWhileDragging",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.DragSource",
        "overview": "If this property is set to `NO` or is not implemented, then the user may\n    modify the drag operation by changing the modifier keys they have \n    pressed.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36542,
    "name": "Editable",
    "displayName": "SC.Editable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/editable.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The Editable mixin is a standard protocol used to activate keyboard editing \n  on views that are editable such as text fields, label views and item views.\n  \n  You should apply this mixin, or implement the methods, if you are\n  designing an item view for a collection and you want to automatically\n  trigger editing.\n  \n  ## Using Editable Views\n  \n  To use a view that includes the Editable mixin, you simply call three\n  methods on the view:\n  \n    - To begin editing, call beginEditing().  This will make the view first responder and allow the user to make changes to it.  If the view cannot begin editing for some reason, it will return NO.\n    - If you want to cancel editing, you should try calling discardEditing().  This will cause the editor to discard its changed value and resign first responder.  Some editors do not support cancelling editing and will return NO.  If this is the case, you may optionally try calling commitEditing() instead to force the view to resign first responder, even though this will commit the changes.\n    - If you want to end editing, while saving any changes that were made, try calling commitEditing().  This will cause the editor to validate and apply its changed value and resign first responder.  If the editor cannot validate its contents for some reason, it will return NO.  In this case you may optionally try calling discardEditing() instead to force the view to resign first responder, even though this will discard the changes.\n  \n  ## Implementing an Editable View\n  \n  To implement a new view that is editable, you should implement the three\n  methods defined below: beginEditing(), discardEditing(), and\n  commitEditing().  If you already allow editing when your view becomes first\n  responder and commit your changes when the view loses first responder status\n  then you can simply apply this mixin and not override any methods.",
    "methods": [
      {
        "name": "beginEditing",
        "displayName": "SC.Editable.beginEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins editing on the view.\n    \n    This method is called by other views when they want you to begin editing.\n    You should write this method to become first responder, perform any \n    additional setup needed to begin editing and then return YES.\n    \n    If for some reason you do not want to allow editing right now, you can\n    also return NO.  If your view is already editing, then you should not\n    restart editing again but just return YES.\n\n    The default implementation checks to see if editing is allowed, then\n    becomes first responder and updates the isEditing property if appropriate.\n    Generally you will want to replace this method with your own \n    implementation and not call the default.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if editing began or is in progress, NO otherwise"
          }
        ],
        "params": []
      },
      {
        "name": "discardEditing",
        "displayName": "SC.Editable.discardEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends editing on the view, discarding any changes that were made to the\n    view value in the meantime.\n    \n    This method is called by other views when they want to cancel editing\n    that began earlier.  When this method is called you should resign first\n    responder, restore the original value of the view and return YES.\n    \n    If your view cannot revert back to its original state before editing began\n    then you can implement this method to simply return NO.  A properly\n    implemented client may try to call commitEditing() instead to force your\n    view to end editing anyway.\n    \n    If this method is called on a view that is not currently editing, you\n    should always just return YES.\n    \n    The default implementation does not support discarding changes and always\n    returns NO.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if changes were discarded and editing ended."
          }
        ],
        "params": []
      },
      {
        "name": "commitEditing",
        "displayName": "SC.Editable.commitEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends editing on the view, committing any changes that were made to the \n    view value in the meantime.\n    \n    This method is called by other views when they want to end editing, \n    saving any changes that were made to the view in the meantime.  When this\n    method is called you should resign first responder, save the latest\n    value of the view and return YES.\n    \n    If your view cannot save the current state of the view for some reason \n    (for example if validation fails), then you should return NO.  Properly\n    implemented clients may then try to call discardEditing() to force your\n    view to resign first responder anyway.\n    \n    Some views apply changes to their value immediately during an edit instead\n    of waiting for the view to end editing.  If this is the case, you should\n    still implement commitEditing but you simply may not save any value \n    changes.\n  \n    If this method is called on a view that is not currently editing, you\n    should always just reutrn YES.\n    \n    The default implementation sets isEditing to NO, resigns first responder\n    and returns YES.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if changes were discarded and editing ended."
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isEditable",
        "displayName": "SC.Editable.isEditable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Editable",
        "overview": "Indicates whether a view is editable or not.  You can optionally \n    implement the methods in this mixin to disallow editing is isEditable is\n    NO.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditing",
        "displayName": "SC.Editable.isEditing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Editable",
        "overview": "Indicates whether editing is currently in progress.  The methods you\n    implement should generally up this property as appropriate when you \n    begin and end editing.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 50637,
    "name": "EmptyState",
    "displayName": "SC.EmptyState",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/statechart/system/empty_state.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.State"
      }
    ],
    "overview": "Represents an empty state that gets assigned as a state's initial substate \n  if the state does not have an initial substate defined.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 39957,
    "name": "EmptyTheme",
    "displayName": "SC.EmptyTheme",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/tests/views/container/methods.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Theme"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 46580,
    "name": "Enumerable",
    "displayName": "SC.Enumerable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/enumerable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This mixin defines the common interface implemented by enumerable objects\n  in SproutCore.  Most of these methods follow the standard Array iteration\n  API defined up to JavaScript 1.8 (excluding language-specific features that\n  cannot be emulated in older versions of JavaScript).\n\n  This mixin is applied automatically to the Array class on page load, so you\n  can use any of these methods on simple arrays.  If Array already implements\n  one of these methods, the mixin will not override them.\n\n  Writing Your Own Enumerable\n  -----\n\n  To make your own custom class enumerable, you need two items:\n\n  1. You must have a length property.  This property should change whenever\n     the number of items in your enumerable object changes.  If you using this\n     with an SC.Object subclass, you should be sure to change the length\n     property using set().\n\n  2. You must implement nextObject().  See documentation.\n\n  Once you have these two methods implemented, apply the SC.Enumerable mixin\n  to your class and you will be able to enumerate the contents of your object\n  like any other collection.\n\n  Using SproutCore Enumeration with Other Libraries\n  -----\n\n  Many other libraries provide some kind of iterator or enumeration like\n  facility.  This is often where the most common API conflicts occur.\n  SproutCore's API is designed to be as friendly as possible with other\n  libraries by implementing only methods that mostly correspond to the\n  JavaScript 1.8 API.",
    "methods": [
      {
        "name": "nextObject",
        "displayName": "SC.Enumerable#nextObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this method to make your class enumerable.\n\n    This method will be called repeatedly during enumeration.  The index value\n    will always begin with 0 and increment monotonically.  You don't have to\n    rely on the index value to determine what object to return, but you should\n    always check the value and start from the beginning when you see the\n    requested index is 0.\n\n    The previousObject is the object that was returned from the last call\n    to nextObject for the current iteration.  This is a useful way to\n    manage iteration if you are tracing a linked list, for example.\n\n    Finally the context parameter will always contain a hash you can use as\n    a \"scratchpad\" to maintain any other state you need in order to iterate\n    properly.  The context object is reused and is not reset between\n    iterations so make sure you setup the context with a fresh state whenever\n    the index parameter is 0.\n\n    Generally iterators will continue to call nextObject until the index\n    reaches the your current length-1.  If you run out of data before this\n    time for some reason, you should simply return undefined.\n\n    The default implementation of this method simply looks up the index.\n    This works great on any Array-like objects.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the next object in the iteration or undefined"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the current index of the iteration"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "previousObject",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value returned by the last call to nextObject."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a context object you can use to maintain state."
          }
        ]
      },
      {
        "name": "firstObject",
        "displayName": "SC.Enumerable#firstObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method returns the first object from a collection.  This is usually\n    used by bindings and other parts of the framework to extract a single\n    object if the enumerable contains only one item.\n\n    If you override this method, you should implement it so that it will\n    always return the same value each time it is called.  If your enumerable\n    contains only one object, this method should always return that object.\n    If your enumerable is empty, this method should return undefined.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object or undefined"
          }
        ],
        "params": []
      },
      {
        "name": "lastObject",
        "displayName": "SC.Enumerable#lastObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method returns the last object from a collection.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object or undefined"
          }
        ],
        "params": []
      },
      {
        "name": "enumerator",
        "displayName": "SC.Enumerable#enumerator",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new enumerator for this object.  See SC.Enumerator for\n    documentation on how to use this object.  Enumeration is an alternative\n    to using one of the other iterators described here.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Enumerator",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an enumerator for the receiver"
          }
        ],
        "params": []
      },
      {
        "name": "forEach",
        "displayName": "SC.Enumerable#forEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Iterates through the enumerable, calling the passed function on each\n    item.  This method corresponds to the forEach() method defined in\n    JavaScript 1.6.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "getEach",
        "displayName": "SC.Enumerable#getEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves the named value on each member object.  This is more efficient\n    than using one of the wrapper methods defined here.  Objects that\n    implement SC.Observable will use the get() method, otherwise the property\n    will be accessed directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "extracted values"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to retrieve"
          }
        ]
      },
      {
        "name": "setEach",
        "displayName": "SC.Enumerable#setEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the value on the named property for each member.  This is more\n    efficient than using other methods defined on this helper.  If the object\n    implements SC.Observable, the value will be changed to set(), otherwise\n    it will be set directly.  null objects are skipped.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to set"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to set"
          }
        ]
      },
      {
        "name": "map",
        "displayName": "SC.Enumerable#map",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Maps all of the items in the enumeration to another value, returning\n    a new array.  This method corresponds to map() defined in JavaScript 1.6.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n        function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    It should return the mapped value.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The mapped array."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "mapProperty",
        "displayName": "SC.Enumerable#mapProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Similar to map, this specialized function returns the value of the named\n    property on all items in the enumeration.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The mapped array."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name of the property"
          }
        ]
      },
      {
        "name": "filter",
        "displayName": "SC.Enumerable#filter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array with all of the items in the enumeration that the passed\n    function returns YES for. This method corresponds to filter() defined in\n    JavaScript 1.6.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    It should return the YES to include the item in the results, NO otherwise.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A filtered array."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "sortProperty",
        "displayName": "SC.Enumerable#sortProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array sorted by the value of the passed key parameters.\n    null objects will be sorted first.  You can pass either an array of keys\n    or multiple parameters which will act as key names",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more key names"
          }
        ]
      },
      {
        "name": "filterProperty",
        "displayName": "SC.Enumerable#filterProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array with just the items with the matched property.  You\n    can pass an optional second argument with the target value.  Otherwise\n    this will match any property that evaluates to true.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "filtered array"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to test"
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional value to test against."
          }
        ]
      },
      {
        "name": "find",
        "displayName": "SC.Enumerable#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first item in the array for which the callback returns YES.\n    This method works similar to the filter() method defined in JavaScript 1.6\n    except that it will stop working on the array once a match is found.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    It should return the YES to include the item in the results, NO otherwise.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Found item or null."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "findProperty",
        "displayName": "SC.Enumerable#findProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an the first item with a property matching the passed value.  You\n    can pass an optional second argument with the target value.  Otherwise\n    this will match any property that evaluates to true.\n\n    This method works much like the more generic find() method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "found item or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to test"
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional value to test against."
          }
        ]
      },
      {
        "name": "every",
        "displayName": "SC.Enumerable#every",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed function returns YES for every item in the\n    enumeration.  This corresponds with the every() method in JavaScript 1.6.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    It should return the YES or NO.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.\n\n    Example Usage:\n\n          if (people.every(isEngineer)) { Paychecks.addBigBonus(); }",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "everyProperty",
        "displayName": "SC.Enumerable#everyProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed property resolves to true for all items in the\n    enumerable.  This method is often simpler/faster than using a callback.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "filtered array"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to test"
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional value to test against."
          }
        ]
      },
      {
        "name": "some",
        "displayName": "SC.Enumerable#some",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed function returns true for any item in the\n    enumeration. This corresponds with the every() method in JavaScript 1.6.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(item, index, enumerable) ;\n\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    It should return the YES to include the item in the results, NO otherwise.\n\n    Note that in addition to a callback, you can also pass an optional target\n    object that will be set as \"this\" on the context.  This is a good way\n    to give your iterator function access to the current object.\n\n    Usage Example:\n\n          if (people.some(isManager)) { Paychecks.addBiggerBonus(); }",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A filtered array."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "someProperty",
        "displayName": "SC.Enumerable#someProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed property resolves to true for any item in the\n    enumerable.  This method is often simpler/faster than using a callback.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to test"
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional value to test against."
          }
        ]
      },
      {
        "name": "reduce",
        "displayName": "SC.Enumerable#reduce",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will combine the values of the enumerator into a single value. It\n    is a useful way to collect a summary value from an enumeration.  This\n    corresponds to the reduce() method defined in JavaScript 1.8.\n\n    The callback method you provide should have the following signature (all\n    parameters are optional):\n\n          function(previousValue, item, index, enumerable) ;\n\n    - *previousValue* is the value returned by the last call to the iterator.\n    - *item* is the current item in the iteration.\n    - *index* is the current index in the iteration\n    - *enumerable* is the enumerable object itself.\n\n    Return the new cumulative value.\n\n    In addition to the callback you can also pass an initialValue.  An error\n    will be raised if you do not pass an initial value and the enumerator is\n    empty.\n\n    Note that unlike the other methods, this method does not allow you to\n    pass a target object to set as this for the callback.  It's part of the\n    spec. Sorry.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The reduced value."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the callback to execute"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "initialValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "initial value for the reduce"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "internal use only.  May not be available."
          }
        ]
      },
      {
        "name": "invoke",
        "displayName": "SC.Enumerable#invoke",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the named method on every object in the receiver that\n    implements it.  This method corresponds to the implementation in\n    Prototype 1.6.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "return values from calling invoke."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the name of the method"
          },
          {
            "title": "param",
            "type": "Object...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional arguments to pass as well."
          }
        ]
      },
      {
        "name": "invokeWhile",
        "displayName": "SC.Enumerable#invokeWhile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the passed method and optional arguments on the receiver elements\n    as long as the methods return value matches the target value.  This is\n    a useful way to attempt to apply changes to a collection of objects unless\n    or until one fails.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "return values from calling invoke."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "targetValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target return value"
          },
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the name of the method"
          },
          {
            "title": "param",
            "type": "Object...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional arguments to pass as well."
          }
        ]
      },
      {
        "name": "toArray",
        "displayName": "SC.Enumerable#toArray",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Simply converts the enumerable into a genuine array.  The order, of\n    course, is not gauranteed.  Corresponds to the method implemented by\n    Prototype.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the enumerable as an array."
          }
        ],
        "params": []
      },
      {
        "name": "groupBy",
        "displayName": "SC.Enumerable#groupBy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts an enumerable into a matrix, with inner arrays grouped based\n    on a particular property of the elements of the enumerable.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "matrix of arrays"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to test"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isEnumerable",
        "displayName": "SC.Enumerable#isEnumerable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Enumerable",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 47621,
    "name": "Enumerator",
    "displayName": "SC.Enumerator",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/enumerator.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "An object that iterates over all of the values in an object.\n\n  An instance of this object is returned everytime you call the\n  enumerator() method on an object that implements the SC.Enumerable mixin.\n\n  Once you create an enumerator instance, you can call nextObject() on it\n  until you can iterated through the entire collection.  Once you have\n  exhausted the enumerator, you can reuse it if you want by calling reset().",
    "methods": [
      {
        "name": "nextObject",
        "displayName": "SC.Enumerator#nextObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the next object in the enumeration or undefined when complete.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the next object or undefined"
          }
        ],
        "params": []
      },
      {
        "name": "reset",
        "displayName": "SC.Enumerator#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets the enumerator to the beginning.  This is a nice way to reuse\n    an existing enumerator.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.Enumerator#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Releases the enumerators enumerable object.  You cannot use this object\n    anymore.  This is not often needed but it is useful when you need to\n    make sure memory gets cleared.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "null"
          }
        ],
        "params": []
      },
      {
        "name": "create",
        "displayName": "SC.Enumerator.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Use this method to manually create a new Enumerator object.  Usually you\n  will not access this method directly but instead call enumerator() on the\n  item you want to enumerate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Enumerator",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the enumerator"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "enumerableObject",
            "isOptional": false,
            "defaultValue": "",
            "desc": "enumerable object."
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 47651,
    "name": "Error",
    "displayName": "SC.Error",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/error.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "An error, used to represent an error state.\n\n  Many API's within SproutCore will return an instance of this object whenever\n  they have an error occur.  An error includes an error code, description,\n  and optional human readable label that indicates the item that failed.\n\n  Depending on the error, other properties may also be added to the object\n  to help you recover from the failure.\n\n  You can pass error objects to various UI elements to display the error in\n  the interface. You can easily determine if the value returned by some API is\n  an error or not using the helper SC.ok(value).\n\n  Faking Error Objects\n  ---\n\n  You can actually make any object you want to be treated like an Error object\n  by simply implementing two properties: isError and errorValue.  If you\n  set isError to YES, then calling SC.ok(obj) on your object will return NO.\n  If isError is YES, then SC.val(obj) will return your errorValue property\n  instead of the receiver.",
    "methods": [
      {
        "name": "errorObject",
        "displayName": "SC.Error#errorObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The original error object.  Normally this will return the receiver.\n    However, sometimes another object will masquarade as an error; this gives\n    you a way to get at the underyling error.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "desc",
        "displayName": "SC.Error.desc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new SC.Error instance with the passed description, label, and\n  code.  All parameters are optional.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new error instance."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "description",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} human readable description of the error"
          },
          {
            "title": "param",
            "type": "",
            "name": "label",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} human readable name of the item with the error"
          },
          {
            "title": "param",
            "type": "",
            "name": "code",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} an error code to use for testing."
          },
          {
            "title": "param",
            "type": "",
            "name": "code",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "code",
        "displayName": "SC.Error#code",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "error code.  Used to designate the error type.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "message",
        "displayName": "SC.Error#message",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "Human readable description of the error.  This can also be a non-localized\n    key.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "errorValue",
        "displayName": "SC.Error#errorValue",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "The value the error represents.  This is used when wrapping a value inside\n    of an error to represent the validation failure.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "label",
        "displayName": "SC.Error#label",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "Human readable name of the item with the error.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isError",
        "displayName": "SC.Error#isError",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HAS_MULTIPLE_VALUES",
        "displayName": "SC.Error.HAS_MULTIPLE_VALUES",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Error",
        "overview": "Standard error code for errors that do not support multiple values.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6506,
    "name": "Event",
    "displayName": "SC.Event",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/event.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.Event.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Standard method to create a new event.  Pass the native browser event you\n    wish to wrap if needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "e",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.Event.add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Bind an event to an element.\n\n    This method will cause the passed handler to be executed whenever a\n    relevant event occurs on the named element.  This method supports a\n    variety of handler types, depending on the kind of support you need.\n    \n    ## Simple Function Handlers\n\n        SC.Event.add(anElement, \"click\", myClickHandler) ;\n    \n    The most basic type of handler you can pass is a function.  This function\n    will be executed everytime an event of the type you specify occurs on the\n    named element.  You can optionally pass an additional context object which\n    will be included on the event in the event.data property.\n    \n    When your handler function is called the, the function's \"this\" property\n    will point to the element the event occurred on.\n    \n    The click handler for this method must have a method signature like:\n    \n        function(event) { return YES|NO; }\n    \n    ## Method Invocations\n\n        SC.Event.add(anElement, \"click\", myObject, myObject.aMethod) ;\n\n    Optionally you can specify a target object and a method on the object to \n    be invoked when the event occurs.  This will invoke the method function\n    with the target object you pass as \"this\".  The method should have a \n    signature like:\n    \n        function(event, targetElement) { return YES|NO; }\n\n    Like function handlers, you can pass an additional context data paramater\n    that will be included on the event in the event.data property.\n    \n    ## Handler Return Values\n\n    Both handler functions should return YES if you want the event to \n    continue to propagate and NO if you want it to stop.  Returning NO will\n    both stop bubbling of the event and will prevent any default action \n    taken by the browser.  You can also control these two behaviors separately\n    by calling the stopPropagation() or preventDefault() methods on the event\n    itself, returning YES from your method.\n    \n    ## Limitations\n    \n    Although SproutCore's event implementation is based on jQuery, it is \n    much simpler in design.  Notably, it does not support namespaced events\n    and you can only pass a single type at a time.\n    \n    If you need more advanced event handling, consider the SC.ClassicResponder \n    functionality provided by SproutCore or use your favorite DOM library.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Element",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a DOM element, window, or document object"
          },
          {
            "title": "param",
            "type": "String",
            "name": "eventType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the event type you want to respond to"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The target object for a method call or a function."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional method or method name if target passed"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional context to pass to the handler as event.data"
          },
          {
            "title": "param",
            "type": "",
            "name": "useCapture",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.Event.remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes a specific handler or all handlers for an event or event+type.\n\n    To remove a specific handler, you must pass in the same function or the\n    same target and method as you passed into SC.Event.add().  See that method\n    for full documentation on the parameters you can pass in.\n    \n    If you omit a specific handler but provide both an element and eventType,\n    then all handlers for that element will be removed.  If you provide only\n    and element, then all handlers for all events on that element will be\n    removed.\n    \n    ## Limitations\n    \n    Although SproutCore's event implementation is based on jQuery, it is \n    much simpler in design.  Notably, it does not support namespaced events\n    and you can only pass a single type at a time.\n    \n    If you need more advanced event handling, consider the SC.ClassicResponder \n    functionality provided by SproutCore or use your favorite DOM library.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Element",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a DOM element, window, or document object"
          },
          {
            "title": "param",
            "type": "String",
            "name": "eventType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the event type to remove"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The target object for a method call.  Or a function."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional name of method"
          }
        ]
      },
      {
        "name": "simulateEvent",
        "displayName": "SC.Event.simulateEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a simulated event object.  This is mostly useful for unit \n    testing.  You can pass the return value of this property into the \n    trigger() method to actually send the event.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "simulated event object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Element",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the element the event targets"
          },
          {
            "title": "param",
            "type": "String",
            "name": "eventType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "event type.  mousedown, mouseup, etc"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additonal attributes to apply to event."
          }
        ]
      },
      {
        "name": "trigger",
        "displayName": "SC.Event.trigger",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Trigger an event execution immediately.  You can use this method to \n    simulate arbitrary events on arbitary elements.\n\n    ## Limitations\n    \n    Note that although this is based on the jQuery implementation, it is \n    much simpler.  Notably namespaced events are not supported and you cannot\n    trigger events globally.\n    \n    If you need more advanced event handling, consider the SC.Responder \n    functionality provided by SproutCore or use your favorite DOM library.\n\n    ## Example\n    \n        SC.Event.trigger(view.get('layer'), 'mousedown');",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Return value of trigger or undefined if not fired"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Element} the target element"
          },
          {
            "title": "param",
            "type": "",
            "name": "eventType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the event type"
          },
          {
            "title": "param",
            "type": "",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Array} optional argument or arguments to pass to handler."
          },
          {
            "title": "param",
            "type": "",
            "name": "donative",
            "isOptional": false,
            "defaultValue": "",
            "desc": "??"
          }
        ]
      },
      {
        "name": "handle",
        "displayName": "SC.Event.handle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will handle the passed event, finding any registered listeners\n    and executing them.  If you have an event you want handled, you can \n    manually invoke this method.  This function expects it's \"this\" value to\n    be the element the event occurred on, so you should always call this \n    method like:\n    \n        SC.Event.handle.call(element, event) ;\n\n    Note that like other parts of this library, the handle function does not\n    support namespaces.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Event} the event to handle"
          }
        ]
      },
      {
        "name": "unload",
        "displayName": "SC.Event.unload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called just before the window unloads to unhook all \n    registered events.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "touchesForView",
        "displayName": "SC.Event#touchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the touches owned by the supplied view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "touches an array of SC.Touch objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesForResponder",
        "displayName": "SC.Event#touchesForResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as touchesForView, but sounds better for responders.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "touches an array of SC.Touch objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RootResponder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "averagedTouchesForView",
        "displayName": "SC.Event#averagedTouchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns average data--x, y, and d (distance)--for the touches owned by the \n    supplied view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "touches an array of SC.Touch objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "allowDefault",
        "displayName": "SC.Event#allowDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates that you want to allow the normal default behavior.  Sets\n    the hasCustomEventHandling property to YES but does not cancel the event.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Event",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "preventDefault",
        "displayName": "SC.Event#preventDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements W3C standard.  Will prevent the browser from performing its\n    default action on this event.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Event",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "stopPropagation",
        "displayName": "SC.Event#stopPropagation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements W3C standard.  Prevents further bubbling of the event.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Event",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "stop",
        "displayName": "SC.Event#stop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Stops both the default action and further propogation.  This is more \n    convenient than calling both.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Event",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "getCharString",
        "displayName": "SC.Event#getCharString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the pressed character (found in this.which) as a string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "commandCodes",
        "displayName": "SC.Event#commandCodes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns character codes for the event.  The first value is the normalized \n    code string, with any shift or ctrl characters added to the begining.  \n    The second value is the char string by itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "MOUSE_WHEEL_MULTIPLIER",
        "displayName": "SC.Event.MOUSE_WHEEL_MULTIPLIER",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "We need this because some browsers deliver different values\n    for mouse wheel deltas. Once the first mouse wheel event has\n    been run, this value will get set. Because we don't know the\n    maximum or minimum value ahead of time, if the event's delta\n    exceeds `SC.Event.MOUSE_WHEEL_DELTA_LIMIT`, this value can be\n    invalidated and changed during a later event.",
        "defaultValue": "1",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "MOUSE_WHEEL_DELTA_LIMIT",
        "displayName": "SC.Event.MOUSE_WHEEL_DELTA_LIMIT",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "This represents the limit in the delta before a different multiplier\n    will be applied. Because we can't generated an accurate mouse\n    wheel event ahead of time, and browsers deliver differing values\n    for mouse wheel deltas, this is necessary to ensure that\n    browsers that scale their values largely are dealt with correctly\n    in the future.",
        "defaultValue": "1000",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "special",
        "displayName": "SC.Event.special",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "This hash contains handlers for special or custom events.  You can add\n    your own handlers for custom events here by simply naming the event and\n    including a hash with the following properties:\n    \n     - setup: this function should setup the handler or return NO\n     - teardown: this function should remove the event listener",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasCustomEventHandling",
        "displayName": "SC.Event#hasCustomEventHandling",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "Set to YES if you have called either preventDefault() or stopPropagation().  \n    This allows a generic event handler to notice if you want to provide \n    detailed control over how the browser handles the real event.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "normalized",
        "displayName": "SC.Event#normalized",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "Always YES to indicate the event was normalized.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "observe",
        "displayName": "SC.Event.observe",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "Alias for add() method.  This provides a Prototype-like API.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "stopObserving",
        "displayName": "SC.Event.stopObserving",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "Alias for remove() method.  This provides a Prototype-like API",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fire",
        "displayName": "SC.Event.fire",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Event",
        "overview": "Alias for trigger() method.  This provides a Prototype-like API",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37563,
    "name": "ExceptionHandler",
    "displayName": "SC.ExceptionHandler",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/exception_handler.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "If an exception is thrown during execution of your SproutCore app, this\n  object will be given the opportunity to handle it.\n\n  By default, a simple error message is displayed prompting the user to\n  reload. You could override the handleException method to, for example, send\n  an XHR to your servers so you can collect information about crashes in your\n  application.\n\n  Since the application is in an unknown state when an exception is thrown, we\n  rely on JavaScript and DOM manipulation to generate the error instead of\n  using SproutCore views.",
    "methods": [
      {
        "name": "handleException",
        "displayName": "SC.ExceptionHandler.handleException",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when an exception is encountered by code executed using SC.run().\n\n    By default, this will display an error dialog to the user. If you\n    want more sophisticated behavior, override this method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Exception",
            "name": "exception",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the exception thrown during execution"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isShowingErrorDialog",
        "displayName": "SC.ExceptionHandler.isShowingErrorDialog",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ExceptionHandler",
        "overview": "YES if an exception was thrown and the error dialog is visible.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14843,
    "name": "FetchedAttribute",
    "displayName": "SC.FetchedAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/fetched_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.RecordAttribute"
      }
    ],
    "overview": "Describes a single attribute that is fetched dynamically from the server\n  when you request it.  Normally getting a property value with this attribute\n  applied will cause call the `find()` method on the record store passing\n  the attribute record type as the query key along with the property value,\n  owner record, and property key name as parameters. \n  \n  The DataSource you hook up to your store must know how to load this kind \n  of relationship for this fetched property to work properly.\n  \n  The return value is usually an `SC.RecordArray` that will populate with the\n  record data so that you can display it.",
    "methods": [],
    "properties": [
      {
        "name": "paramValueKey",
        "displayName": "SC.FetchedAttribute#paramValueKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FetchedAttribute",
        "overview": "Define the param key that will be passed to the `findAll` method on the\n    store.  If `null`, the param will not be sent.  Defaults to `'link'`",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "paramOwnerKey",
        "displayName": "SC.FetchedAttribute#paramOwnerKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FetchedAttribute",
        "overview": "Define the param key used to send the parent record.  If `null`, the param\n    will not be sent.  Defaults to '`owner'`.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "paramRelKey",
        "displayName": "SC.FetchedAttribute#paramRelKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FetchedAttribute",
        "overview": "Define the param key used to send the key name used to reference this \n    attribute.  If `null`, the param will not be sent.  Defaults to `\"rel\"`",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "queryKey",
        "displayName": "SC.FetchedAttribute#queryKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FetchedAttribute",
        "overview": "Optional query key to pass to findAll.  Otherwise type class will be \n    passed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.FetchedAttribute#isEditable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FetchedAttribute",
        "overview": "Fetched attributes are not editable",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40721,
    "name": "FieldView",
    "displayName": "SC.FieldView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/field.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validatable"
      }
    ],
    "overview": "Base view for managing a view backed by an input element.  Since the web\n  browser provides native support for editing input elements, this view\n  provides basic support for listening to changes on these input elements and\n  responding to them.\n  \n  Generally you will not work with a FieldView directly.  Instead, you should\n  use one of the subclasses implemented by your target platform such as \n  SC.CheckboxView, SC.RadioView, SC.TextFieldView, and so on.",
    "methods": [
      {
        "name": "fieldValue",
        "displayName": "SC.FieldView#fieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The raw value of the field itself.  This is computed from the 'value'\n    property by passing it through any validator you might have set.  This is \n    the value that will be set on the field itself when the view is updated.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "$input",
        "displayName": "SC.FieldView#$input",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return an CoreQuery object that selects the input elements\n    for the view.  If this method is defined, the field view will \n    automatically edit the attrbutes of the input element to reflect the \n    current isEnabled state among other things.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "setFieldValue",
        "displayName": "SC.FieldView#setFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to set the actual value of the field.\n    \n    The default implementation will simple copy the newValue to the value\n    attribute of any input tags in the receiver view.  You can override this\n    method to provide specific functionality needed by your view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.FieldView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "newValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to display."
          }
        ]
      },
      {
        "name": "getFieldValue",
        "displayName": "SC.FieldView#getFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to retrieve the actual value of the field.\n    \n    The default implementation will simply retrieve the value attribute from\n    the first input tag in the receiver view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "value"
          }
        ],
        "params": []
      },
      {
        "name": "fieldValueDidChange",
        "displayName": "SC.FieldView#fieldValueDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Your class should call this method anytime you think the value of the \n    input element may have changed.  This will retrieve the value and update\n    the value property of the view accordingly.\n    \n    If this is a partial change (i.e. the user is still editing the field and\n    you expect the value to change further), then be sure to pass YES for the\n    partialChange parameter.  This will change the kind of validation done on\n    the value.  Otherwise, the validator may mark the field as having an error\n    when the user is still in mid-edit.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean|SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "result of validation."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "partialChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) YES if this is a partial change."
          }
        ]
      },
      {
        "name": "mouseDown",
        "displayName": "SC.FieldView#mouseDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Allow the browser to do its normal event handling for the mouse down\n    event.  But first, set isActive to YES.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.FieldView#acceptsFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "tied to the isEnabled state",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isTextArea",
        "displayName": "SC.FieldView#isTextArea",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FieldView",
        "overview": "If YES then we use textarea instead of input. \n     WARNING: Use only with textField** Juan",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.FieldView#ariaRole",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FieldView",
        "overview": "The WAI-ARIA role for field view. This property's value should not be\n    changed.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14695,
    "name": "FixturesDataSource",
    "displayName": "SC.FixturesDataSource",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/data_sources/fixtures.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.DataSource"
      }
    ],
    "overview": "TODO: Describe Class",
    "methods": [
      {
        "name": "loadFixturesFor",
        "displayName": "SC.FixturesDataSource#loadFixturesFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Load fixtures for a given fetchKey into the store\n    and push it to the ret array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Fixture",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store to load into"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type to load"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "ret",
            "isOptional": false,
            "defaultValue": "",
            "desc": "is passed, array to add loaded storeKeys to."
          }
        ]
      },
      {
        "name": "generateIdFor",
        "displayName": "SC.FixturesDataSource#generateIdFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates an id for the passed record type.  You can override this if \n    needed.  The default generates a storekey and formats it as a string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Subclass of SC.Record"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the data hash for the record"
          },
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "store key for the item"
          }
        ]
      },
      {
        "name": "fixtureForStoreKey",
        "displayName": "SC.FixturesDataSource#fixtureForStoreKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Based on the storeKey it returns the specified fixtures",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "data hash or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the storeKey"
          }
        ]
      },
      {
        "name": "setFixtureForStoreKey",
        "displayName": "SC.FixturesDataSource#setFixtureForStoreKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Update the data hash fixture for the named store key.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.FixturesDataSource",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the storeKey"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fixturesFor",
        "displayName": "SC.FixturesDataSource#fixturesFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the fixtures for the passed record type and prepare them if needed.\n    Return cached value when complete.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "data hashes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fixturesLoadedFor",
        "displayName": "SC.FixturesDataSource#fixturesLoadedFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if fixtures for a given recordType have already been loaded",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKeys"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hasFixturesFor",
        "displayName": "SC.FixturesDataSource#hasFixturesFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES or SC.MIXED_STATE if one or more of the storeKeys can be \n    handled by the fixture data source.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if all handled, MIXED_STATE if some handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store keys"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "simulateRemoteResponse",
        "displayName": "SC.FixturesDataSource#simulateRemoteResponse",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FixturesDataSource",
        "overview": "If YES then the data source will asynchronously respond to data requests\n    from the server.  If you plan to replace the fixture data source with a \n    data source that talks to a real remote server (using Ajax for example),\n    you should leave this property set to YES so that Fixtures source will\n    more accurately simulate your remote data source.\n\n    If you plan to replace this data source with something that works with \n    local storage, for example, then you should set this property to NO to \n    accurately simulate the behavior of your actual data source.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "latency",
        "displayName": "SC.FixturesDataSource#latency",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FixturesDataSource",
        "overview": "If you set simulateRemoteResponse to YES, then the fixtures source will\n    assume a response latency from your server equal to the msec specified\n    here.  You should tune this to simulate latency based on the expected \n    performance of your server network.  Here are some good guidelines:\n    \n     - 500: Simulates a basic server written in PHP, Ruby, or Python (not twisted) without a CDN in front for caching.\n     - 250: (Default) simulates the average latency needed to go back to your origin server from anywhere in the world.  assumes your servers itself will respond to requests < 50 msec\n     - 100: simulates the latency to a \"nearby\" server (i.e. same part of the world).  Suitable for simulating locally hosted servers or servers with multiple data centers around the world.\n     - 50: simulates the latency to an edge cache node when using a CDN.  Life is really good if you can afford this kind of setup.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36549,
    "name": "FlowedLayout",
    "displayName": "SC.FlowedLayout",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/flowed_layout.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Normal SproutCore views are absolutely positioned--parent views have relatively\n  little input on where their child views are placed.\n  \n  This mixin makes a view layout its child views itself, flowing left-to-right\n  or up-to-down, and, optionally, wrapping.\n  \n  Child views with useAbsoluteLayout===YES will be ignored in the layout process.\n  This mixin detects when child views have changed their size, and will adjust accordingly.\n  It also observes child views' isVisible and calculatedWidth/Height properties, and, as a\n  flowedlayout-specific extension, isHidden.\n  \n  These properties are observed through `#js:observeChildLayout` and `#js:unobserveChildLayout`;\n  you can override the method to add your own properties. To customize isVisible behavior,\n  you will also want to override shouldIncludeChildInFlow.\n  \n  This relies on the children's frames or, if specified, calculatedWidth and calculatedHeight\n  properties.\n  \n  This view mixes very well with animation. Further, it is able to automatically mix\n  in to child views it manages, created or not yet created, allowing you to specify\n  settings such as animation once only, and have everything \"just work\".\n  \n  Like normal views, you simply specify child views--everything will \"just work.\"",
    "methods": [],
    "properties": [
      {
        "name": "layoutDirection",
        "displayName": "SC.FlowedLayout.layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "The direction of flow. Possible values:\n    \n      - SC.LAYOUT_HORIZONTAL\n      - SC.LAYOUT_VERTICAL",
        "defaultValue": "SC.LAYOUT_HORIZONTAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoResize",
        "displayName": "SC.FlowedLayout.autoResize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "Whether the view should automatically resize (to allow scrolling, for instance)",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldResizeWidth",
        "displayName": "SC.FlowedLayout.shouldResizeWidth",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldResizeHeight",
        "displayName": "SC.FlowedLayout.shouldResizeHeight",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "align",
        "displayName": "SC.FlowedLayout.align",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "The alignment of items within rows or columns. Possible values:\n    \n      - SC.ALIGN_LEFT\n      - SC.ALIGN_CENTER\n      - SC.ALIGN_RIGHT\n      - SC.ALIGN_JUSTIFY",
        "defaultValue": "SC.ALIGN_LEFT",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canWrap",
        "displayName": "SC.FlowedLayout.canWrap",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "If YES, flowing child views are allowed to wrap to new rows or columns.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultFlowSpacing",
        "displayName": "SC.FlowedLayout.defaultFlowSpacing",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "A set of spacings (left, top, right, bottom) for subviews. Defaults to 0s all around.\n    This is the amount of space that will be before, after, above, and below the view. These\n    spacings do not collapse into each other.\n    \n    You can also set flowSpacing on any child view, or implement flowSpacingForView.",
        "defaultValue": "`{ left: 0, bottom: 0, top: 0, right: 0 }`",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "flowPadding",
        "displayName": "SC.FlowedLayout.flowPadding",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "",
        "defaultValue": "`{ left: 0, bottom: 0, top: 0, right: 0 }`",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldIncludeChildInFlow",
        "displayName": "SC.FlowedLayout.shouldIncludeChildInFlow",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "Determines whether the specified child view should be included in the flow layout.\n    By default, if it has isVisible: NO or useAbsoluteLayout: YES, it will not be included.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "flowSpacingForChild",
        "displayName": "SC.FlowedLayout.flowSpacingForChild",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "Returns the flow spacings for a given view. By default, returns the view's flowSpacing,\n    and if they don't exist, the defaultFlowSpacing for this view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "flowSizeForChild",
        "displayName": "SC.FlowedLayout.flowSizeForChild",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FlowedLayout",
        "overview": "Returns the flow size for a given view, excluding spacing. The default version \n    checks the view's calculatedWidth/Height, then its frame.\n    \n    For spacers, this returns an empty size.",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 35035,
    "name": "FormView",
    "displayName": "SC.FormView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/forms/views/form.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "FormView is a lot like a normal view. However, in addition to the childViews\n  collection, it has a fields collection. The items referenced here are NOT\n  just children; they are explicity stated in the array fields, which works\n  just like childViews, but marks fields to be laid out automatically.\n\n  Usually, you will place rows into the FormView:\n  \n      childViews: \"fullName gender\".w(),\n      contentBinding: 'MyApp.personController',\n\n      fullName: SC.FormView.row(\"Name:\", SC.TextFieldView.extend({\n        layout: {height: 20, width: 150}\n      })),\n\n      gender: SC.FormView.row(\"Gender:\", SC.RadioView.design({\n        layout: {width: 150, height: 40, centerY: 0},\n        items: [\"male\", \"female\"]\n      }))\n\n  The name of the row (ie. 'fullName'), is passed down to the *FieldView, and used as the key\n  to bind the value property to the content. In this case it will bind content.fullName to the\n  value property of the textFieldView. Easy!\n\n  One important thing about the field collection: It can contain any type of\n  view, including other FormViews or subclasses of FormView.\n\n  This is important, because this is how you make nice rows that have a\n  label and a field: these rows are actually subclasses of FormView itself.\n\n  Editing\n  -------\n  \n  The form does not allow editing by default; editing must be started by calling\n  beginEditing.",
    "methods": [
      {
        "name": "init",
        "displayName": "SC.FormView#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Init function.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createChildViews",
        "displayName": "SC.FormView#createChildViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calls _updateFields to load the fields.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "recalculateLabelWidth",
        "displayName": "SC.FormView#recalculateLabelWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calculates the current label width (if labelWidth is not null, it sets using the label width)",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "rowLabelMeasuredSizeDidChange",
        "displayName": "SC.FormView#rowLabelMeasuredSizeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Rows call this when their label width changes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "row",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "labelSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "editsByDefault",
        "displayName": "SC.FormView#editsByDefault",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "Whether to automatically start editing.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "firstKeyView",
        "displayName": "SC.FormView#firstKeyView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "The input key view (to set previousKeyView for the first row, field, or sub-form).\n\n  For fields, this will likely be the field itself.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "lastKeyView",
        "displayName": "SC.FormView#lastKeyView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "The output key view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.FormView#content",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "The content to bind the form to. This content object is passed to all children.\n  \n  All child views, if added at design time via string-based childViews array, will get their\n  contentValueKey set to their string. Note that SC.RowView passes on its contentValueKey to its\n  child field if it doesn't have its own, and if its isNested property is YES, uses it to find its\n  own content object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleRow",
        "displayName": "SC.FormView#exampleRow",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "Rows in the form do not have to be full objects at load time. They can also be simple hashes\n    which are then passed to exampleRow.extend.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRowDelegate",
        "displayName": "SC.FormView#isRowDelegate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "Allows rows to use this to track label width.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "labelWidth",
        "displayName": "SC.FormView#labelWidth",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.FormView",
        "overview": "The manually specified label width (null to automatically calculate, which is the default).",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 46987,
    "name": "Freezable",
    "displayName": "SC.Freezable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/freezable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The SC.Freezable mixin implements some basic methods for marking an object\n  as frozen.  Once an object is frozen it should be read only.  No changes\n  may be made the internal state of the object.\n\n  Enforcement\n  ---\n\n  To fully support freezing in your subclass, you must include this mixin and\n  override any method that might alter any property on the object to instead\n  raise an exception.  You can check the state of an object by checking the\n  isFrozen property.\n\n  Although future versions of JavaScript may support language-level freezing\n  object objects, that is not the case today.  Even if an object is freezable,\n  it is still technically possible to modify the object, even though it could\n  break other parts of your application that do not expect a frozen object to\n  change.  It is, therefore, very important that you always respect the\n  isFrozen property on all freezable objects.\n\n  Example\n\n  The example below shows a simple object that implement the SC.Freezable\n  protocol.\n\n        Contact = SC.Object.extend(SC.Freezable, {\n\n          firstName: null,\n\n          lastName: null,\n\n          // swaps the names\n          swapNames: function() {\n            if (this.get('isFrozen')) throw SC.FROZEN_ERROR;\n            var tmp = this.get('firstName');\n            this.set('firstName', this.get('lastName'));\n            this.set('lastName', tmp);\n            return this;\n          }\n\n        });\n\n        c = Context.create({ firstName: \"John\", lastName: \"Doe\" });\n        c.swapNames();  => returns c\n        c.freeze();\n        c.swapNames();  => EXCEPTION\n\n  Copying\n  ---\n\n  Usually the SC.Freezable protocol is implemented in cooperation with the\n  SC.Copyable protocol, which defines a frozenCopy() method that will return\n  a frozen object, if the object implements this method as well.",
    "methods": [
      {
        "name": "freeze",
        "displayName": "SC.Freezable#freeze",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Freezes the object.  Once this method has been called the object should\n    no longer allow any properties to be edited.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isFreezable",
        "displayName": "SC.Freezable#isFreezable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Freezable",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isFrozen",
        "displayName": "SC.Freezable#isFrozen",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Freezable",
        "overview": "Set to YES when the object is frozen.  Use this property to detect whether\n    your object is frozen or not.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 47672,
    "name": "Function",
    "displayName": "SC.Function",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/function.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "property",
        "displayName": "SC.Function#property",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Function.prototype.property"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "keys",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "cacheable",
        "displayName": "SC.Function#cacheable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Function.prototype.cacheable"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "idempotent",
        "displayName": "SC.Function#idempotent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Function.prototype.idempotent"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "aFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "enhance",
        "displayName": "SC.Function#enhance",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Function.prototype.enhance"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "observes",
        "displayName": "SC.Function#observes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "Function.prototype.observes"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "propertyPaths",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 36783,
    "name": "Gesturable",
    "displayName": "SC.Gesturable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/gestureable.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "You can mix in SC.Gesturable to your views to add some support for recognizing\n  gestures.\n  \n  SproutCore views have built-in touch events. However, sometimes you may want\n  to recognize gestures like tap, pinch, swipe, etc. This becomes tedious if you\n  need to do this often, and moreso if you need to check for multiple possible\n  gestures on the same view.\n  \n  SC.Gesturable allows you to define a collection of gestures (SC.Gesture objects)\n  that your view should recognize. When a gesture is recognized, methods will be\n  called on the view:\n  \n    - [gestureName](gesture, args...): called when the gesture has occurred. This is \n      useful for event-style gestures, where you aren't interested in when it starts or\n      ends, but just that it has occurred. SC.SwipeGesture triggers this after the\n      swipe has moved a minimum amountâ40px by default.\n    - [gestureName]Start(gesture, args...): called when the gesture is first recognized. \n      For instance, a swipe gesture may be recognized after the finger has moved a \n      minimum distance in a horizontal.\n    - [gestureName]Changed(gesture, args...): called when some property of the gesture \n      has changed. For instance, this may be called continuously as the user swipes as \n      the swipe's distance changes.\n    - [gestureName]Cancelled(gesture, args...): called when a gesture, for one reason \n      or another, is no longer recognized. For instance, a horizontal swipe gesture \n      could cancel if the user moves too far in a vertical direction.\n    - [gestureName]End(gesture, args...): called when a gesture ends. A swipe would end\n      when the user lifts their finger.\n  \n  Each of these methods is passed the gesture instance, in addition to any arguments\n  the gesture sends for your convenience. The default swipe gesture sends an SC.Touch\n  instance, the swipe direction, and the distance the swipe has moved in that direction.\n  \n  Using SC.Gesturable\n  -------------------\n  \n  To make your view recognize gestures, mix in Gesturable and add items to the 'gestures'\n  property:\n  \n      SC.View.extend(SC.Gesturable, {\n        gestures: [SC.PinchGesture, 'mySwipeGesture'],\n        \n        // specifying as a string allows you to configure it:\n        mySwipeGesture: SC.SwipeGesture.extend({\n          direction: SC.SWIPE_VERTICAL,\n          startDistance: 3,\n          swipeDistance: 20\n        }),\n        \n        // handle the swipe action\n        swipe: function(touch, direction) {\n          console.error(\"Swiped! In direction: \" + direction);\n        },\n        \n        swipeStart: function(touch, direction, delta) {\n          console.error(\"Swipe started in direction: \" + direction + \"; dist: \" + delta);\n        },\n        \n        swipeChanged: function(touch, direction, delta) {\n          console.error(\"Swipe continued in direction: \" + direction + \"; dist: \" + delta);\n        },\n        \n        swipeEnd: function(touch, direction, delta) {\n          console.error(\"Completed swipe in direction: \" + direction + \"; dist: \" + delta);\n        }\n        \n      })",
    "methods": [
      {
        "name": "touchStart",
        "displayName": "SC.Gesturable.touchStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handles touch start by handing it to the gesture recognizing code.\n    \n    If you override touchStart, you will need to call gestureTouchStart to\n    give the gesture system control of the touch. You will continue to get\n    events until if and when a gesture decides to take \"posession\" of a touchâ\n    at this point, you will get a [gestureName]Start event.\n    \n    You do not have to call gestureTouchStart immediately; you can call it\n    at any time. This allows you to avoid passing control until _after_ you\n    have determined your own touchStart, touchesDragged, and touchEnd methods\n    are not going to handle it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesDragged",
        "displayName": "SC.Gesturable.touchesDragged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tells the gesture recognizing code about touches moving.\n    \n    If you override touchesDragged, you will need to call gestureTouchesDragged\n    (at least for any touches you called gestureTouchStart for in touchStart) to \n    allow the gesture system to update.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchEnd",
        "displayName": "SC.Gesturable.touchEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tells the gesture recognizing code about a touch ending.\n    \n    If you override touchEnd, you will need to call gestureTouchEnd\n    for any touches you called touchStart for.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "gestureTouchStart",
        "displayName": "SC.Gesturable.gestureTouchStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tells the gesture recognizing system about a new touch.\n    \n    This informs all gestures that a new touch, \"unassigned\" to any gesture,\n    has been located. Later, each gesture has an opportunity to claim the touch.\n    \n    Once they have claimed the touch, further events will go _directly_ to themâ\n    this view will cease receiving the touchesDragged and will not receive a touchEnd.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "gestureTouchesDragged",
        "displayName": "SC.Gesturable.gestureTouchesDragged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tells the gesture recognition system that some touches have moved.\n    \n    This informs all gestures that these touches have changed. All such touches\n    are \"unassigned\" because all \"assigned\" touches already get sent directly\n    to the gesture.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "gestureTouchEnd",
        "displayName": "SC.Gesturable.gestureTouchEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tells the gesture recognition system that a touch have ended.\n    \n    This informs all of the gestures that the touch ended. The touch is\n    an unassigned touch as, if it were assigned to a gesture, it would have\n    been sent directly to the gesture, bypassing this view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 37576,
    "name": "Gesture",
    "displayName": "SC.Gesture",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/gesture.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "An SC.Gesture analyzes SC.Touch objects and determines if they are part\n  of a gesture. If they are, SC.Gestures keep the views that own them up-to-date\n  as that gesture progresses, informing it when it starts, when some aspect of\n  it changes, when it ends, andâfor convenienceâwhen it is considered to have\n  been \"triggered\".\n  \n  Gestures can call the following methods on their views:\n  \n  - [gestureName](gesture, args...): called when the gesture has occurred. This is \n    useful for event-style gestures, where you aren't interested in when it starts or\n    ends, but just that it has occurred. SC.SwipeGesture triggers this after the\n    swipe has moved a minimum amountâ40px by default.\n\n  - [gestureName]Start(gesture, args...): called when the gesture is first recognized. \n    For instance, a swipe gesture may be recognized after the finger has moved a \n    minimum distance in a horizontal.\n    \n  - [gestureName]Changed(gesture, args...): called when some property of the gesture \n    has changed. For instance, this may be called continuously as the user swipes as \n    the swipe's distance changes.\n  \n  - [gestureName]Cancelled(gesture, args...): called when a gesture, for one reason \n    or another, is no longer recognized. For instance, a horizontal swipe gesture \n    could cancel if the user moves too far in a vertical direction.\n  \n  - [gestureName]End(gesture, args...): called when a gesture ends. A swipe would end\n    when the user lifts their finger.\n  \n  Gesture Lifecycle\n  ------------------------\n  Gestures start receiving events when their viewâusually mixing in SC.Gesturableâtells it\n  about activities with \"unassigned\" touches. \"Unassigned\" touches are touches that have\n  not _yet_ been assigned to a gesture.\n  \n  The touch becomes \"assigned\" when the gesture's touchIsInGesture method returns YES.\n  When a tocuh is assigned to a gesture, the gesture becomes the touch's touch responder;\n  this means that it will receive a touchStart event (to which it must return YES), and\n  then, all further touch events will be sent _directly_ to the gestureâthe gesture's view\n  will not receive them at all.\n  \n  At any point, the gesture may tell the view that it has started, ended, or changed. In\n  addition, the gesture may tell the view it has been \"triggered.\" A gesture is not\n  necessarily \"triggered\" when it starts and ends; for instance, a swipe gesture might\n  only be triggered if the swipe moves more than a specified amount. The ability to track\n  when the gesture has been triggered allows views to easily handle the gesture as its own\n  event, rather than as the individual events that are part of it.\n  \n  If, at some point, the gesture must release the touch back (perhaps the gesture had _thought_\n  the touch was a part of it, but turned out to be incorrect), the release(touch) method releases\n  it back to the view.\n  \n  Exclusivity\n  ---------------------------------\n  The concept described above gives the gestures a way to be either exclusive or inclusive as-needed:\n  they can choose to take exclusive control of a touch if they think it is theirs, but if they are\n  not sure, they can wait and see.\n  \n  Status Object\n  ---------------------------------\n  It is a common need to track some data related to the touch, but without modifying the touch itself.\n  SC.Gesture is able to keep track of simple hashes for you, mapping them to the SC.Touch object,\n  so that you can maintain some state related to the touch.\n  \n  For instance, you could set status.failed in touchesDragged, if a touch that you previously\n  thought may have been part of the gesture turned out not to be, and then check for \n  status.failed in touchIsInGesture, returning NO if present. This would cause the touch\n  to never be considered for your gesture again.\n  \n  touchIsInGesture is called with the status hash provided in the second argument. You may look\n  up the status hash for a touch at any time by calling this.statusForTouch(touch).\n  \n  \n  Implementing a Gesture\n  ---------------------------------\n  To write a gesture, you would generally implement the following methods:\n  \n  - touchIsInGesture: Return YES when the touch isâor is likely enough to be that you\n    want your gesture to have exclusive control over the touch. You usually do not\n    perform much gesture logic hereâinstead, you save it for touchStart, which will\n    get called after you return YES from this method.\n  \n  - touchStart: Return YES to accept control of the touch. If you do not return YES,\n    your gesture will not receive touchesDragged nor touchEnd events. At this point,\n    you may (or may not) wish to tell the view that the gesture has started by using the\n    start(args...) method.\n    \n  - touchesDragged: Use this as you would use it in an SC.View to track the touches\n    assigned to the gesture. At this point, you might want to tell the view that the\n    gesture has updated by using the change(args...) method.\n  \n  - touchEnd: Again, use this like you would in an SC.View to track when touches\n    assigned to the gesture have ended. This is also a potential time to alert the view\n    that the gesture has ended, by using the end(args...) method. Further, this may\n    also be the time to \"trigger\" the gesture.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 27967,
    "name": "GridView",
    "displayName": "SC.GridView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/grid.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ListView"
      }
    ],
    "overview": "A grid view renders a collection of items in a grid of rows and columns.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.GridView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "",
        "defaultValue": "['sc-grid-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layout",
        "displayName": "SC.GridView#layout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [
          "SC.View#layout"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowHeight",
        "displayName": "SC.GridView#rowHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "The common row height for grid items.\n    \n    The value should be an integer expressed in pixels.",
        "defaultValue": "48",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "columnWidth",
        "displayName": "SC.GridView#columnWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "The minimum column width for grid items.  Items will actually\n    be laid out as needed to completely fill the space, but the minimum\n    width of each item will be this value.",
        "defaultValue": "64",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleView",
        "displayName": "SC.GridView#exampleView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "The default example item view will render text-based items.\n    \n    You can override this as you wish.",
        "defaultValue": "SC.LabelView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "insertionOrientation",
        "displayName": "SC.GridView#insertionOrientation",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "Possible values:\n    \n      - SC.HORIZONTAL_ORIENTATION\n      - SC.VERTICAL_ORIENTATION",
        "defaultValue": "SC.HORIZONTAL_ORIENTATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "insertionPointClass",
        "displayName": "SC.GridView#insertionPointClass",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.GridView",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 50642,
    "name": "HistoryState",
    "displayName": "SC.HistoryState",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/statechart/system/history_state.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Michael Cohen",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Represents a history state that can be assigned to a SC.State object's\n  initialSubstate property. \n  \n  If a SC.HistoryState object is assigned to a state's initial substate, \n  then after a state is entered the statechart will refer to the history \n  state object to determine the next course of action. If the state has \n  its historyState property assigned then the that state will be entered, \n  otherwise the default state assigned to history state object will be entered.\n  \n  An example of how to use:\n  \n    stateA: SC.State.design({\n    \n      initialSubstate: SC.HistoryState({\n        defaultState: 'stateB'\n      }),\n      \n      stateB: SC.State.design({ ... }),\n      \n      stateC: SC.State.design({ ... })\n    \n    })",
    "methods": [
      {
        "name": "state",
        "displayName": "SC.HistoryState#state",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used by the statechart during a state transition process. \n    \n    Returns a state to enter based on whether the parent state has\n    its historyState property assigned. If not then this object's\n    assigned default state is returned.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isRecursive",
        "displayName": "SC.HistoryState#isRecursive",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.HistoryState",
        "overview": "Used to indicate if the statechart should recurse the \n    history states after entering the this object's parent state",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultState",
        "displayName": "SC.HistoryState#defaultState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.HistoryState",
        "overview": "The default state to enter if the parent state does not\n    yet have its historyState property assigned to something \n    other than null.\n    \n    The value assigned to this property must be the name of an\n    immediate substate that belongs to the parent state. The\n    statechart will manage the property upon initialization.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28043,
    "name": "ImageButtonView",
    "displayName": "SC.ImageButtonView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/image_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "Provides a button that displays an image instead of the standard button\n  user interface.\n\n  It behaves the same as an SC.ButtonView, but has an image property that\n  should be set to a unique class name.\n\n  For example:\n\n      SC.ImageButtonView.create({\n        action: 'imageButtonWasClicked',\n\n        image: 'my-image-button-icon'\n      });\n\n  You could then add some CSS rule for a normal state:\n\n      $theme.image-button .my-image-button-icon {",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ImageButtonView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageButtonView",
        "overview": "",
        "defaultValue": "['sc-image-button-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "themeName",
        "displayName": "SC.ImageButtonView#themeName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageButtonView",
        "overview": "Unlike SC.ButtonView, SC.ImageButtonView does not have a default theme\n    that needs to be applied for backwards compatibility.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.ImageButtonView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageButtonView",
        "overview": "",
        "defaultValue": "'imageButtonRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.ImageButtonView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageButtonView",
        "overview": "",
        "defaultValue": "['image']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "image",
        "displayName": "SC.ImageButtonView#image",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageButtonView",
        "overview": "A class name that will be applied to the img tag of the button.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37619,
    "name": "imageQueue",
    "displayName": "SC.imageQueue",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/image_queue.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The image queue can be used to control the order of loading images.\n  \n  Images queues are necessary because browsers impose strict limits on the \n  number of concurrent connections that can be open at any one time to any one \n  host. By controlling the order and timing of your loads using this image \n  queue, you can improve the percieved performance of your application by \n  ensuring the images you need most load first.\n  \n  Note that if you use the SC.ImageView class, it will use this image queue \n  for you automatically.\n  \n  ## Loading Images\n  \n  When you need to display an image, simply call the loadImage() method with \n  the URL of the image, along with a target/method callback. The signature of \n  your callback should be:\n  \n      imageDidLoad: function(imageUrl, imageOrError) {\n        //...\n      }\n\n  The \"imageOrError\" parameter will contain either an image object or an error \n  object if the image could not be loaded for some reason.  If you receive an \n  error object, it will be one of SC.IMAGE_ABORTED_ERROR or \n  SC.IMAGE_FAILED_ERROR.\n  \n  You can also optionally specify that the image should be loaded in the \n  background.  Background images are loaded with a lower priority than \n  foreground images.\n  \n  ## Aborting Image Loads\n  \n  If you request an image load but then no longer require the image for some \n  reason, you should notify the imageQueue by calling the releaseImage() \n  method.  Pass the URL, target and method that you included in your original \n  loadImage() request.  \n  \n  If you have requested an image before, you should always call releaseImage() \n  when you are finished with it, even if the image has already loaded.  This \n  will allow the imageQueue to properly manage its own internal resources.\n  \n  This method may remove the image from the queue of images that need or load \n  or it may abort an image load in progress to make room for other images.  If \n  the image is already loaded, this method will have no effect.\n  \n  ## Reloading an Image\n  \n  If you have already loaded an image, the imageQueue will avoid loading the \n  image again.  However, if you need to force the imageQueue to reload the \n  image for some reason, you can do so by calling reloadImage(), passing the \n  URL.\n  \n  This will cause the image queue to attempt to load the image again the next \n  time you call loadImage on it.",
    "methods": [
      {
        "name": "loadImage",
        "displayName": "SC.imageQueue#loadImage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Loads an image from the server, calling your target/method when complete.\n    \n    You should always pass at least a URL and optionally a target/method.  If \n    you do not pass the target/method, the image will be loaded in background \n    priority.  Usually, however, you will want to pass a callback to be \n    notified when the image has loaded.  Your callback should have a signature \n    like:\n\n        imageDidLoad: function(imageUrl, imageOrError) { .. }\n\n    If you do pass a target/method you can optionally also choose to load the \n    image either in the foreground or in the background.  The imageQueue \n    prioritizes foreground images over background images.  This does not impact \n    how many images load at one time.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.imageQueue",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "url",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "isBackgroundFlag",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "releaseImage",
        "displayName": "SC.imageQueue#releaseImage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoke this method when you are finished with an image URL.  If you \n    passed a target/method, you should also pass it here to remove it from\n    the list of callbacks.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.imageQueue",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "url",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reloadImage",
        "displayName": "SC.imageQueue#reloadImage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Forces the image to reload the next time you try to load it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "url",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "loadNextImage",
        "displayName": "SC.imageQueue#loadNextImage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Initiates a load of the next image in the image queue.  Normally you will\n    not need to call this method yourself as it will be initiated \n    automatically when the queue becomes active.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "loadLimit",
        "displayName": "SC.imageQueue#loadLimit",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.imageQueue",
        "overview": "The maximum number of images that can load from a single hostname at any\n    one time.  For most browsers 4 is a reasonable number, though you may \n    tweak this on a browser-by-browser basis.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "activeRequests",
        "displayName": "SC.imageQueue#activeRequests",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.imageQueue",
        "overview": "The number of currently active requests on the queue.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40775,
    "name": "ImageView",
    "displayName": "SC.ImageView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/image.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.InnerFrame"
      }
    ],
    "overview": "Displays an image in the browser.\n\n  The ImageView can be used to efficiently display images in the browser.\n  It includes a built in support for a number of features that can improve\n  your page load time if you use a lot of images including a image loading\n  cache and automatic support for CSS spriting.\n\n  Note that there are actually many controls that will natively include\n  images using an icon property name.",
    "methods": [
      {
        "name": "imageValue",
        "displayName": "SC.ImageView#imageValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "innerFrame",
        "displayName": "SC.ImageView#innerFrame",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The frame for the inner img element or for the canvas to draw within, altered according to the scale\n    and align properties provided by SC.InnerFrame.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "type",
        "displayName": "SC.ImageView#type",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will be one of the following constants: SC.IMAGE_TYPE_URL or\n    SC.IMAGE_TYPE_CSS_CLASS",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "useCanvas",
        "displayName": "SC.ImageView#useCanvas",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "SproutCore 1.5",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The canvas element is more performant than the img element, since we can\n    update the canvas image without causing browser reflow.  As an additional\n    benefit, canvas images are less easily copied, which is generally in line\n    with acting as an 'application'.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "viewDidResize",
        "displayName": "SC.ImageView#viewDidResize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Recalculate our innerFrame if the outer frame has changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "layerDidChange",
        "displayName": "SC.ImageView#layerDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When the layer changes, we need to tell the view to render its stuff\n    as the canvas won't work without this",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "valueIsUrl",
        "displayName": "SC.ImageView.valueIsUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed value looks like an URL and not a CSS class\n  name.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "canLoadInBackground",
        "displayName": "SC.ImageView#canLoadInBackground",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "If YES, this image can load in the background.  Otherwise, it is treated\n    as a foreground image.  If the image is not visible on screen, it will\n    always be treated as a background image.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "image",
        "displayName": "SC.ImageView#image",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "",
        "defaultValue": "SC.BLANK_IMAGE",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.ImageView#localize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "If YES, any specified toolTip will be localized before display.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "status",
        "displayName": "SC.ImageView#status",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "Current load status of the image.\n\n    This status changes as an image is loaded from the server.  If spriting\n    is used, this will always be loaded.  Must be one of the following\n    constants: SC.IMAGE_STATE_NONE, SC.IMAGE_STATE_LOADING,\n    SC.IMAGE_STATE_LOADED, SC.IMAGE_STATE_FAILED",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useImageQueue",
        "displayName": "SC.ImageView#useImageQueue",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "If YES, image view will use the SC.imageQueue to control loading.  This\n    setting is generally preferred.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.ImageView#value",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ImageView",
        "overview": "A url or CSS class name.\n\n    This is the image you want the view to display.  It should be either a\n    url or css class name.  You can also set the content and\n    contentValueKey properties to have this value extracted\n    automatically.\n\n    If you want to use CSS spriting, set this value to a CSS class name.  If\n    you need to use multiple class names to set your icon, separate them by\n    spaces.\n\n    Note that if you provide a URL, it must contain at least one '/' as this\n    is how we autodetect URLs.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 47699,
    "name": "IndexSet",
    "displayName": "SC.IndexSet",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/index_set.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Observable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      }
    ],
    "overview": "A collection of ranges.  You can use an IndexSet to keep track of non-\n  continuous ranges of items in a parent array.  IndexSet's are used for\n  selection, for managing invalidation ranges and other data-propogation.\n\n  Examples\n  ---\n\n        var set = SC.IndexSet.create(ranges) ;\n        set.contains(index);\n        set.add(index, length);\n        set.remove(index, length);\n\n        // uses a backing SC.Array object to return each index\n        set.forEach(function(object) { .. })\n\n        // returns the index\n        set.forEachIndex(function(index) { ... });\n\n        // returns ranges\n        set.forEachRange(function(start, length) { .. });\n\n  Implementation Notes\n  ---\n\n  An IndexSet stores indices on the object.  A positive value great than the\n  index tells you the end of an occupied range.  A negative values tells you\n  the end of an empty range.  A value less than the index is a search\n  accelerator.  It tells you the start of the nearest range.",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.IndexSet#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "To create a set, pass either a start and index or another IndexSet.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "min",
        "displayName": "SC.IndexSet#min",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The first index included in the set or -1.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "firstObject",
        "displayName": "SC.IndexSet#firstObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first index in the set .",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "rangeStartForIndex",
        "displayName": "SC.IndexSet#rangeStartForIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the starting index of the nearest range for the specified\n    index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "starting index"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isEqual",
        "displayName": "SC.IndexSet#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed index set contains the exact same indexes as\n    the receiver.  If you pass any object other than an index set, returns NO.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "another object."
          }
        ]
      },
      {
        "name": "indexBefore",
        "displayName": "SC.IndexSet#indexBefore",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first index in the set before the passed index or null if\n    there are no previous indexes in the set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index or -1"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index to check"
          }
        ]
      },
      {
        "name": "indexAfter",
        "displayName": "SC.IndexSet#indexAfter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first index in the set after the passed index or null if\n    there are no additional indexes in the set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index or -1"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index to check"
          }
        ]
      },
      {
        "name": "contains",
        "displayName": "SC.IndexSet#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the index set contains the named index",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index or range"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "intersects",
        "displayName": "SC.IndexSet#intersects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the index set contains any of the passed indexes.  You\n    can pass a single index, a range or an index set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, range, or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "without",
        "displayName": "SC.IndexSet#without",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new IndexSet without the passed range or indexes.   This is a\n    convenience over simply cloning and removing.  Does some optimizations.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new index set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, range, or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "replace",
        "displayName": "SC.IndexSet#replace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Replace the index set's current content with the passed index set.  This\n    is faster than clearing the index set adding the values again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, Range, or another IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional length of range."
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.IndexSet#add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the specified range of indexes to the set.  You can also pass another\n    IndexSet to union the contents of the index set with the receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, Range, or another IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional length of range."
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.IndexSet#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the specified range of indexes from the set",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, Range, or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional length of range."
          }
        ]
      },
      {
        "name": "clear",
        "displayName": "SC.IndexSet#clear",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clears the set",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "addEach",
        "displayName": "SC.IndexSet#addEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add all the ranges in the passed array.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The list of ranges you want to add"
          }
        ]
      },
      {
        "name": "removeEach",
        "displayName": "SC.IndexSet#removeEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all the ranges in the passed array.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object...",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The list of objects you want to remove"
          }
        ]
      },
      {
        "name": "clone",
        "displayName": "SC.IndexSet#clone",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clones the set into a new set.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "inspect",
        "displayName": "SC.IndexSet#inspect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a string describing the internal range structure.  Useful for\n    debugging.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "forEachRange",
        "displayName": "SC.IndexSet#forEachRange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoke the callback, passing each occuppied range instead of each\n    index.  This can be a more efficient way to iterate in some cases.  The\n    callback should have the signature:\n\n          callback(start, length, indexSet, source) { ... }\n\n    If you pass a target as a second option, the callback will be called in\n    the target context.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The method to run on each iteration"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to call the callback on"
          }
        ]
      },
      {
        "name": "forEachIn",
        "displayName": "SC.IndexSet#forEachIn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the callback for each index within the passed start/length range.\n    Otherwise works just like regular forEach().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "starting index"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "length of range"
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "lengthIn",
        "displayName": "SC.IndexSet#lengthIn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Total number of indexes within the specified range.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "count of indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number|SC.IndexSet",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, range object or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "indexOf",
        "displayName": "SC.IndexSet#indexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first index in the set that matches the passed object.  You\n    must have a source property on the set for this to work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "found index or -1 if not in set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to check"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting point"
          }
        ]
      },
      {
        "name": "lastIndexOf",
        "displayName": "SC.IndexSet#lastIndexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the last index in the set that matches the passed object.  You\n    must have a source property on the set for this to work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "found index or -1 if not in set"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to check"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "startAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional starting point"
          }
        ]
      },
      {
        "name": "forEachObject",
        "displayName": "SC.IndexSet#forEachObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Iterates through the objects at each index location in the set.  You must\n    have a source property on the set for this to work.  The callback you pass\n    will be invoked for each object in the set with the following signature:\n\n          function callback(object, index, source, indexSet) { ... }\n\n    If you pass a target, it will be used when the callback is called.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function to invoke."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional content. otherwise uses window"
          }
        ]
      },
      {
        "name": "addObject",
        "displayName": "SC.IndexSet#addObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds all indexes where the object appears to the set.  If firstOnly is\n    passed, then it will find only the first index and add it.  If  you know\n    the object only appears in the source array one time, firstOnly may make\n    this method faster.\n\n    Requires source to work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to add"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Set to true if you can assume that the first\n       match is the only one"
          }
        ]
      },
      {
        "name": "addObjects",
        "displayName": "SC.IndexSet#addObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds any indexes matching the passed objects.  If firstOnly is passed,\n    then only finds the first index for each object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to add"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Set to true if you can assume that the first\n       match is the only one"
          }
        ]
      },
      {
        "name": "removeObject",
        "displayName": "SC.IndexSet#removeObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all indexes where the object appears to the set.  If firstOnly is\n    passed, then it will find only the first index and add it.  If  you know\n    the object only appears in the source array one time, firstOnly may make\n    this method faster.\n\n    Requires source to work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to add"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Set to true if you can assume that the first\n       match is the only one"
          }
        ]
      },
      {
        "name": "removeObjects",
        "displayName": "SC.IndexSet#removeObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes any indexes matching the passed objects.  If firstOnly is passed,\n    then only finds the first index for each object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects to add"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Set to true if you can assume that the first\n       match is the only one"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isIndexSet",
        "displayName": "SC.IndexSet#isIndexSet",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.IndexSet",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "length",
        "displayName": "SC.IndexSet#length",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.IndexSet",
        "overview": "Total number of indexes contained in the set",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "max",
        "displayName": "SC.IndexSet#max",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.IndexSet",
        "overview": "One greater than the largest index currently stored in the set.  This\n    is sometimes useful when determining the total range of items covering\n    the index set.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "source",
        "displayName": "SC.IndexSet#source",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.IndexSet",
        "overview": "Optionally set the source property on an index set and then you can\n    iterate over the actual object values referenced by the index set.  See\n    indexOf(), lastIndexOf(), forEachObject(), addObject() and removeObject().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LOG_OBSERVING",
        "displayName": "SC.IndexSet#LOG_OBSERVING",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.IndexSet",
        "overview": "Usually observing notifications from IndexSet are not useful, so\n    supress them by default.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36238,
    "name": "InlineTextFieldDelegate",
    "displayName": "SC.InlineTextFieldDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/delegates/inline_text_field.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This is the default InlineEditorDelegate for SC.LabelView. The default editor\n  is an SC.InlineTextFieldView.\n\n  Only one editor is allowed to be active at a time. If another view requests an\n  editor while an editor is already active, the delegate will first attempt to\n  commit the existing editor, then discard it if commit fails, and fail to\n  acquire if the active editor could not be discarded.\n\n  Each time an editor is required, it instantiates it and appends it to the same\n  pane as the view being edited. The editor is responsible for positioning\n  itself correctly in its beginEditing method.",
    "methods": [
      {
        "name": "acquireEditor",
        "displayName": "SC.InlineTextFieldDelegate.acquireEditor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If an editor is currently active, dismisses it by first attempting to commit\n    and if that fails attempting to dismiss. If that fails, the acquire fails\n    and returns null.\n\n    Otherwise, it creates the editor as a child of the client view's pane and\n    returns it.\n\n    The default editor is an SC.InlineTextFieldView. The client view may\n    customize this by setting a different inlineEditor as its exampleEditor\n    property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.InlineEditor",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the editor the label should use to edit"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.InlineEditable",
            "name": "label",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the label that is requesting an editor"
          }
        ]
      },
      {
        "name": "releaseEditor",
        "displayName": "SC.InlineTextFieldDelegate.releaseEditor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cleans up the given editor by simply removing it from the view hierarchy. The\n    client view should null any references to the editor so it may be garbage\n    collected.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "whether the cleanup succeeded"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "editor",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "editor",
        "displayName": "SC.InlineTextFieldDelegate.editor",
        "objectType": "property",
        "propertyType": "SC.InlineTextFieldView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.InlineTextFieldDelegate",
        "overview": "The current shared inline editor.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40846,
    "name": "InlineTextFieldView",
    "displayName": "SC.InlineTextFieldView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/inline_text_field.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TextFieldView"
      }
    ],
    "overview": "The inline text editor is used to display an editable area for controls \n  that are not always editable such as label views and source list views.\n  \n  You generally will not use the inline editor directly but instead will\n  invoke beginEditing() and endEditing() on the views you are \n  editing. If you would like to use the inline editor for your own views, \n  you can do that also by using the editing API described here.\n  \n  ## Using the Inline Editor in Your Own Views\n\n  To use the inlineEditor on a custom view you should mixin SC.InlineEditable on\n  it. SC.InlineTextFieldView is the default editor so you do not need to do any\n  other setup. The class methods beginEditing, commitEditing, and discardEditing\n  still exist for backwards compatibility but should not be used on new views.\n\n      MyProject.MyView = SC.View.extend(SC.InlineEditable, {\n      });\n  \n  ### Starting the Editor\n  \n  The inline editor works by positioning itself over the top of your view \n  with the same offset, width, and font information.\n\n  To start it simply call beginEditing on your view.\n\n      myView.beginEditing();\n  \n  By default, if the inline editor is currently in use elsewhere, it will automatically\n  close itself over there and begin editing for your view instead. This behavior\n  is defined by the inlineEditorDelegate of your view, and can be changed by using\n  one other than the default.\n\n  ## Customizing the editor\n\n  The editor has several parameters that can be used to customize it to your\n  needs. These options should be set on the editor passed to your delegate's (or\n  view's) inlineEditorWillBeginEditing method:\n\n   - `exampleFrame` -- The editors initial frame in viewport coordinates.\n   - `value` -- Initial value of the edit field.\n   - `exampleElement` -- A DOM element to use when copying styles.\n   - `multiline` -- If YES then the hitting return will add to the value instead\n     of exiting the inline editor.\n   - `commitOnBlur` -- If YES then blurring will commit the value, otherwise it\n     will discard the current value.  Defaults to YES.\n   - `validator` -- Validator to be attached to the field.\n\n  For backwards compatibility, calling the class method beginEditing with an\n  options hash will translate the values in the hash to the correct settings on\n  the editor.\n\n  ## Committing or Discarding Changes\n  \n  Normally the editor will automatically commit or discard its changes \n  whenever the user exits the edit mode by pressing enter, escape, or clicking\n  elsewhere on the page. If you need to force the editor to end editing, you can\n  do so by calling commitEditing() or discardEditing():\n  \n      myView.commitEditing();\n      myView.discardEditing();\n  \n  Both methods will try to end the editing context and will call the \n  relevant delegate methods on the inlineEditorDelegate set on your view.\n  \n  Note that it is possible an editor may not be able to commit editing \n  changes because either the delegate disallowed it or because its validator\n  failed.  In this case commitEditing() will return NO.  If you want to\n  end editing anyway, you can discard the editing changes instead by calling\n  discardEditing().  This method will generally succeed unless your delegate\n  refuses it as well.",
    "methods": [
      {
        "name": "blurEditor",
        "displayName": "SC.InlineTextFieldView#blurEditor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the editor loses (or should lose) first responder \n    status to commit or discard editing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "cancel",
        "displayName": "SC.InlineTextFieldView#cancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "invoked when the user presses escape.  Returns true to ignore keystroke",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 40974,
    "name": "LabelView",
    "displayName": "SC.LabelView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/label.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.InlineEditable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.InlineEditorDelegate"
      }
    ],
    "overview": "Displays a static string of text.\n  \n  You use a label view anytime you need to display a static string of text \n  or to display text that may need to be edited using only an inline control.",
    "methods": [
      {
        "name": "hintValue",
        "displayName": "SC.LabelView#hintValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "[RO] The hint value that will actually be displayed.\n    \n    This property is dynamically computed by applying localization \n    and other normalization utilities.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "doubleClick",
        "displayName": "SC.LabelView#doubleClick",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Event dispatcher callback.\n    If isEditable is set to true, opens the inline text editor view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "DOMMouseEvent",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "DOM event"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "inlineEditorDelegate",
        "displayName": "SC.LabelView#inlineEditorDelegate",
        "objectType": "property",
        "propertyType": "SC.Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "The delegate that gets notified of events related to the editing process. Set\n    this to the object you want to handles the lifecycle of the inline editor.\n\n    Defaults to itself.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleEditor",
        "displayName": "SC.LabelView#exampleEditor",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "The exampleInlineTextFieldView property is by default a \n    SC.InlineTextFieldView but it can be set to a customized inline text field\n    view.",
        "defaultValue": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fontWeight",
        "displayName": "SC.LabelView#fontWeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "Specify the font weight for this.  You may pass SC.REGULAR_WEIGHT, or SC.BOLD_WEIGHT.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "escapeHTML",
        "displayName": "SC.LabelView#escapeHTML",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "If true, value will be escaped to avoid scripting attacks.\n    \n    This is a default value that can be overridden by the\n    settings on the owner view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.LabelView#localize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "If true, then the value will be localized.\n    This is a default that can be overidden by the settings in the owner view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "formatter",
        "displayName": "SC.LabelView#formatter",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "Set this to a validator or to a function and the value\n    will be passed through it before being set.\n    \n    This is a default default that can be overidden by the\n    settings in the owner view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.LabelView#value",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "The value of the label.\n    \n    You may also set the value using a content object and a contentValueKey.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hint",
        "displayName": "SC.LabelView#hint",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "The hint to display if no value is set.  Should be used only if isEditable\n    is set to YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.LabelView#icon",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "An optional icon to display to the left of the label.  Set this value\n    to either a CSS class name (for spriting) or an image URL.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "textAlign",
        "displayName": "SC.LabelView#textAlign",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "Set the alignment of the label view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.LabelView#renderDelegateName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "The name of the theme's SC.LabelView render delegate.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayTitle",
        "displayName": "SC.LabelView#displayTitle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.LabelView",
        "overview": "[RO] The value that will actually be displayed.\n    \n    This property is dynamically computed by applying localization, \n    string conversion and other normalization utilities.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 53547,
    "name": "progressRenderDelegate",
    "displayName": "SC.LegacyTheme.progressRenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/themes/legacy_theme/render_delegates/progress.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Renders and updates DOM representations of progress bars.\n  \n  Parameters\n  --------------------------\n  Expects these properties on the data source:\n  \n  - isIndeterminate\n  - isRunning\n  - isEnabled\n  - value (from 0 to 1)\n  \n  There are a few other properties supported for backwards-compatibility\n  with certain ProgressView implementations; these ProgressViews should\n  be updated to match the new API. These properties will trigger deprecation\n  warnings.\n  \n  Theme Constants\n  -------------------------------------\n  Note that, unlike render delegate parameters, which are mostly standardized,\n  the theme constants can vary by the theme and the theme's method of rendering\n  the control.\n  \n  - PROGRESS_ANIMATED_BACKGROUND_MATRIX: Set to the matrix used for \n    background image position for animation. \n    [1st image y-location, offset, total number of images]\n  \n  - PROGRESS_OFFSET_RANGE: The value of the progress inner offset range. \n    Should be the same as width of image. Default it to 24.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 34789,
    "name": "LINE",
    "displayName": "SC.LINE",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/views/drawing.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Evin Grano",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "This View is used by Greenhouse when application is in design mode\n  This is a Drawing View:\n  If you want to draw a new shape you can pass in the information:\n  For a Line:\n\n      {\n        +shape: SC.LINE,\n        +start: {x: 0, y: 0},\n        +end: {x: 100, y: 100},\n        ?style: {\n          ?width: 5,\n          ?color: 'orange' | '#FFA500' | 'rgb(255,165,0)' | 'rgba(255,165,0,1)'\n          ?transparency: 0.2\n        }\n      }\n\n  For a Rectangle:\n\n      {\n        +shape: SC.RECT,\n        +start: {x: 0, y: 0},\n        +size: {width: 100, height: 100},\n        ?type: SC.FILL | SC.STROKE\n        ?style: {\n          ?width: 5,\n          ?color: 'orange' | '#FFA500' | 'rgb(255,165,0)' | 'rgba(255,165,0,1)'\n          ?transparency: 0.2\n        }\n      }\n\n  For a Circle:\n\n      {\n        +shape: SC.CIRCLE,\n        +center: {x: 0, y: 0},\n        +radius: 20,\n        ?type: SC.FILL | SC.STROKE\n        ?style: {\n          ?width: 5,\n          ?color: 'orange' | '#FFA500' | 'rgb(255,165,0)' | 'rgba(255,165,0,1)'\n          ?transparency: 0.2\n        }\n      }\n\n  For a Polygon:\n\n      {\n        +shape: SC.POLY\n        +path: [\n          +{x: 0, y: 0},\n          +{x: 10, y: 10},\n          ?{x: 0, y: 50}\n        ],\n        ?type: SC.FILL | SC.STROKE\n        ?style: {\n          ?width: 5,\n          ?color: 'orange' | '#FFA500' | 'rgb(255,165,0)' | 'rgba(255,165,0,1)'\n          ?transparency: 0.2\n        }\n      }",
    "methods": [],
    "properties": []
  },
  {
    "guid": 28206,
    "name": "ListItemView",
    "displayName": "SC.ListItemView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/list_item.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.InlineEditable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.StaticLayout"
      }
    ],
    "overview": "Many times list items need to display a lot more than just a label of text.\n  You often need to include checkboxes, icons, right icons, extra counts and\n  an action or warning icon to the far right.\n\n  A ListItemView can implement all of this for you in a more efficient way\n  than you might get if you simply put together a list item on your own using\n  views.",
    "methods": [
      {
        "name": "$label",
        "displayName": "SC.ListItemView#$label",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds and retrieves the element containing the label.  This is used\n    for inline editing.  The default implementation returns a CoreQuery\n    selecting any label elements.   If you override renderLabel() you\n    probably need to override this as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "jQuery",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "jQuery object selecting label elements"
          }
        ],
        "params": []
      },
      {
        "name": "computeDragOperations",
        "displayName": "SC.ListItemView#computeDragOperations",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the drag needs to determine which drag operations are\n   valid in a given area.\n\n   Override this method to return an OR'd mask of the allowed drag \n   operations.  If the user drags over a droppable area within another \n   droppable area, the drag will latch onto the deepest view that returns one \n   or more available operations.\n\n   The default implementation returns `SC.DRAG_NONE`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DragOps",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A mask of all the drag operations allowed or \n     SC.DRAG_NONE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current drag object"
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The most recent mouse move event.  Use to get \n     location"
          }
        ]
      },
      {
        "name": "acceptDragOperation",
        "displayName": "SC.ListItemView#acceptDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the user releases the mouse.\n\n   This method gives your drop target one last opportunity to choose to \n   accept the proposed drop operation.  You might use this method to\n   perform fine-grained checks on the drop location, for example.\n   Return true to accept the drop operation.\n\n   The default implementation returns `YES`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if operation is OK, NO to cancel."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag instance managing this drag"
          },
          {
            "title": "param",
            "type": "DragOp",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed drag operation. A drag constant"
          }
        ]
      },
      {
        "name": "performDragOperation",
        "displayName": "SC.ListItemView#performDragOperation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to actually perform the drag operation.\n\n   Overide this method to actually perform the drag operation.  This method\n   is only called if you returned `YES` in `acceptDragOperation()`.\n\n   Return the operation that was actually performed or `SC.DRAG_NONE` if the\n   operation was aborted.\n\n   The default implementation returns `SC.DRAG_NONE`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DragOp",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Drag Operation actually performed"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag instance managing this drag"
          },
          {
            "title": "param",
            "type": "DragOp",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed drag operation. A drag constant."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ListItemView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "",
        "defaultValue": "['sc-list-item-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.ListItemView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "",
        "defaultValue": "['disclosureState', 'escapeHTML']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.ListItemView#content",
        "objectType": "property",
        "propertyType": "SC.Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "The content object the list item will display.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIndex",
        "displayName": "SC.ListItemView#contentIndex",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "The index of the content object in the ListView to which this\n    ListItemView belongs.\n\n    For example, if this ListItemView represents the first object\n    in a ListView, this property would be 0.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasContentIcon",
        "displayName": "SC.ListItemView#hasContentIcon",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) True if you want the item view to display an icon.\n\n    If false, the icon on the list item view will be hidden.  Otherwise,\n    space will be left for the icon next to the list item view.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasContentRightIcon",
        "displayName": "SC.ListItemView#hasContentRightIcon",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) True if you want the item view to display a right icon.\n\n    If false, the icon on the list item view will be hidden.  Otherwise,\n    space will be left for the icon next to the list item view.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasContentBranch",
        "displayName": "SC.ListItemView#hasContentBranch",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) True if you want space to be allocated for a branch\n    arrow.\n\n    If false, the space for the branch arrow will be collapsed.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentCheckboxKey",
        "displayName": "SC.ListItemView#contentCheckboxKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) The name of the property used for the checkbox value.\n\n    The checkbox will only be visible if this key is not null.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.ListItemView#icon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "The URL or CSS class name to use for the icon. This is only used if\n    contentIconKey is null, or returns null from the delegate.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIconKey",
        "displayName": "SC.ListItemView#contentIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) Property key to use for the icon url\n\n    This property will be checked on the content object to determine the\n    icon to display.  It must return either a URL or a CSS class name.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rightIcon",
        "displayName": "SC.ListItemView#rightIcon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "The URL or CSS class name to use for the right icon. This is only used if\n    contentRightIconKey is null, or returns null from the delegate.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentRightIconKey",
        "displayName": "SC.ListItemView#contentRightIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) Property key to use for the right icon url\n\n    This property will be checked on the content object to determine the\n    icon to display.  It must return either a URL or a CSS class name.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentValueKey",
        "displayName": "SC.ListItemView#contentValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) The name of the property used for label itself\n\n    If null, then the content object itself will be used..",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "escapeHTML",
        "displayName": "SC.ListItemView#escapeHTML",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "IF true, the label value will be escaped to avoid HTML injection attacks.\n    You should only disable this option if you are sure you will only\n    display content that is already escaped and you need the added\n    performance gain.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentUnreadCountKey",
        "displayName": "SC.ListItemView#contentUnreadCountKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) The name of the property used to find the count of\n    unread items.\n\n    The count will only be visible if this property is not null and the\n    returned value is not 0.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIsBranchKey",
        "displayName": "SC.ListItemView#contentIsBranchKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "(displayDelegate) The name of the property used to determine if the item\n    is a branch or leaf (i.e. if the branch icon should be displayed to the\n    right edge.)\n\n    If this is null, then the branch view will be completely hidden.\n    Otherwise space will be allocated for it.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "outlineIndent",
        "displayName": "SC.ListItemView#outlineIndent",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "Indent to use when rendering a list item with an outline level > 0.  The\n    left edge of the list item will be indented by this amount for each\n    outline level.",
        "defaultValue": "16",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "outlineLevel",
        "displayName": "SC.ListItemView#outlineLevel",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "Outline level for this list item.  Usually set by the collection view.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "disclosureState",
        "displayName": "SC.ListItemView#disclosureState",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "Disclosure state for this list item.  Usually set by the collection view\n    when the list item is created. Possible values:\n    \n      - SC.LEAF_NODE\n      - SC.BRANCH_OPEN\n      - SC.BRANCH_CLOSED",
        "defaultValue": "SC.LEAF_NODE",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "validator",
        "displayName": "SC.ListItemView#validator",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "The validator to use for the inline text field created when the list item\n    is edited.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIsEditable",
        "displayName": "SC.ListItemView#contentIsEditable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "Determines if content is editable or not. Checkboxes and other related\n    components will render disabled if an item is not editable.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "inlineEditorDelegate",
        "displayName": "SC.ListItemView#inlineEditorDelegate",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListItemView",
        "overview": "",
        "defaultValue": "SC.InlineTextFieldDelegate",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28050,
    "name": "ListView",
    "displayName": "SC.ListView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/list.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionView"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionRowDelegate"
      }
    ],
    "overview": "A list view renders vertical lists of items.  It is a specialized form of\n  collection view that is simpler than the table view, but more refined than\n  a generic collection.\n  \n  You can use a list view just like a collection view, except that often you\n  also should provide a default rowHeight.  Setting this value will allow \n  the ListView to optimize its rendering.\n  \n  ## Variable Row Heights\n\n  Normally you set the row height through the rowHeight property.  You can \n  also support custom row heights by implementing the \n  contentCustomRowHeightIndexes property to return an index set.\n  \n  ## Using ListView with Very Large Data Sets\n  \n  ListView implements incremental rendering, which means it will only render\n  HTML for the items that are current visible on the screen.  You can use it\n  to efficiently render lists with 100K+ items very efficiently.  \n  \n  If you need to work with very large lists of items, however, be aware that\n  calculate variable rows heights can become very expensive since the list \n  view will essentially have to iterate over every item in the collection to\n  collect its row height.  \n  \n  To work with very large lists, you should consider making your row heights\n  uniform.  This will allow the list view to efficiently render content \n  without worrying about the overall performance.\n  \n  Alternatively, you may want to consider overriding the \n  offsetForRowAtContentIndex() and heightForRowAtContentIndex() methods to \n  perform some faster calculations that do not require inspecting every \n  item in the collection.\n  \n  Note that row heights and offsets are cached so once they are calculated\n  the list view will be able to display very quickly.\n  \n  (Can we also have an 'estimate row heights' property that will simply \n  cheat for very long data sets to make rendering more efficient?)",
    "methods": [
      {
        "name": "rowOffsetForContentIndex",
        "displayName": "SC.ListView#rowOffsetForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the top offset for the specified content index.  This will take\n    into account any custom row heights and group views.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the row offset"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "rowHeightForContentIndex",
        "displayName": "SC.ListView#rowHeightForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the row height for the specified content index.  This will take\n    into account custom row heights and group rows.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the row height"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "content index"
          }
        ]
      },
      {
        "name": "rowHeightDidChangeForIndexes",
        "displayName": "SC.ListView#rowHeightDidChangeForIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever a row height has changed in one or more indexes.\n    This will invalidate the row height cache and reload the content indexes.\n    Pass either an index set or a single index number.\n\n    This method is called automatically whenever you change the rowHeight\n    or customRowHeightIndexes properties on the collectionRowDelegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ListView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet|Number",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "computeLayout",
        "displayName": "SC.ListView#computeLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The layout for a ListView is computed from the total number of rows \n    along with any custom row heights.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "layoutForContentIndex",
        "displayName": "SC.ListView#layoutForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the layout for a specific content index by combining the current\n    row heights.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "layout hash for the index provided"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "contentIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexesInRect",
        "displayName": "SC.ListView#contentIndexesInRect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return an IndexSet with the indexes that are at least \n    partially visible in the passed rectangle.  This method is used by the \n    default implementation of computeNowShowing() to determine the new \n    nowShowing range after a scroll.\n    \n    Override this method to implement incremental rendering.\n    \n    The default simply returns the current content length.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "now showing indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "rect",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the visible rect or a point"
          }
        ]
      },
      {
        "name": "showInsertionPoint",
        "displayName": "SC.ListView#showInsertionPoint",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.CollectionView#showInsertionPoint"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default implementation will show an insertion point",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "itemView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "dropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hideInsertionPoint",
        "displayName": "SC.ListView#hideInsertionPoint",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.CollectionView#hideInsertionPoint"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "insertionIndexForLocation",
        "displayName": "SC.ListView#insertionIndexForLocation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.CollectionView.insertionIndexForLocation"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Compute the insertion index for the passed location.  The location is \n    a point, relative to the top/left corner of the receiver view.  The return\n    value is an index plus a dropOperation, which is computed as such:\n    \n      - if outlining is not used and you are within 5px of an edge, DROP_BEFORE\n        the item after the edge.\n      - if outlining is used and you are within 5px of an edge and the previous\n        item has a different outline level then the next item, then DROP_AFTER\n        the previous item if you are closer to that outline level.\n      - if dropOperation = SC.DROP_ON and you are over the middle of a row, then\n        use DROP_ON.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "dropOperation",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ListView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListView",
        "overview": "",
        "defaultValue": "['sc-list-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.ListView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "showAlternatingRows",
        "displayName": "SC.ListView#showAlternatingRows",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListView",
        "overview": "If set to YES, the default theme will show alternating rows\n    for the views this ListView created through exampleView property.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowDelegate",
        "displayName": "SC.ListView#rowDelegate",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListView",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "insertionPointView",
        "displayName": "SC.ListView#insertionPointView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ListView",
        "overview": "Default view class used to draw an insertion point.  The default \n    view will show a vertical line.  Any view you create\n    should expect an outlineLevel property set, which should impact your left\n    offset.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48053,
    "name": "Logger",
    "displayName": "SC.Logger",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/logger.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Colin Campbell, Benedikt BÃ¶hm, William Kakes",
    "see": [
      "<a href=\"http://getfirebug.com/logging.html\">Firebug Logging Reference</a>"
    ],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Object to allow for safe logging actions, such as using the browser console.\n  In addition to being output to the console, logs can be optionally recorded\n  in memory, to be accessed by your application as appropriate.\n\n  This class also adds in the concept of a âcurrent log levelâ, which allows\n  your application to potentially determine a subset of logging messages to\n  output and/or record.  The order of levels is:\n\n    -  debug        SC.LOGGER_LEVEL_DEBUG\n    -  info         SC.LOGGER_LEVEL_INFO\n    -  warn         SC.LOGGER_LEVEL_WARN\n    -  error        SC.LOGGER_LEVEL_ERROR\n\n  All messages at the level or âaboveâ will be output/recorded.  So, for\n  example, if you set the level to 'info', all 'info', 'warn', and 'error'\n  messages will be output/recorded, but no 'debug' messages will be.  Also,\n  there are two separate log levels:  one for output, and one for recording.\n  You may wish to only output, say, 'warn' and above, but record everything\n  from 'debug' on up.  (You can also limit the number log messages to record.)\n\n  This mechanism allows your application to avoid needless output (which has a\n  non-zero cost in many browsers) in the general case, but turning up the log\n  level when necessary for debugging.  Note that there can still be a\n  performance cost for preparing log messages (calling {@link String.fmt},\n  etc.), so itâs still a good idea to be selective about what log messages are\n  output even to 'debug', especially in hot code.\n\n  Similarly, you should be aware that if you wish to log objects without\n  stringification â using the {@link SC.Logger.debugWithoutFmt} variants â and\n  you enable recording, the ârecorded messagesâ array will hold onto a\n  reference to the arguments, potentially increasing the amount of memory\n  used.\n\n  As a convenience, this class also adds some shorthand methods to SC:\n\n    -  SC.debug()   ==>   SC.Logger.debug()\n    -  SC.info()    ==>   SC.Logger.info()\n    -  SC.warn()    ==>   SC.Logger.warn()\n    -  SC.error()   ==>   SC.Logger.error()\n\n  â¦although note that no shorthand versions exist for the less-common\n  functions, such as defining groups.\n\n  The FireFox plugin Firebug was used as a function reference. Please see\n  {@link <a href=\"http://getfirebug.com/logging.html\">Firebug Logging Reference</a>}\n  for further information.",
    "methods": [
      {
        "name": "exists",
        "displayName": "SC.Logger#exists",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property that checks for the existence of the reporter object.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "debug",
        "displayName": "SC.Logger#debug",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs a debug message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    The first argument must be a string, and if there are any additional\n    arguments, it is assumed to be a format string.  Thus, you can (and\n    should) use it like:\n\n        SC.Logger.debug(\"%@:  My debug message\", this);       // good\n\n    â¦and not:\n\n        SC.Logger.debug(\"%@:  My debug message\".fmt(this));        // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the debug() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "A",
            "isOptional": false,
            "defaultValue": "",
            "desc": "message or a format string"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string"
          }
        ]
      },
      {
        "name": "debugWithoutFmt",
        "displayName": "SC.Logger#debugWithoutFmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs a debug message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    Unlike simply debug(), this method does not try to apply String.fmt() to\n    the arguments, and instead passes them directly to the reporter (and\n    stringifies them if recording).  This can be useful if the browser formats\n    a type in a manner more useful to you than you can achieve with\n    String.fmt().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String|Array|Function|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "debugGroup",
        "displayName": "SC.Logger#debugGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new group in the console and/or in the recorded array provided\n    the respective log levels are set to ouput/record 'debug' messages.\n    Every message after this call (at any log level) will be indented for\n    readability until a matching {@link SC.Logger.debugGroupEnd} is invoked,\n    and you can create as many levels as you want.\n\n    Assuming you are using 'debug' messages elsewhere, it is preferable to\n    group them using this method over simply {@link SC.Logger.group} â the log\n    levels could be set such that the 'debug' messages are never seen, and you\n    wouldnât want an empty/needless group!\n\n    You can optionally provide a title for the group.  If there are any\n    additional arguments, the first argument is assumed to be a format string.\n    Thus, you can (and should) use it like:\n\n          SC.Logger.debugGroup(\"%@:  My debug group\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.debugGroup(\"%@:  My debug group\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the debug() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title or format string to display above the group"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string as the title"
          }
        ]
      },
      {
        "name": "debugGroupEnd",
        "displayName": "SC.Logger#debugGroupEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.debugGroup"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a group initiated with {@link SC.Logger.debugGroup}, provided the\n    respective output/recording log levels are set appropriately.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "info",
        "displayName": "SC.Logger#info",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs an informational message to the console and potentially to the\n    recorded array, provided the respective log levels are set appropriately.\n\n    The first argument must be a string, and if there are any additional\n    arguments, it is assumed to be a format string.  Thus, you can (and\n    should) use it like:\n\n          SC.Logger.info(\"%@:  My info message\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.info(\"%@:  My info message\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the info() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "A",
            "isOptional": false,
            "defaultValue": "",
            "desc": "message or a format string"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string"
          }
        ]
      },
      {
        "name": "infoWithoutFmt",
        "displayName": "SC.Logger#infoWithoutFmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs an information message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    Unlike simply info(), this method does not try to apply String.fmt() to\n    the arguments, and instead passes them directly to the reporter (and\n    stringifies them if recording).  This can be useful if the browser formats\n    a type in a manner more useful to you than you can achieve with\n    String.fmt().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String|Array|Function|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "infoGroup",
        "displayName": "SC.Logger#infoGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new group in the console and/or in the recorded array provided\n    the respective log levels are set to ouput/record 'info' messages.\n    Every message after this call (at any log level) will be indented for\n    readability until a matching {@link SC.Logger.infoGroupEnd} is invoked,\n    and you can create as many levels as you want.\n\n    Assuming you are using 'info' messages elsewhere, it is preferable to\n    group them using this method over simply {@link SC.Logger.group} â the log\n    levels could be set such that the 'info' messages are never seen, and you\n    wouldnât want an empty/needless group!\n\n    You can optionally provide a title for the group.  If there are any\n    additional arguments, the first argument is assumed to be a format string.\n    Thus, you can (and should) use it like:\n\n          SC.Logger.infoGroup(\"%@:  My info group\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.infoGroup(\"%@:  My info group\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the info() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title or format string to display above the group"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string as the title"
          }
        ]
      },
      {
        "name": "infoGroupEnd",
        "displayName": "SC.Logger#infoGroupEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.infoGroup"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a group initiated with {@link SC.Logger.infoGroup}, provided the\n    respective output/recording log levels are set appropriately.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "warn",
        "displayName": "SC.Logger#warn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs a warning message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    The first argument must be a string, and if there are any additional\n    arguments, it is assumed to be a format string.  Thus, you can (and\n    should) use it like:\n\n          SC.Logger.warn(\"%@:  My warning message\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.warn(\"%@:  My warning message\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the warn() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "A",
            "isOptional": false,
            "defaultValue": "",
            "desc": "message or a format string"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string"
          }
        ]
      },
      {
        "name": "warnWithoutFmt",
        "displayName": "SC.Logger#warnWithoutFmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs a warning message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    Unlike simply warn(), this method does not try to apply String.fmt() to\n    the arguments, and instead passes them directly to the reporter (and\n    stringifies them if recording).  This can be useful if the browser formats\n    a type in a manner more useful to you than you can achieve with\n    String.fmt().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String|Array|Function|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "warnGroup",
        "displayName": "SC.Logger#warnGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new group in the console and/or in the recorded array provided\n    the respective log levels are set to ouput/record 'warn' messages.\n    Every message after this call (at any log level) will be indented for\n    readability until a matching {@link SC.Logger.warnGroupEnd} is invoked,\n    and you can create as many levels as you want.\n\n    Assuming you are using 'warn' messages elsewhere, it is preferable to\n    group them using this method over simply {@link SC.Logger.group} â the log\n    levels could be set such that the 'warn' messages are never seen, and you\n    wouldnât want an empty/needless group!\n\n    You can optionally provide a title for the group.  If there are any\n    additional arguments, the first argument is assumed to be a format string.\n    Thus, you can (and should) use it like:\n\n          SC.Logger.warnGroup(\"%@:  My warn group\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.warnGroup(\"%@:  My warn group\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the warn() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title or format string to display above the group"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string as the title"
          }
        ]
      },
      {
        "name": "warnGroupEnd",
        "displayName": "SC.Logger#warnGroupEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.warnGroup"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a group initiated with {@link SC.Logger.warnGroup}, provided the\n    respective output/recording log levels are set appropriately.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "error",
        "displayName": "SC.Logger#error",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs an error message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    The first argument must be a string, and if there are any additional\n    arguments, it is assumed to be a format string.  Thus, you can (and\n    should) use it like:\n\n          SC.Logger.error(\"%@:  My error message\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.warn(\"%@:  My error message\".fmt(this));    // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the warn() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "A",
            "isOptional": false,
            "defaultValue": "",
            "desc": "message or a format string"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string"
          }
        ]
      },
      {
        "name": "errorWithoutFmt",
        "displayName": "SC.Logger#errorWithoutFmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs an error message to the console and potentially to the recorded\n    array, provided the respective log levels are set appropriately.\n\n    Unlike simply error(), this method does not try to apply String.fmt() to\n    the arguments, and instead passes them directly to the reporter (and\n    stringifies them if recording).  This can be useful if the browser formats\n    a type in a manner more useful to you than you can achieve with\n    String.fmt().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String|Array|Function|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "errorGroup",
        "displayName": "SC.Logger#errorGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new group in the console and/or in the recorded array provided\n    the respective log levels are set to ouput/record 'error' messages.\n    Every message after this call (at any log level) will be indented for\n    readability until a matching {@link SC.Logger.errorGroupEnd} is invoked,\n    and you can create as many levels as you want.\n\n    Assuming you are using 'error' messages elsewhere, it is preferable to\n    group them using this method over simply {@link SC.Logger.group} â the log\n    levels could be set such that the 'error' messages are never seen, and you\n    wouldnât want an empty/needless group!\n\n    You can optionally provide a title for the group.  If there are any\n    additional arguments, the first argument is assumed to be a format string.\n    Thus, you can (and should) use it like:\n\n          SC.Logger.errorGroup(\"%@:  My error group\", this);       // good\n\n    â¦and not:\n\n          SC.Logger.errorGroup(\"%@:  My error group\".fmt(this));   // bad\n\n    The former method can be more efficient because if the log levels are set\n    in such a way that the error() invocation will be ignored, then the\n    String.fmt() call will never actually be performed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title or format string to display above the group"
          },
          {
            "title": "param",
            "type": "â¦",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Other arguments to pass to String.fmt() when using a format string as the title"
          }
        ]
      },
      {
        "name": "errorGroupEnd",
        "displayName": "SC.Logger#errorGroupEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.errorGroup"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a group initiated with {@link SC.Logger.errorGroup}, provided the\n    respective output/recording log levels are set appropriately.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "outputRecordedLogMessages",
        "displayName": "SC.Logger#outputRecordedLogMessages",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will output all recorded log messages to the reporter.  This\n    provides a convenient way to see the messages âon-demandâ without having\n    to have them always output.  The timestamp of each message will be\n    included as a prefix if you specify 'includeTimestamps' as YES, although\n    in some browsers the native group indenting can make the timestamp\n    formatting less than ideal.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Whether to include timestamps in the output"
          }
        ]
      },
      {
        "name": "stringifyRecordedLogMessages",
        "displayName": "SC.Logger#stringifyRecordedLogMessages",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will return a string representation of all recorded log\n    messages to the reporter, which can be convenient for saving logs and so\n    forth.  The timestamp of each message will be included in the string.\n\n    If there are no recorded log messages, an empty string will be returned\n    (as opposed to null).",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "log",
        "displayName": "SC.Logger#log",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Log output to the console, but only if it exists.\n\n    IMPORTANT:  Unlike debug(), info(), warn(), and error(), messages sent to\n    this method do not consult the log level and will always be output.\n    Similarly, they will never be recorded.\n\n    In general, you should avoid this method and instead choose the\n    appropriate categorization for your message, choosing the appropriate\n    method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Whether or not anything was logged"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Array|Function|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "group",
        "displayName": "SC.Logger#group",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Every log after this call until {@link SC.Logger.groupEnd} is called\n    will be indented for readability.  You can create as many levels\n    as you want.\n\n    IMPORTANT:  Unlike debugGroup(), infoGroup(), warnGroup(), and\n    errorGroup(), this method do not consult the log level and will always\n    result in output when the reporter supports it.  Similarly, group messages\n    logged via this method will never be recorded.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An optional title to display above the group"
          }
        ]
      },
      {
        "name": "groupEnd",
        "displayName": "SC.Logger#groupEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.group"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a group declared with {@link SC.Logger.group}.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "dir",
        "displayName": "SC.Logger#dir",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Outputs the properties of an object.\n\n    Logs the object using {@link SC.Logger.log} if the reporter.dir function\n    does not exist.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "dirxml",
        "displayName": "SC.Logger#dirxml",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Prints an XML outline for any HTML or XML object.\n\n    Logs the object using {@link SC.Logger.log} if reporter.dirxml function\n    does not exist.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "profile",
        "displayName": "SC.Logger#profile",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins the JavaScript profiler, if it exists. Call {@link SC.Logger.profileEnd}\n    to end the profiling process and receive a report.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if reporter.profile exists, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title to associate with the profile"
          }
        ]
      },
      {
        "name": "profileEnd",
        "displayName": "SC.Logger#profileEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.profile"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends the JavaScript profiler, if it exists.  If you specify a title, the\n    profile with that title will be ended.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if reporter.profileEnd exists, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A title to associate with the profile"
          }
        ]
      },
      {
        "name": "time",
        "displayName": "SC.Logger#time",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.timeEnd"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Measure the time between when this function is called and\n    {@link SC.Logger.timeEnd} is called.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if reporter.time exists, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "The",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name of the profile to begin"
          }
        ]
      },
      {
        "name": "timeEnd",
        "displayName": "SC.Logger#timeEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.Logger.time"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends the profile specified.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if reporter.timeEnd exists, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "The",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name of the profile to end"
          }
        ]
      },
      {
        "name": "trace",
        "displayName": "SC.Logger#trace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Prints a stack-trace.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if reporter.trace exists, NO otherwise"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "logOutputLevel",
        "displayName": "SC.Logger#logOutputLevel",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "The current log level determining what is output to the reporter object\n    (usually your browserâs console).  Valid values are:\n\n      -  SC.LOGGER_LEVEL_DEBUG\n      -  SC.LOGGER_LEVEL_INFO\n      -  SC.LOGGER_LEVEL_WARN\n      -  SC.LOGGER_LEVEL_ERROR\n      -  SC.LOGGER_LEVEL_NONE\n\n    If you do not specify this value, it will default to SC.LOGGER_LEVEL_DEBUG\n    when running in development mode and SC.LOGGER_LEVEL_INFO when running in\n    production mode.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "logRecordingLevel",
        "displayName": "SC.Logger#logRecordingLevel",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "The current log level determining what is output to the reporter object\n    (usually your browserâs console).  Valid values are the same as with\n    'logOutputLevel':\n\n      -  SC.LOGGER_LEVEL_DEBUG\n      -  SC.LOGGER_LEVEL_INFO\n      -  SC.LOGGER_LEVEL_WARN\n      -  SC.LOGGER_LEVEL_ERROR\n      -  SC.LOGGER_LEVEL_NONE\n\n    If you do not specify this value, it will default to SC.LOGGER_LEVEL_NONE.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordedLogMessages",
        "displayName": "SC.Logger#recordedLogMessages",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "All recorded log messages.  You generally should not need to interact with\n    this array, as most commonly-used functionality can be achieved via the\n    {@link SC.Logger.outputRecordedLogMessages} and\n    {@link SC.Logger.stringifyRecordedLogMessages} methods.\n\n    This array will be lazily created when the first message is recorded.\n\n    Format:\n\n    For efficiency, each entry in the array is a simple hash rather than a\n    full SC.Object instance.  Furthermore, to minimize memory usage, niceties\n    like âtype of entry: messageâ are avoided; if you need to parse this\n    structure, you can determine which type of entry youâre looking at by\n    checking for the 'message' and 'indentation' fields.\n<pre>\n    Log entry:\n    {\n      type:               {Constant}     (SC.LOGGER_LEVEL_DEBUG, etc.)\n      message:            {String | Boolean}\n      originalArguments:  {Arguments}    // optional\n      timestamp:          {Date}\n    }\n    \n    Group entry (either beginning or end of):\n    {\n      type:         {Constant}     SC.LOGGER_LEVEL_DEBUG, etc.\n      indentation:  {Number}       The value is the new group indentation level\n      beginGroup:   {Boolean}      Whether this entry is the beginning of a new group (as opposed to the end)\n      title:        {String}       Optional for new groups, and never present for end-of-group\n      timestamp:    {Date}\n    }\n</pre>",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordedLogMessagesMaximumLength",
        "displayName": "SC.Logger#recordedLogMessagesMaximumLength",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "If the recording level is set such that messages will be recorded, this is\n    the maximum number of messages that will be saved in the\n    'recordedLogMessages' array.  Any further recorded messages will push\n    older messages out of the array, so the most recent messages will be\n    saved.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordedLogMessagesPruningMinimumLength",
        "displayName": "SC.Logger#recordedLogMessagesPruningMinimumLength",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "If the recording level is set such that messages will be recorded, this is\n    the minimum number of messages that will be saved whenever the recordings\n    are pruned.  (They are pruned whenever you hit the maximum length, as\n    specified via the 'recordedLogMessagesMaximumLength' property.  This\n    mechanism avoids thrashing the array for each log message once the\n    maximum is reached.)  When pruning, the most recent messages will be saved.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "debugEnabled",
        "displayName": "SC.Logger#debugEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "Whether or not to enable debug logging.  This property exists for\n    backwards compatibility with previous versions of SC.Logger.  In newer\n    code, you should instead set the appropriate output/recording log levels.\n\n    If this property is set to YES, it will set 'logOutputLevel' to\n    SC.LOGGER_LEVEL_DEBUG.  Otherwise, it will have no effect.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "fallBackOnAlert",
        "displayName": "SC.Logger#fallBackOnAlert",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "If console.log does not exist, SC.Logger will use window.alert instead\n    when {@link SC.Logger.log} is invoked.\n\n    Note that this property has no effect for messages initiated via the\n    debug/info/warn/error methods, on the assumption that it is better to\n    simply utilize the message recording mechanism than put up a bunch of\n    alerts when there is no browser console.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "reporter",
        "displayName": "SC.Logger#reporter",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Logger",
        "overview": "The reporter is the object which implements the actual logging functions.",
        "defaultValue": "The browserâs console",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6212,
    "name": "MainPane",
    "displayName": "SC.MainPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/panes/main.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Pane"
      }
    ],
    "overview": "Most SproutCore applications have a main pane, which dominates the \n  application page.  You can extend from this view to implement your own main \n  pane.  This class will automatically make itself main whenever you append it \n  to a document, removing any other main pane that might be currently in \n  place.  If you do have another already focused as the keyPane, this view \n  will also make itself key automatically.  The default way to use the main \n  pane is to simply add it to your page like this:\n  \n      SC.MainPane.create().append();\n  \n  This will cause your root view to display.  The default layout for a \n  MainPane is to cover the entire document window and to resize with the \n  window.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 15307,
    "name": "ManyArray",
    "displayName": "SC.ManyArray",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/many_array.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Array"
      }
    ],
    "overview": "A `ManyArray` is used to map an array of record ids back to their \n  record objects which will be materialized from the owner store on demand.\n  \n  Whenever you create a `toMany()` relationship, the value returned from the \n  property will be an instance of `ManyArray`.  You can generally customize the\n  behavior of ManyArray by passing settings to the `toMany()` helper.",
    "methods": [
      {
        "name": "store",
        "displayName": "SC.ManyArray#store",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The store that owns this record array.  All record arrays must have a\n    store to function properly.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "storeKey",
        "displayName": "SC.ManyArray#storeKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The `storeKey` for the parent record of this many array.  Editing this \n    array will place the parent record into a `READY_DIRTY` state.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "readOnlyStoreIds",
        "displayName": "SC.ManyArray#readOnlyStoreIds",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the `storeId`s in read-only mode.  Avoids modifying the record \n    unnecessarily.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "editableStoreIds",
        "displayName": "SC.ManyArray#editableStoreIds",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an editable array of `storeId`s.  Marks the owner records as \n    modified.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isEditable",
        "displayName": "SC.ManyArray#isEditable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed from owner many attribute",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "inverse",
        "displayName": "SC.ManyArray#inverse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed from owner many attribute",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isMaster",
        "displayName": "SC.ManyArray#isMaster",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed from owner many attribute",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "orderBy",
        "displayName": "SC.ManyArray#orderBy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed from owner many attribute",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "removeInverseRecord",
        "displayName": "SC.ManyArray#removeInverseRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the `ManyAttribute` whenever a record is removed on the inverse\n    of the relationship.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ManyArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record that was removed"
          }
        ]
      },
      {
        "name": "addInverseRecord",
        "displayName": "SC.ManyArray#addInverseRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the `ManyAttribute` whenever a record is added on the inverse\n    of the relationship.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ManyArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record this array is a part of"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "recordType",
        "displayName": "SC.ManyArray#recordType",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyArray",
        "overview": "`recordType` will tell what type to transform the record to when\n    materializing the record.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "record",
        "displayName": "SC.ManyArray#record",
        "objectType": "property",
        "propertyType": "SC.Record",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyArray",
        "overview": "If set, the record will be notified whenever the array changes so that\n    it can change its own state",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "propertyName",
        "displayName": "SC.ManyArray#propertyName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyArray",
        "overview": "If set will be used by the many array to get an editable version of the\n    storeIds from the owner.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "manyAttribute",
        "displayName": "SC.ManyArray#manyAttribute",
        "objectType": "property",
        "propertyType": "SC.ManyAttribute",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyArray",
        "overview": "The `ManyAttribute` that created this array.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14863,
    "name": "ManyAttribute",
    "displayName": "SC.ManyAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/many_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.RecordAttribute"
      }
    ],
    "overview": "ManyAttribute is a subclass of `RecordAttribute` and handles to-many \n  relationships.\n  \n  When setting ( `.set()` ) the value of a `toMany` attribute, make sure\n  to pass in an array of `SC.Record` objects.\n  \n  There are many ways you can configure a `ManyAttribute`:\n  \n      contacts: SC.Record.toMany('MyApp.Contact', { \n        inverse: 'group', // set the key used to represent the inverse \n        isMaster: YES|NO, // indicate whether changing this should dirty\n        transform: function(), // transforms value <=> storeKey,\n        isEditable: YES|NO, make editable or not,\n        through: 'taggings' // set a relationship this goes through\n      });",
    "methods": [
      {
        "name": "inverseDidRemoveRecord",
        "displayName": "SC.ManyAttribute#inverseDidRemoveRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by an inverse relationship whenever the receiver is no longer part\n    of the relationship.  If this matches the inverse setting of the attribute\n    then it will update itself accordingly.\n\n    You should never call this directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record owning this attribute"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key for this attribute"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record that was removed from inverse"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key on inverse that was modified"
          }
        ]
      },
      {
        "name": "inverseDidAddRecord",
        "displayName": "SC.ManyAttribute#inverseDidAddRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by an inverse relationship whenever the receiver is added to the \n    inverse relationship.  This will set the value of this inverse record to \n    the new record.\n    \n    You should never call this directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record owning this attribute"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key for this attribute"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record that was added to inverse"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key on inverse that was modified"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "inverse",
        "displayName": "SC.ManyAttribute#inverse",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyAttribute",
        "overview": "Set the foreign key on content objects that represent the inversion of\n    this relationship. The inverse property should be a `toOne()` or\n    `toMany()` relationship as well. Modifying this many array will modify\n    the `inverse` property as well.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMaster",
        "displayName": "SC.ManyAttribute#isMaster",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyAttribute",
        "overview": "If `YES` then modifying this relationships will mark the owner record \n    dirty. If set to `NO`, then modifying this relationship will not alter\n    this record.  You should use this property only if you have an inverse \n    property also set. Only one of the inverse relationships should be marked\n    as master so you can control which record should be committed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orderBy",
        "displayName": "SC.ManyAttribute#orderBy",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ManyAttribute",
        "overview": "If set and you have an inverse relationship, will be used to determine the\n    order of an object when it is added to an array. You can pass a function\n    or an array of property keys.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28428,
    "name": "MasterDetailView",
    "displayName": "SC.MasterDetailView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/master_detail.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.2",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Master/Detail view is a simple view which manages a master view and a detail view.\n  This is not all that different from a SplitView, except that, for the moment (this\n  will hopefully change when SplitView becomes more palatable) the split point is not \n  actually changeable and the split is always vertical.\n  \n  So, why use it when it is limited? Well, simple: it can hide the left side. Completely.\n  As in, there will be no split divider anymore. There will be no nothing. It will be gone.\n  Removed from DOM. Gone on to meet its maker, bereft of life, it rests in peace. If it weren't\n  for the possibility of opening it up in a picker it would be pushing up the daisies!\n  \n  Yes, it has a built-in option for opening the master portion in a PickerPane. This is THE KILLER\n  FEATURES. It is a command on the view: popupMasterPicker. And it is really really easy to call:\n  make a toolbar button with an action \"popupMasterPicker\". That's it.\n  \n  An interesting feature is that it sets the master and detail views' masterIsVisible settings,\n  allowing them to know if the master is visible.",
    "methods": [
      {
        "name": "toggleMasterPicker",
        "displayName": "SC.MasterDetailView#toggleMasterPicker",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the master is hidden, this toggles the master picker pane.\n    Of course, since pickers are modal, this actually only needs to handle showing.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view to anchor the picker to"
          }
        ]
      },
      {
        "name": "showMasterPicker",
        "displayName": "SC.MasterDetailView#showMasterPicker",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view to anchor the picker to"
          }
        ]
      },
      {
        "name": "showPicker",
        "displayName": "SC.MasterDetailView#showPicker",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.PickerPane",
            "name": "picker",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The picker to popup"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view to anchor the picker to"
          }
        ]
      },
      {
        "name": "hidePicker",
        "displayName": "SC.MasterDetailView#hidePicker",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.PickerPane",
            "name": "picker",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The picker to popup"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.MasterDetailView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "",
        "defaultValue": "['sc-master-detail-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.MasterDetailView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "",
        "defaultValue": "'masterDetailRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "masterView",
        "displayName": "SC.MasterDetailView#masterView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "The master view. For your development pleasure, it defaults to a\n    WorkspaceView with a top toolbar.",
        "defaultValue": "SC.WorkspaceView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "detailView",
        "displayName": "SC.MasterDetailView#detailView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "The detail view. For your development experience, it defaults to holding\n    a top toolbar view with a button that closes/shows master. Come take a peek at\n    the code to see what it looks like--it is so simple.",
        "defaultValue": "SC.WorkspaceView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoHideMaster",
        "displayName": "SC.MasterDetailView#autoHideMaster",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "Whether to automatically hide the master panel in portrait orientation. \n    \n    By default, this property is a computed property based on whether the browser is a touch\n    browser. Your purpose in overriding it is either to disable it from automatically\n    disappearing on iPad and other touch devices, or force it to appear when a desktop\n    browser changes.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "masterWidth",
        "displayName": "SC.MasterDetailView#masterWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "",
        "defaultValue": "250",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "masterIsHidden",
        "displayName": "SC.MasterDetailView#masterIsHidden",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "A property (computed) that says whether the master view is hidden.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orientation",
        "displayName": "SC.MasterDetailView#orientation",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "Tracks the orientation of the view. Possible values:\n    \n      - SC.VERTICAL_ORIENTATION\n      - SC.HORIZONTAL_ORIENTATION",
        "defaultValue": "SC.VERTICAL_ORIENTATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pickerPane",
        "displayName": "SC.MasterDetailView#pickerPane",
        "objectType": "property",
        "propertyType": "SC.PickerPane",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MasterDetailView",
        "overview": "The picker pane class from which to create a picker pane.\n    \n    This defaults to one with a special theme.",
        "defaultValue": "SC.PickerPane",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37718,
    "name": "Math",
    "displayName": "SC.Math",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/math.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Colin Campbell",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Implements some enhancements to the built-in Number object that makes it\n  easier to handle rounding and display of numbers.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 44044,
    "name": "MediaControlsView",
    "displayName": "SC.MediaControlsView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/controls.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "(Document Your View Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 44125,
    "name": "MediaSlider",
    "displayName": "SC.MediaSlider",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/media_slider.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "(Document Your View Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 28505,
    "name": "MenuItemView",
    "displayName": "SC.MenuItemView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/menu_item.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "An SC.MenuItemView is created for every item in a menu.",
    "methods": [
      {
        "name": "isChecked",
        "displayName": "SC.MenuItemView#isChecked",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "YES if the menu item should include a check next to it.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasSubMenu",
        "displayName": "SC.MenuItemView#hasSubMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "showSubMenu",
        "displayName": "SC.MenuItemView#showSubMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will check whether the current Menu Item is still\n    selected and then create a submenu accordignly.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "closeParent",
        "displayName": "SC.MenuItemView#closeParent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Close the parent Menu and remove the focus of the current Selected\n    Menu Item",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.MenuItemView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "defaultValue": "['sc-menu-item']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.MenuItemView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "defaultValue": "['title', 'isEnabled', 'isSeparator', 'isChecked']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.MenuItemView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "The WAI-ARIA role for menu items.",
        "defaultValue": "'menuitem'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "escapeHTML",
        "displayName": "SC.MenuItemView#escapeHTML",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.MenuItemView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "blocksIEDeactivate",
        "displayName": "SC.MenuItemView#blocksIEDeactivate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "IE only attribute to block bluring of other controls",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.MenuItemView#isContextMenuEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.MenuItemView#content",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "The content object the menu view will display.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSeparator",
        "displayName": "SC.MenuItemView#isSeparator",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "YES if this menu item represents a separator, NO otherwise.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.MenuItemView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "subMenu",
        "displayName": "SC.MenuItemView#subMenu",
        "objectType": "property",
        "propertyType": "SC.MenuView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "This menu item's submenu, if it exists.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "title",
        "displayName": "SC.MenuItemView#title",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "The title from the content property.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldMeasureSize",
        "displayName": "SC.MenuItemView#shouldMeasureSize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuItemView",
        "overview": "If YES, the menu item will measure its width and height so that the menu\n    can automatically resize itself. This is usually set by the parent menu.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21880,
    "name": "MenuPane",
    "displayName": "SC.MenuPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/menu.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PickerPane"
      }
    ],
    "overview": "`SC.MenuPane` allows you to display a standard menu. Menus appear over other\n  panes, and block input to other views until a selection is made or the pane\n  is dismissed by clicking outside of its bounds.\n\n  You can create a menu pane and manage it yourself, or you can use the\n  `SC.SelectButtonView` and `SC.PopupButtonView` controls to manage the menu for\n  you.\n\n  ## Specifying Menu Items\n\n  The menu pane examines the `items` property to determine what menu items\n  should be presented to the user.\n\n  In its most simple form, you can provide an array of strings. Every item\n  will be converted into a menu item whose title is the string.\n\n  If you need more control over the menu items, such as specifying a keyboard\n  shortcut, enabled state, custom height, or submenu, you can provide an array\n  of content objects.\n\n  Out of the box, the menu pane has some default keys it uses to get\n  information from the objects. For example, to find out the title of the menu\n  item, the menu pane will ask your object for its `title` property. If you\n  need to change this key, you can set the `itemTitleKey` property on the pane\n  itself.\n\n      var menuItems = [\n        { title: 'Menu Item', keyEquivalent: 'ctrl_shift_n' },\n        { title: 'Checked Menu Item', isChecked: YES, keyEquivalent: 'ctrl_a' },\n        { title: 'Selected Menu Item', keyEquivalent: ['backspace', 'delete'] },\n        { isSeparator: YES },\n        { title: 'Menu Item with Icon', icon: 'inbox', keyEquivalent: 'ctrl_m' },\n        { title: 'Menu Item with Icon', icon: 'folder', keyEquivalent: 'ctrl_p' }\n      ];\n\n      var menu = SC.MenuPane.create({\n        items: menuItems\n      });\n\n  ## Observing User Selections\n\n  To determine when a user clicks on a menu item, you can observe the\n  `selectedItem` property for changes.",
    "methods": [
      {
        "name": "popup",
        "displayName": "SC.MenuPane#popup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Makes the menu visible and adds it to the HTML document.\n\n    If you provide a view or element as the first parameter, the menu will\n    anchor itself to the view, and intelligently reposition itself if the\n    contents of the menu exceed the available space.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "anchorViewOrElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view or element to which the menu\n    should anchor."
          },
          {
            "title": "param",
            "type": "Array",
            "name": "(preferMatrix)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The prefer matrix used to position the pane."
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.MenuPane#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the menu from the screen.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.MenuPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "paneDidAttach",
        "displayName": "SC.MenuPane#paneDidAttach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When the pane is attached to a DOM element in the window, set up the\n    view to be visible in the window and register with the `RootResponder`.\n\n    We don't call `sc_super()` here because `PanelPane` sets the current pane to\n    be the key pane when attached.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.MenuPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "becomeMenuPane",
        "displayName": "SC.MenuPane#becomeMenuPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Make the pane the menu pane. When you call this, all key events will\n    temporarily be routed to this pane. Make sure that you call\n    resignMenuPane; otherwise all key events will be blocked to other panes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "resignMenuPane",
        "displayName": "SC.MenuPane#resignMenuPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove the menu pane status from the pane.  This will simply set the \n    `menuPane` on the `rootResponder` to `null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "menuItemViews",
        "displayName": "SC.MenuPane#menuItemViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The array of child menu item views that compose the menu.\n\n    This computed property parses `displayItems` and constructs an\n    `SC.MenuItemView` (or whatever class you have set as the `exampleView`) for every item.\n\n    This calls createMenuItemViews. If you want to override this property, override\n    that method.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createMenuItemViews",
        "displayName": "SC.MenuPane#createMenuItemViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Processes the displayItems and creates menu item views for each item.\n\n    Override this method to change how menuItemViews is calculated.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Array"
          }
        ],
        "params": []
      },
      {
        "name": "menuItemViewForContentIndex",
        "displayName": "SC.MenuPane#menuItemViewForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the menu item view for the content object at the specified index.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.MenuItemView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "instantiated view"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item index"
          }
        ]
      },
      {
        "name": "rootMenu",
        "displayName": "SC.MenuPane#rootMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If this is a submenu, this property corresponds to the\n    top-most parent menu. If this is the root menu, it returns\n    itself.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "displayItems",
        "displayName": "SC.MenuPane#displayItems",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array of normalized display items.\n\n    Because the items property can be provided as either an array of strings,\n    or an object with key-value pairs, or an exotic mish-mash of both, we need\n    to normalize it for our display logic.\n\n    If an `items` member is an object, we can assume it is formatted properly\n    and leave it as-is.\n\n    If an `items` member is a string, we create a hash with the title value\n    set to that string, and some sensible defaults for the other properties.\n\n    As a last resort, if an `items` member is an array, we have a legacy\n    handler that converts the array into a hash. This behavior is deprecated\n    and is not guaranteed to be supported in the future.\n\n    A side effect of running this computed property is that the menuHeight\n    property is updated.\n\n    `displayItems` should never be set directly; instead, set `items` and\n    `displayItems` will update automatically.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.MenuPane#classNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "",
        "defaultValue": "['sc-menu']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.MenuPane#ariaRole",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The WAI-ARIA role for menu pane.",
        "defaultValue": "'menu'",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "items",
        "displayName": "SC.MenuPane#items",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The array of items to display. This can be a simple array of strings,\n    objects or hashes. If you pass objects or hashes, you can also set the\n    various itemKey properties to tell the menu how to extract the information\n    it needs.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "controlSize",
        "displayName": "SC.MenuPane#controlSize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The size of the menu. This will set a CSS style on the menu that can be\n    used by the current theme to style the appearance of the control. This\n    value will also determine the default `itemHeight`, `itemSeparatorHeight`,\n    `menuHeightPadding`, and `submenuOffsetX` if you don't explicitly set these\n    properties.\n\n    Your theme can override the default values for each control size by specifying\n    them in the `menuRenderDelegate`. For example:\n\n        MyTheme.menuRenderDelegate = SC.BaseTheme.menuRenderDelegate.create({\n          'sc-tiny-size': {\n            itemHeight: 20,\n            itemSeparatorHeight: 9,\n            menuHeightPadding: 6,\n            submenuOffsetX: 2\n          }\n        });\n\n    Changing the controlSize once the menu is instantiated has no effect.",
        "defaultValue": "SC.REGULAR_CONTROL_SIZE",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemHeight",
        "displayName": "SC.MenuPane#itemHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The height of each menu item, in pixels.\n\n    You can override this on a per-item basis by setting the (by default)\n    `height` property on your object.\n\n    If you don't specify a value, the item height will be inferred from\n    `controlSize`.",
        "defaultValue": "itemHeight from theme if present, or 20.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemSeparatorHeight",
        "displayName": "SC.MenuPane#itemSeparatorHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The height of separator menu items.\n\n    You can override this on a per-item basis by setting the (by default)\n    `height` property on your object.\n\n    If you don't specify a value, the height of the separator menu items will\n    be inferred from `controlSize`.",
        "defaultValue": "itemSeparatorHeight from theme, or 9.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuHeight",
        "displayName": "SC.MenuPane#menuHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The height of the menu pane. This is updated every time menuItemViews\n    is recalculated.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuHeightPadding",
        "displayName": "SC.MenuPane#menuHeightPadding",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The amount of padding to add to the height of the pane.\n\n    The first menu item is offset by half this amount, and the other half is\n    added to the height of the menu, such that a space between the top and the\n    bottom is created.\n\n    If you don't specify a value, the padding will be inferred from the\n    controlSize.",
        "defaultValue": "menuHeightPadding from theme, or 6",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "submenuOffsetX",
        "displayName": "SC.MenuPane#submenuOffsetX",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The amount of offset x while positioning submenu.\n\n    If you don't specify a value, the padding will be inferred from the\n    controlSize.",
        "defaultValue": "submenuOffsetX from theme, or 2",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selectedItem",
        "displayName": "SC.MenuPane#selectedItem",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The last menu item to be selected by the user.\n\n    You can place an observer on this property to be notified when the user\n    makes a selection.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleView",
        "displayName": "SC.MenuPane#exampleView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The view class to use when creating new menu item views.\n\n    The menu pane will automatically create an instance of the view class you\n    set here for each item in the `items` array. You may provide your own\n    subclass for this property to display the customized content.",
        "defaultValue": "SC.MenuItemView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "anchor",
        "displayName": "SC.MenuPane#anchor",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The view or element to which the menu will anchor itself.\n\n    When the menu pane is shown, it will remain anchored to the view you\n    specify, even if the window is resized. You should specify the anchor as a\n    parameter when calling `popup()`, rather than setting it directly.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSubMenu",
        "displayName": "SC.MenuPane#isSubMenu",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "`YES` if this menu pane was generated by a parent `SC.MenuPane`.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.MenuPane#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "Whether the title of menu items should be localized before display.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMenuPane",
        "displayName": "SC.MenuPane#acceptsMenuPane",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "Whether or not this menu pane should accept the âcurrent menu paneâ\n    designation when visible, which is the highest-priority pane when routing\n    events.  Generally you want this set to `YES` so that your menu pane can\n    intercept keyboard events.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.MenuPane#isContextMenuEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "Disable context menu.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTitleKey",
        "displayName": "SC.MenuPane#itemTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the title for each item.",
        "defaultValue": "\"title\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIsEnabledKey",
        "displayName": "SC.MenuPane#itemIsEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that determines whether the item is enabled.",
        "defaultValue": "\"isEnabled\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemValueKey",
        "displayName": "SC.MenuPane#itemValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the value for each item.",
        "defaultValue": "\"value\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIconKey",
        "displayName": "SC.MenuPane#itemIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the icon for each item.",
        "defaultValue": "\"icon\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemHeightKey",
        "displayName": "SC.MenuPane#itemHeightKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the height for each item.",
        "defaultValue": "\"height\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemSubMenuKey",
        "displayName": "SC.MenuPane#itemSubMenuKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains an optional submenu for each item.",
        "defaultValue": "\"subMenu\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemSeparatorKey",
        "displayName": "SC.MenuPane#itemSeparatorKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that determines whether the item is a menu\n    separator.",
        "defaultValue": "\"separator\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTargetKey",
        "displayName": "SC.MenuPane#itemTargetKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the target for the action that is\n    triggered when the user clicks the menu item.\n\n    Note that this property is ignored if the menu item has a submenu.",
        "defaultValue": "\"target\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemActionKey",
        "displayName": "SC.MenuPane#itemActionKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the action that is triggered when\n    the user clicks the menu item.\n\n    Note that this property is ignored if the menu item has a submenu.",
        "defaultValue": "\"action\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemCheckboxKey",
        "displayName": "SC.MenuPane#itemCheckboxKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that determines whether the menu item should\n    display a checkbox.",
        "defaultValue": "\"checkbox\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemShortCutKey",
        "displayName": "SC.MenuPane#itemShortCutKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the shortcut to be displayed.\n\n    The shortcut should communicate the keyboard equivalent to the user.",
        "defaultValue": "\"shortcut\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemKeyEquivalentKey",
        "displayName": "SC.MenuPane#itemKeyEquivalentKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that contains the key equivalent of the menu\n    item.\n\n    The action of the menu item will be fired, and the menu pane's\n    `selectedItem` property set to the menu item, if the user presses this\n    key combination on the keyboard.",
        "defaultValue": "\"keyEquivalent\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemDisableMenuFlashKey",
        "displayName": "SC.MenuPane#itemDisableMenuFlashKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that determines whether menu flash should be\n    disabled.\n\n    When you click on a menu item, it will flash several times to indicate\n    selection to the user. Some browsers block windows from opening outside of\n    a mouse event, so you may wish to disable menu flashing if the action of\n    the menu item should open a new window.",
        "defaultValue": "\"disableMenuFlash\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemLayerIdKey",
        "displayName": "SC.MenuPane#itemLayerIdKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The name of the property that determines whether layerID should be applied to the item .",
        "defaultValue": "\"layerId\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_MENU_ITEM_HEIGHT",
        "displayName": "SC.MenuPane.TINY_MENU_ITEM_HEIGHT",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "Default metrics for the different control sizes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldAutoResize",
        "displayName": "SC.MenuPane#shouldAutoResize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "If YES, the menu should automatically resize its width to fit its items.\n\n    This will swap out the default SC.MenuItemView. If you are using a custom\n    exampleView, you will need to mix SC.AutoResize into your exampleView\n    and set shouldAutoResize to NO (the actual resizing will be handled\n    by SC.MenuPane).\n\n    This property must be set before instantiation; any changes after instantiation\n    will not function properly.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumMenuWidth",
        "displayName": "SC.MenuPane#minimumMenuWidth",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The minimum width for this menu if it is to be automatically resized.\n    \n    If no value is specified, it will be determined from the controlSize.",
        "defaultValue": "minimumMenuWidth from render delegate, or 0.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuWidthPadding",
        "displayName": "SC.MenuPane#menuWidthPadding",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuPane",
        "overview": "The amount to add to any calculated width.\n    \n    If no value is specified, it will be determined from the controlSize.",
        "defaultValue": "menuWidthPadding from render delegate, or 0",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28640,
    "name": "MenuScrollerView",
    "displayName": "SC.MenuScrollerView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/menu_scroll.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ScrollerView"
      }
    ],
    "overview": "Implements a complete scroller view for menus.  This class implements the\n  arrows displayed in a menu to scroll.\n  \n  The main difference with SC.ScrollerView is that there is only vertical \n  scrollers. Value Syncing between SC.MenuScrollView and SC.MenuScrollerView\n  is done using valueBinding.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.MenuScrollerView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "['sc-menu-scroller-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scrollDown",
        "displayName": "SC.MenuScrollerView#scrollDown",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "Used to set the scrolling direction of the scroller.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.MenuScrollerView#value",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "The scroller offset value.  This value will adjust between the minimum\n    and maximum values that you set. Default is 0.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximum",
        "displayName": "SC.MenuScrollerView#maximum",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "The maximum offset value for the scroller.  This will be used to calculate\n    the internal height/width of the scroller itself. It is not necessarily\n    the same as the height of a scroll view's content view.\n    \n    When set less than the height of the scroller, the scroller is disabled.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.MenuScrollerView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "YES if enable scrollbar, NO to disable it.  Scrollbars will automatically \n    disable if the maximum scroll width does not exceed their capacity.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.MenuScrollerView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "Determine the layout direction.  Determines whether the scrollbar should \n    appear horizontal or vertical.  This must be set when the view is created.\n    Changing this once the view has been created will have no effect. Possible\n    values:\n    \n      - SC.LAYOUT_VERTICAL\n      - SC.LAYOUT_HORIZONTAL",
        "defaultValue": "SC.LAYOUT_VERTICAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalLineScroll",
        "displayName": "SC.MenuScrollerView#verticalLineScroll",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "Amount to scroll one vertical line.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ownerScrollValueKey",
        "displayName": "SC.MenuScrollerView#ownerScrollValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "This function overrides the default function in SC.Scroller as \n    menus only have vertical scrolling.",
        "defaultValue": "'verticalScrollOffset'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_SCROLLER_THICKNESS",
        "displayName": "SC.MenuScrollerView.REGULAR_SCROLLER_THICKNESS",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "18",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_SCROLLER_THICKNESS",
        "displayName": "SC.MenuScrollerView.TINY_SCROLLER_THICKNESS",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "10",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_SCROLLER_THICKNESS",
        "displayName": "SC.MenuScrollerView.SMALL_SCROLLER_THICKNESS",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "14",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_SCROLLER_THICKNESS",
        "displayName": "SC.MenuScrollerView.LARGE_SCROLLER_THICKNESS",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "23",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_SCROLLER_THICKNESS",
        "displayName": "SC.MenuScrollerView.HUGE_SCROLLER_THICKNESS",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollerView",
        "overview": "",
        "defaultValue": "26",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28688,
    "name": "MenuScrollView",
    "displayName": "SC.MenuScrollView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/menu_scroll.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ScrollView"
      }
    ],
    "overview": "Implements a scroll view for menus.  This class extends SC.ScrollView for \n  menus. \n  \n  The main difference with SC.ScrollView is that there is only vertical \n  scrolling. Value Syncing between SC.MenuScrollView and SC.MenuScrollerView\n  is done using valueBinding.",
    "methods": [
      {
        "name": "scrollToVisible",
        "displayName": "SC.MenuScrollView#scrollToVisible",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.MenuScrollView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "",
        "defaultValue": "['sc-menu-scroll-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximumHorizontalScrollOffset",
        "displayName": "SC.MenuScrollView#maximumHorizontalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "The maximum horizontal scroll offset allowed given the current contentView \n    size and the size of the scroll view.  If horizontal scrolling is \n    disabled, this will always return 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasHorizontalScroller",
        "displayName": "SC.MenuScrollView#hasHorizontalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "YES if the view should maintain a horizontal scroller.   This property \n    must be set when the view is created.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalScrollerView",
        "displayName": "SC.MenuScrollView#horizontalScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "The horizontal scroller view class. This will be replaced with a view \n    instance when the ScrollView is created unless hasHorizontalScroller is \n    NO.",
        "defaultValue": "SC.MenuScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isHorizontalScrollerVisible",
        "displayName": "SC.MenuScrollView#isHorizontalScrollerVisible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "YES if the horizontal scroller should be visible.  You can change this \n    property value anytime to show or hide the horizontal scroller.  If you \n    do not want to use a horizontal scroller at all, you should instead set \n    hasHorizontalScroller to NO to avoid creating a scroller view in the \n    first place.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canScrollHorizontal",
        "displayName": "SC.MenuScrollView#canScrollHorizontal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "Returns YES if the view both has a horizontal scroller, the scroller is\n    visible.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autohidesHorizontalScroller",
        "displayName": "SC.MenuScrollView#autohidesHorizontalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "If YES, the horizontal scroller will autohide if the contentView is\n    smaller than the visible area.  You must set hasHorizontalScroller to YES \n    for this property to have any effect.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasVerticalScroller",
        "displayName": "SC.MenuScrollView#hasVerticalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "YES if the view shuld maintain a vertical scroller.   This property must \n    be set when the view is created.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollerView",
        "displayName": "SC.MenuScrollView#verticalScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "The vertical scroller view class. This will be replaced with a view \n    instance when the ScrollView is created unless hasVerticalScroller is NO.",
        "defaultValue": "SC.MenuScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isVerticalScrollerVisible",
        "displayName": "SC.MenuScrollView#isVerticalScrollerVisible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "YES if the vertical scroller should be visible.  For SC.MenuScroll the\n    vertical scroller is always there we just hide the arrows to scroll.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canScrollVertical",
        "displayName": "SC.MenuScrollView#canScrollVertical",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autohidesVerticalScroller",
        "displayName": "SC.MenuScrollView#autohidesVerticalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "If YES, the vertical scroller will autohide if the contentView is\n    smaller than the visible area.  You must set hasVerticalScroller to YES \n    for this property to have any effect.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollerBottom",
        "displayName": "SC.MenuScrollView#verticalScrollerBottom",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "Use this property to set the 'bottom' offset of your vertical scroller, \n    to make room for a thumb view or other accessory view. Default is 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "controlSize",
        "displayName": "SC.MenuScrollView#controlSize",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "Control Size for Menu content: change verticalLineScroll",
        "defaultValue": "SC.REGULAR_CONTROL_SIZE",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "containerView",
        "displayName": "SC.MenuScrollView#containerView",
        "objectType": "property",
        "propertyType": "SC.ContainerView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.MenuScrollView",
        "overview": "The container view that will contain your main content view.  You can \n    replace this property with your own custom subclass if you prefer.",
        "defaultValue": "SC.ContainerView",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 44200,
    "name": "MiniMediaControlsView",
    "displayName": "SC.MiniMediaControlsView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/mini_controls.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "(Document Your View Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 22071,
    "name": "ModalPane",
    "displayName": "SC.ModalPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/modal.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Pane"
      }
    ],
    "overview": "A modal pane is used to capture mouse events inside a pane that is modal.\n  You normally will not work with modal panes directly, though you may set \n  the modalPane property to a subclass of this pane when designing custom \n  panes.\n  \n  A modal pane is automatically appended when a pane with isModal set to\n  `YES` is made visible and removed when the same pane is hidden.  The only\n  purpose of the `ModalPane` is to absorb mouse events so that they cannot\n  filter through to the underlying content.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ModalPane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ModalPane",
        "overview": "",
        "defaultValue": "['sc-modal']",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28863,
    "name": "NavigationBarView",
    "displayName": "SC.NavigationBarView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/navigation_bar.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ToolbarView"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Gesturable"
      }
    ],
    "overview": "NavigationBars do Great Things. They transition themselves (fade in/out) and\n  all children (swoosh left/right). They accept isSwipeLeft and isSwipeRight views\n  that handle, well, swiping. In short, they are neat.",
    "methods": [],
    "properties": [
      {
        "name": "navigationTransitions",
        "displayName": "SC.NavigationBarView#navigationTransitions",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NavigationBarView",
        "overview": "The default navigation transitions.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "style",
        "displayName": "SC.NavigationBarView#style",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NavigationBarView",
        "overview": "The default style (opacity is 1)",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21650,
    "name": "NavigationBuilder",
    "displayName": "SC.NavigationBuilder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/navigation_builder.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "NavigationBuilder is an implementation of the Builder protocol. It implements\n  `buildIn`/`Out` (though these only relay to `buildIn`/`OutNavigation, so feel free to\n  override if needed; the navigation builders will still be accessible).\n  \n  Building in and out animates the view in and out to and from the left and right.",
    "methods": [
      {
        "name": "buildIn",
        "displayName": "SC.NavigationBuilder.buildIn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You may override this. If you do, call `buildInNavigation` to call the original functionality.\n    You may need to override `navigationBuildDidFinish` as well if you call `buildInNavigation`.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildOut",
        "displayName": "SC.NavigationBuilder.buildOut",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You may override this. If you do, call `buildOutNavigation` to call the original functionality.\n    You may need to override `navigationBuildDidFinish`as well if you call `buildOutNavigation`.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "resetBuild",
        "displayName": "SC.NavigationBuilder.resetBuild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This ensures that the view has a CSS transform set, even if it is added without build in, etc.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "navigationBuildDidFinish",
        "displayName": "SC.NavigationBuilder.navigationBuildDidFinish",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the transitions finish.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isNavigationBuilder",
        "displayName": "SC.NavigationBuilder.isNavigationBuilder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NavigationBuilder",
        "overview": "Walk like a duck.",
        "defaultValue": "YES",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "navigationTransitions",
        "displayName": "SC.NavigationBuilder.navigationTransitions",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NavigationBuilder",
        "overview": "The transitions to be used for navigation; these are mixed in to the existing\n    transitions hash if one exists, or become the transitions hash otherwise.\n    \n    If NO, it uses the (hard-coded) defaults.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28813,
    "name": "NavigationView",
    "displayName": "SC.NavigationView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/navigation.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Alex Iskander",
    "see": [],
    "since": "SproutCore 1.4",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.WorkspaceView"
      }
    ],
    "overview": "NavigationView is very loosely based on UINavigationController:\n  that is, it implements a push/pop based API. \n  \n  NavigationView checks if the view is NavigationBuildable--that is, if it has \n  \n  Views may specify a topToolbar or bottomToolbar property. These will become the\n  top or bottom toolbars of the NavigationView (which is, incidentally, a WorkspaceView).\n  \n  Of course, this process is animated...",
    "methods": [
      {
        "name": "push",
        "displayName": "SC.NavigationView#push",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pushes a view into the navigation view stack. The view may have topToolbar and bottomToolbar properties.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view to display"
          }
        ]
      },
      {
        "name": "pop",
        "displayName": "SC.NavigationView#pop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pops the current view off the navigation view stack.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "popToView",
        "displayName": "SC.NavigationView#popToView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pops to the specified view on the navigation view stack; the view you pass will become the current view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "toView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view to display"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "navigationContentView",
        "displayName": "SC.NavigationView#navigationContentView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NavigationView",
        "overview": "",
        "defaultValue": "SC.View",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 15419,
    "name": "NestedStore",
    "displayName": "SC.NestedStore",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/nested_store.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Store"
      }
    ],
    "overview": "A nested store can buffer changes to a parent store and then commit them\n  all at once.  You usually will use a `NestedStore` as part of store chaining\n  to stage changes to your object graph before sharing them with the rest of\n  the application.\n  \n  Normally you will not create a nested store directly.  Instead, you can \n  retrieve a nested store by using the `chain()` method.  When you are finished\n  working with the nested store, `destroy()` will dispose of it.",
    "methods": [
      {
        "name": "find",
        "displayName": "SC.NestedStore#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "`find()` cannot accept REMOTE queries in a nested store.  This override will\n    verify that condition for you.  See `SC.Store#find()` for info on using this\n    method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record|SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "query object to use."
          }
        ]
      },
      {
        "name": "commitChanges",
        "displayName": "SC.NestedStore#commitChanges",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Propagate this store's changes to its parent.  If the store does not \n    have a parent, this has no effect other than to clear the change set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "force",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if YES, does not check for conflicts first"
          }
        ]
      },
      {
        "name": "discardChanges",
        "displayName": "SC.NestedStore#discardChanges",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Discard the changes made to this store and reset the store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.NestedStore#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When you are finished working with a chained store, call this method to \n    tear it down.  This will also discard any pending changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "reset",
        "displayName": "SC.NestedStore#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets a store's data hash contents to match its parent.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "readError",
        "displayName": "SC.NestedStore#readError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the `SC.Error` object associated with a specific record.\n\n    Delegates the call to the parent store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Error or null if no error associated with the record."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The store key of the record."
          }
        ]
      },
      {
        "name": "readQueryError",
        "displayName": "SC.NestedStore#readQueryError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the `SC.Error` object associated with a specific query.\n\n    Delegates the call to the parent store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Error or null if no error associated with the query."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SC.Query with which the error is associated."
          }
        ]
      },
      {
        "name": "storeKeyEditState",
        "displayName": "SC.NestedStore#storeKeyEditState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current edit status of a storekey.  May be one of `INHERITED`,\n    `EDITABLE`, and `LOCKED`.  Used mostly for unit testing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "edit status"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "hasChanges",
        "displayName": "SC.NestedStore#hasChanges",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NestedStore",
        "overview": "This is set to YES when there are changes that have not been committed \n    yet.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parentStore",
        "displayName": "SC.NestedStore#parentStore",
        "objectType": "property",
        "propertyType": "SC.Store",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NestedStore",
        "overview": "The parent store this nested store is chained to.  Nested stores must have\n    a parent store in order to function properly.  Normally, you create a \n    nested store using the `SC.Store#chain()` method and this property will be\n    set for you.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isNested",
        "displayName": "SC.NestedStore#isNested",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NestedStore",
        "overview": "`YES` if the view is nested. Walk like a duck",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "lockOnRead",
        "displayName": "SC.NestedStore#lockOnRead",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.NestedStore",
        "overview": "If YES, then the attribute hash state will be locked when you first \n    read the data hash or status.  This means that if you retrieve a record\n    then change the record in the parent store, the changes will not be \n    visible to your nested store until you commit or discard changes.\n    \n    If `NO`, then the attribute hash will lock only when you write data.\n    \n    Normally you want to lock your attribute hash the first time you read it.\n    This will make your nested store behave most consistently.  However, if\n    you are using multiple sibling nested stores at one time, you may want\n    to turn off this property so that changes from one store will be reflected\n    in the other one immediately.  In this case you will be responsible for\n    ensuring that the sibling stores do not edit the same part of the object\n    graph at the same time.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48316,
    "name": "Object",
    "displayName": "SC.Object",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/object.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Observable"
      }
    ],
    "overview": "Root object for the SproutCore framework.  SC.Object is the root class for\n  most classes defined by SproutCore.  It builds on top of the native object\n  support provided by JavaScript to provide support for class-like\n  inheritance, automatic bindings, properties observers, and more.\n\n  Most of the classes you define in your application should inherit from\n  SC.Object or one of its subclasses.  If you are writing objects of your\n  own, you should read this documentation to learn some of the details of\n  how SC.Object's behave and how they differ from other frameworks.\n\n  About SproutCore Classes\n  ===\n\n  JavaScript is not a class-based language.  Instead it uses a type of\n  inheritence inspired by self called \"prototypical\" inheritance.\n  ...\n\n  Using SproutCore objects with other JavaScript object.\n  ===\n\n  You can create a SproutCore object just like any other object...\n  obj = new SC.Object() ;",
    "methods": [
      {
        "name": "invokeLater",
        "displayName": "SC.Object#invokeLater",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the named method after the specified period of time.\n\n    This is a convenience method that will create a single run timer to\n    invoke a method after a period of time.  The method should have the\n    signature:\n\n        methodName: function(timer)\n\n    If you would prefer to pass your own parameters instead, you can instead\n    call invokeLater() directly on the function object itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Timer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "scheduled timer."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} method name to perform."
          },
          {
            "title": "param",
            "type": "",
            "name": "interval",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} period from current time to schedule."
          }
        ]
      },
      {
        "name": "invokeWith",
        "displayName": "SC.Object#invokeWith",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Lookup the named property path and then invoke the passed function,\n    passing the resulting value to the function.\n\n    This method is a useful way to handle deferred loading of properties.\n    If you want to defer loading a property, you can override this method.\n    When the method is called, passing a deferred property, you can load the\n    property before invoking the callback method.\n\n    You can even swap out the receiver object.\n\n    The callback method should have the signature:\n\n    function callback(objectAtPath, sourceObject) { ... }\n\n    You may pass either a function itself or a target/method pair.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "pathName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "target or method"
          },
          {
            "title": "param",
            "type": "Function|String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "emitDesign",
        "displayName": "SC.Object#emitDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Patch SC.Object to respond to design",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "encodeDesign",
        "displayName": "SC.Object#encodeDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Patch `SC.Object` to respond to `encodeDesign()`.  This will proxy to the\n  paired designer, if there is one.  If there is no paired designer, returns\n  `NO`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "activate",
        "displayName": "SC.Object#activate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Registers this segment of the chain with the object it represents.\n\n    This should be called with the object represented by the previous node in\n    the chain as the first parameter. If no previous object is provided, it will\n    assume it is the root node in the chain and treat the target as the previous\n    object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "newObject",
            "isOptional": true,
            "defaultValue": "",
            "desc": "The object in the chain to hook to."
          }
        ]
      },
      {
        "name": "deactivate",
        "displayName": "SC.Object#deactivate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes this segment of the chain from the object it represents. This is \n    usually called when the object represented by the previous segment in the \n    chain changes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "notifyPropertyDidChange",
        "displayName": "SC.Object#notifyPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invalidates the +toInvalidate+ property of the +target+ object.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "toString",
        "displayName": "SC.Object#toString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a string representation of the chain segment.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "mixin",
        "displayName": "SC.Object.mixin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the passed properties to the object's class definition.  You can\n    pass as many hashes as you want, including Mixins, and they will be\n    added in the order they are passed.\n\n    This is a shorthand for calling SC.mixin(MyClass, props...);",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the properties you want to add."
          }
        ]
      },
      {
        "name": "extend",
        "displayName": "SC.Object.extend",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new subclass of the receiver, adding any passed properties to\n    the instance definition of the new class.  You should use this method\n    when you plan to create several objects based on a class with similar\n    properties.\n\n    Init:\n\n    If you define an init() method, it will be called when you create\n    instances of your new class.  Since SproutCore uses the init() method to\n    do important setup, you must be sure to always call sc_super() somewhere\n    in your init() to allow the normal setup to proceed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Class",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A new object class"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the methods of properties you want to add"
          }
        ]
      },
      {
        "name": "create",
        "displayName": "SC.Object.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new instance of the class.\n\n    Unlike most frameworks, you do not pass parameters to the init function\n    for an object.  Instead, you pass a hash of additional properties you\n    want to have assigned to the object when it is first created.  This is\n    functionally like creating an anonymous subclass of the receiver and then\n    instantiating it, but more efficient.\n\n    You can use create() like you would a normal constructor in a\n    class-based system, or you can use it to create highly customized\n    singleton objects such as controllers or app-level objects.  This is\n    often more efficient than creating subclasses and then instantiating\n    them.\n\n    You can pass any hash of properties to this method, including mixins.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new instance of the receiver class."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional hash of method or properties to add to the instance."
          }
        ]
      },
      {
        "name": "subclassOf",
        "displayName": "SC.Object.subclassOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the receiver is a subclass of the named class.  If the\n    receiver is the class passed, this will return NO since the class is not\n    a subclass of itself.  See also kindOf().\n\n    Example:\n\n          ClassA = SC.Object.extend();\n          ClassB = ClassA.extend();\n\n          ClassB.subclassOf(ClassA) => YES\n          ClassA.subclassOf(ClassA) => NO",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "scClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class to compare"
          }
        ]
      },
      {
        "name": "hasSubclass",
        "displayName": "SC.Object.hasSubclass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed object is a subclass of the receiver.  This is\n    the inverse of subclassOf() which you call on the class you want to test.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "scClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class to compare"
          }
        ]
      },
      {
        "name": "kindOf",
        "displayName": "SC.Object.kindOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the receiver is the passed class or is a subclass of the\n    passed class.  Unlike subclassOf(), this method will return YES if you\n    pass the receiver itself, since class is a kind of itself.  See also\n    subclassOf().\n\n    Example:\n\n          ClassA = SC.Object.extend();\n          ClassB = ClassA.extend();\n\n          ClassB.kindOf(ClassA) => YES\n          ClassA.kindOf(ClassA) => YES",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "scClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class to compare"
          }
        ]
      },
      {
        "name": "design",
        "displayName": "SC.Object.design",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method works just like extend() except that it will also preserve\n    the passed attributes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Class",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Object subclass to create"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Attributes to add to view"
          }
        ]
      },
      {
        "name": "mixin",
        "displayName": "SC.Object#mixin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can call this method on an object to mixin one or more hashes of\n    properties on the receiver object.  In addition to simply copying\n    properties, this method will also prepare the properties for use in\n    bindings, computed properties, etc.\n\n    If you plan to use this method, you should call it before you call\n    the inherited init method from SC.Object or else your instance may not\n    function properly.\n\n    Example:\n\n          // dynamically apply a mixin specified in an object property\n          var MyClass = SC.Object.extend({\n             extraMixin: null,\n\n             init: function() {\n               this.mixin(this.extraMixin);\n               sc_super();\n             }\n          });\n\n          var ExampleMixin = { foo: \"bar\" };\n\n          var instance = MyClass.create({ extraMixin: ExampleMixin }) ;\n\n          instance.get('foo') => \"bar\"",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "ext",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a hash to copy.  Only one."
          }
        ]
      },
      {
        "name": "init",
        "displayName": "SC.Object#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked automatically whenever a new object is\n    instantiated.  You can override this method as you like to setup your\n    new object.\n\n    Within your object, be sure to call sc_super() to ensure that the\n    built-in init method is also called or your observers and computed\n    properties may not be configured.\n\n    Although the default init() method returns the receiver, the return\n    value is ignored.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.Object#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method when you are finished with an object to teardown its\n    contents.  Because JavaScript is garbage collected, you do not usually\n    need to call this method.  However, you may choose to do so for certain\n    objects, especially views, in order to let them reclaim memory they\n    consume immediately.\n\n    If you would like to perform additional cleanup when an object is\n    finished, you may override this method.  Be sure to call sc_super().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "respondsTo",
        "displayName": "SC.Object#respondsTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the named value is an executable function.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property name to check"
          }
        ]
      },
      {
        "name": "tryToPerform",
        "displayName": "SC.Object#tryToPerform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attemps to invoke the named method, passing the included two arguments.\n    Returns NO if the method is either not implemented or if the handler\n    returns NO (indicating that it did not handle the event).  This method\n    is invoked to deliver actions from menu items and to deliver events.\n    You can override this method to provide additional handling if you\n    prefer.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled, NO if not handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "superclass",
        "displayName": "SC.Object#superclass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "EXPERIMENTAL:  You can use this to invoke a superclass implementation in\n    any method.  This does not work in Safari 2 or earlier.  If you need to\n    target these methods, you should use one of the alternatives below:\n\n    - *With Build Tools:* sc_super();\n    - *Without Build Tools:* arguments.callee.base.apply(this, arguments);\n\n    Example\n\n    All of the following methods will call the superclass implementation of\n    your method:\n\n          SC.Object.create({\n\n            // DOES NOT WORK IN SAFARI 2 OR EARLIER\n            method1: function() {\n              this.superclass();\n            },\n\n            // REQUIRES SC-BUILD TOOLS\n            method2: function() {\n              sc_super();\n            },\n\n            // WORKS ANYTIME\n            method3: function() {\n              arguments.callee.base.apply(this, arguments);\n            }\n          });",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "return value from super"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "*args",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "any arguments you want to pass along."
          }
        ]
      },
      {
        "name": "instanceOf",
        "displayName": "SC.Object#instanceOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "returns YES if the receiver is an instance of the named class.  See also\n    kindOf().\n\n    Example\n\n          var ClassA = SC.Object.extend();\n          var ClassB = SC.Object.extend();\n\n          var instA = ClassA.create();\n          var instB = ClassB.create();\n\n          instA.instanceOf(ClassA) => YES\n          instB.instanceOf(ClassA) => NO",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "scClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the class"
          }
        ]
      },
      {
        "name": "kindOf",
        "displayName": "SC.Object#kindOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns true if the receiver is an instance of the named class or any\n    subclass of the named class.  See also instanceOf().\n\n    Example\n\n          var ClassA = SC.Object.extend();\n          var ClassB = SC.Object.extend();\n\n          var instA = ClassA.create();\n          var instB = ClassB.create();\n\n          instA.kindOf(ClassA) => YES\n          instB.kindOf(ClassA) => YES",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "scClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the class"
          }
        ]
      },
      {
        "name": "awake",
        "displayName": "SC.Object#awake",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Activates any outlet connections in object and syncs any bindings.  This\n    method is called automatically for view classes but may be used for any\n    object.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "invokeOnce",
        "displayName": "SC.Object#invokeOnce",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the passed method or method name one time during the runloop.  You\n    can use this method to schedule methods that need to execute but may be\n    too expensive to execute more than once, such as methods that update the\n    DOM.\n\n    Note that in development mode only, the object and method that call this\n    method will be recorded, for help in debugging scheduled code.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function|String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "method or method name"
          }
        ]
      },
      {
        "name": "invokeLast",
        "displayName": "SC.Object#invokeLast",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the passed method once at the beginning of the next runloop,\n    before any other methods (including events) are processed. This is useful\n    for situations where you know you need to update something, but due to\n    the way the run loop works, you can't actually do the update until the\n    run loop has completed.\n\n    A simple example is setting the selection on a collection controller to a\n    newly created object. Because the collection controller won't have its\n    content collection updated until later in the run loop, setting the\n    selection immediately will have no effect. In this situation, you could do\n    this instead:\n\n          // Creates a new MyRecord object and sets the selection of the\n          // myRecord collection controller to the new object.\n          createObjectAction: function(sender, evt) {\n            // create a new record and add it to the store\n            var obj = MyRecord.newRecord() ;\n\n            // update the collection controller's selection\n            MyApp.myRecordCollectionController.invokeLast( function() {\n              this.set('selection', [obj]) ;\n            });\n          }\n\n    You can call invokeLast as many times as you like and the method will\n    only be invoked once.\n\n    Note that in development mode only, the object and method that call this\n    method will be recorded, for help in debugging scheduled code.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function|String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "method or method name"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "object",
        "displayName": "SC.Object#object",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The object represented by this node in the chain.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "property",
        "displayName": "SC.Object#property",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The key on the previous object in the chain that contains the object\n    represented by this node in the chain.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "target",
        "displayName": "SC.Object#target",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The target object. This is the object passed to createChain(), and the\n    object which contains the +toInvalidate+ property that will be invalidated\n    if +property+ changes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toInvalidate",
        "displayName": "SC.Object#toInvalidate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The property of +target+ to invalidate when +property+ changes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nextProperty",
        "displayName": "SC.Object#nextProperty",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The property key on +object+ that contains the object represented by the\n    next node in the chain.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "superclass",
        "displayName": "SC.Object.superclass",
        "objectType": "property",
        "propertyType": "SC.Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "Points to the superclass for this class.  You can use this to trace a\n    class hierarchy.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isClass",
        "displayName": "SC.Object.isClass",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "Walk like a duck.  You can use this to quickly test classes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "subclasses",
        "displayName": "SC.Object.subclasses",
        "objectType": "property",
        "propertyType": "SC.Set",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "Set of subclasses that extend from this class.  You can observe this\n    array if you want to be notified when the object is extended.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isDestroyed",
        "displayName": "SC.Object#isDestroyed",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "Set to NO once this object has been destroyed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isObject",
        "displayName": "SC.Object#isObject",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "Walk like a duck. Always YES since this is an object and not a class.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "concatenatedProperties",
        "displayName": "SC.Object#concatenatedProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Object",
        "overview": "The properties named in this array will be concatenated in subclasses\n    instead of replaced.  This allows you to name special properties that\n    should contain any values you specify plus values specified by parents.\n\n    It is used by SproutCore and is available for your use, though you\n    should limit the number of properties you include in this list as it\n    adds a slight overhead to new class and instance creation.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 5716,
    "name": "ObjectController",
    "displayName": "SC.ObjectController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/controllers/object.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Controller"
      }
    ],
    "overview": "An ObjectController gives you a simple way to manage the editing state of\n  an object.  You can use an ObjectController instance as a \"proxy\" for your\n  model objects.\n  \n  Any properties you get or set on the object controller, will be passed \n  through to its content object.  This allows you to setup bindings to your\n  object controller one time for all of your views and then swap out the \n  content as needed.\n  \n  ## Working with Arrays\n  \n  An ObjectController can accept both arrays and single objects as content.  \n  If the content is an array, the ObjectController will do its best to treat \n  the array as a single object.  For example, if you set the content of an\n  ObjectController to an array of Contact records and then call:\n  \n      contactController.get('name');\n\n  The controller will check the name property of each Contact in the array.  \n  If the value of the property for each Contact is the same, that value will \n  be returned.  If the any values are different, then an array will be \n  returned with the values from each Contact in them. \n  \n  Most SproutCore views can work with both arrays and single content, which \n  means that most of the time, you can simply hook up your views and this will\n  work.\n  \n  If you would prefer to make sure that your ObjectController is always \n  working with a single object and you are using bindings, you can always \n  setup your bindings so that they will convert the content to a single object \n  like so:\n  \n      contentBinding: SC.Binding.single('MyApp.listController.selection') ;\n\n  This will ensure that your content property is always a single object \n  instead of an array.",
    "methods": [
      {
        "name": "hasContent",
        "displayName": "SC.ObjectController#hasContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Becomes YES whenever this object is managing content.  Usually this means\n    the content property contains a single object or an array or enumerable\n    with a single item.  Array's or enumerables with multiple items will \n    normally make this property NO unless allowsMultipleContent is YES.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "observableContent",
        "displayName": "SC.ObjectController#observableContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Primarily for internal use.  Normally you should not access this property \n    directly.  \n    \n    Returns the actual observable object proxied by this controller.  Usually \n    this property will mirror the content property.  In some cases - notably \n    when setting content to an enumerable, this may return a different object.\n    \n    Note that if you set the content to an enumerable which itself contains\n    enumerables and allowsMultipleContent is NO, this will become null.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.ObjectController#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override this method to destroy the selected object.\n    \n    The default just passes this call onto the content object if it supports\n    it, and then sets the content to null.  \n    \n    Unlike most calls to destroy() this will not actually destroy the \n    controller itself; only the the content.  You continue to use the \n    controller by setting the content to a new value.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectController",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "contentPropertyDidChange",
        "displayName": "SC.ObjectController#contentPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever any property on the content object changes.  \n\n    The default implementation will simply notify any observers that the \n    property has changed.  You can override this method if you need to do \n    some custom work when the content property changes.\n    \n    If you have set the content property to an enumerable with multiple \n    objects and you set allowsMultipleContent to YES, this method will be \n    called anytime any property in the set changes.\n\n    If all properties have changed on the content or if the content itself \n    has changed, this method will be called with a key of \"*\".",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property that changes"
          }
        ]
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.ObjectController#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenver you try to get/set an unknown property.  The default \n    implementation will pass through to the underlying content object but \n    you can override this method to do some other kind of processing if \n    needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "content",
        "displayName": "SC.ObjectController#content",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ObjectController",
        "overview": "Set to the object you want this controller to manage.  The object should\n    usually be a single value; not an array or enumerable.  If you do supply\n    an array or enumerable with a single item in it, the ObjectController\n    will manage that single item.\n\n    Usually your content object should implement the SC.Observable mixin, but\n    this is not required.  All SC.Object-based objects support SC.Observable",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsMultipleContent",
        "displayName": "SC.ObjectController#allowsMultipleContent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ObjectController",
        "overview": "If YES, then setting the content to an enumerable or an array with more \n    than one item will cause the Controller to attempt to treat the array as\n    a single object.  Use of get(), for example, will get every property on\n    the enumerable and return it.  set() will set the property on every item\n    in the enumerable. \n    \n    If NO, then setting content to an enumerable with multiple items will be\n    treated like setting a null value.  hasContent will be NO.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.ObjectController#isEditable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ObjectController",
        "overview": "Makes a controller editable or not editable.  The SC.Controller class \n    itself does not do anything with this property but subclasses will \n    respect it when modifying content.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 34031,
    "name": "ObjectDesigner",
    "displayName": "SC.ObjectDesigner",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/designers/object_designer.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "This is a basic designer used for all `SC.Object`s that are created in\n  design mode.\n  \n  FIXME: have `SC.ViewDesigner` subclass this designer.....",
    "methods": [],
    "properties": []
  },
  {
    "guid": 46997,
    "name": "Observable",
    "displayName": "SC.Observable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/observable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Key-Value-Observing (KVO) simply allows one object to observe changes to a\n  property on another object. It is one of the fundamental ways that models,\n  controllers and views communicate with each other in a SproutCore\n  application.  Any object that has this module applied to it can be used in\n  KVO-operations.\n\n  This module is applied automatically to all objects that inherit from\n  SC.Object, which includes most objects bundled with the SproutCore\n  framework.  You will not generally apply this module to classes yourself,\n  but you will use the features provided by this module frequently, so it is\n  important to understand how to use it.\n\n  Enabling Key Value Observing\n  ---\n\n  With KVO, you can write functions that will be called automatically whenever\n  a property on a particular object changes.  You can use this feature to\n  reduce the amount of \"glue code\" that you often write to tie the various\n  parts of your application together.\n\n  To use KVO, just use the KVO-aware methods get() and set() to access\n  properties instead of accessing properties directly.  Instead of writing:\n\n        var aName = contact.firstName ;\n        contact.firstName = 'Charles' ;\n\n  use:\n\n        var aName = contact.get('firstName') ;\n        contact.set('firstName', 'Charles') ;\n\n  get() and set() work just like the normal \"dot operators\" provided by\n  JavaScript but they provide you with much more power, including not only\n  observing but computed properties as well.\n\n  Observing Property Changes\n  ---\n\n  You typically observe property changes simply by adding the observes()\n  call to the end of your method declarations in classes that you write.  For\n  example:\n\n        SC.Object.create({\n          valueObserver: function() {\n            // Executes whenever the \"Value\" property changes\n          }.observes('value')\n        }) ;\n\n  Although this is the most common way to add an observer, this capability is\n  actually built into the SC.Object class on top of two methods defined in\n  this mixin called addObserver() and removeObserver().  You can use these two\n  methods to add and remove observers yourself if you need to do so at run\n  time.\n\n  To add an observer for a property, just call:\n\n        object.addObserver('propertyKey', targetObject, targetAction) ;\n\n  This will call the 'targetAction' method on the targetObject to be called\n  whenever the value of the propertyKey changes.\n\n  Observer Parameters\n  ---\n\n  An observer function typically does not need to accept any parameters,\n  however you can accept certain arguments when writing generic observers.\n  An observer function can have the following arguments:\n\n        propertyObserver(target, key, value, revision) ;\n\n  - *target* - This is the object whose value changed.  Usually this.\n  - *key* - The key of the value that changed\n  - *value* - this property is no longer used.  It will always be null\n  - *revision* - this is the revision of the target object\n\n  Implementing Manual Change Notifications\n  ---\n\n  Sometimes you may want to control the rate at which notifications for\n  a property are delivered, for example by checking first to make sure\n  that the value has changed.\n\n  To do this, you need to implement a computed property for the property\n  you want to change and override automaticallyNotifiesObserversFor().\n\n  The example below will only notify if the \"balance\" property value actually\n  changes:\n\n\n        automaticallyNotifiesObserversFor: function(key) {\n          return (key === 'balance') ? NO : sc_super() ;\n        },\n\n        balance: function(key, value) {\n          var balance = this._balance ;\n          if ((value !== undefined) && (balance !== value)) {\n            this.propertyWillChange(key) ;\n            balance = this._balance = value ;\n            this.propertyDidChange(key) ;\n          }\n          return balance ;\n        }\n\n\n  Implementation Details\n  ---\n\n  Internally, SproutCore keeps track of observable information by adding a\n  number of properties to the object adopting the observable.  All of these\n  properties begin with \"_kvo_\" to separate them from the rest of your object.",
    "methods": [
      {
        "name": "automaticallyNotifiesObserversFor",
        "displayName": "SC.Observable#automaticallyNotifiesObserversFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines whether observers should be automatically notified of changes\n    to a key.\n\n    If you are manually implementing change notifications for a property, you\n    can override this method to return NO for properties you do not want the\n    observing system to automatically notify for.\n\n    The default implementation always returns YES.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if automatic notification should occur."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key that is changing"
          }
        ]
      },
      {
        "name": "get",
        "displayName": "SC.Observable#get",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves the value of key from the object.\n\n    This method is generally very similar to using object[key] or object.key,\n    however it supports both computed properties and the unknownProperty\n    handler.\n\n    Computed Properties\n    ---\n\n    Computed properties are methods defined with the property() modifier\n    declared at the end, such as:\n\n          fullName: function() {\n            return this.getEach('firstName', 'lastName').compact().join(' ');\n          }.property('firstName', 'lastName')\n\n    When you call get() on a computed property, the property function will be\n    called and the return value will be returned instead of the function\n    itself.\n\n    Unknown Properties\n    ---\n\n    Likewise, if you try to call get() on a property whose values is\n    undefined, the unknownProperty() method will be called on the object.\n    If this method reutrns any value other than undefined, it will be returned\n    instead.  This allows you to implement \"virtual\" properties that are\n    not defined upfront.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property value or undefined."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to retrieve"
          }
        ]
      },
      {
        "name": "set",
        "displayName": "SC.Observable#set",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the key equal to value.\n\n    This method is generally very similar to calling object[key] = value or\n    object.key = value, except that it provides support for computed\n    properties, the unknownProperty() method and property observers.\n\n    Computed Properties\n    ---\n\n    If you try to set a value on a key that has a computed property handler\n    defined (see the get() method for an example), then set() will call\n    that method, passing both the value and key instead of simply changing\n    the value itself.  This is useful for those times when you need to\n    implement a property that is composed of one or more member\n    properties.\n\n    Unknown Properties\n    ---\n\n    If you try to set a value on a key that is undefined in the target\n    object, then the unknownProperty() handler will be called instead.  This\n    gives you an opportunity to implement complex \"virtual\" properties that\n    are not predefined on the obejct.  If unknownProperty() returns\n    undefined, then set() will simply set the value on the object.\n\n    Property Observers\n    ---\n\n    In addition to changing the property, set() will also register a\n    property change with the object.  Unless you have placed this call\n    inside of a beginPropertyChanges() and endPropertyChanges(), any \"local\"\n    observers (i.e. observer methods declared on the same object), will be\n    called immediately.  Any \"remote\" observers (i.e. observer methods\n    declared on another object) will be placed in a queue and called at a\n    later time in a coelesced manner.\n\n    Chaining\n    ---\n\n    In addition to property changes, set() returns the value of the object\n    itself so you can do chaining like this:\n\n          record.set('firstName', 'Charles').set('lastName', 'Jolley');",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property to set"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to set or null."
          }
        ]
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.Observable#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever you try to get or set an undefined property.\n\n    This is a generic property handler.  If you define it, it will be called\n    when the named property is not yet set in the object.  The default does\n    nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new value for key."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key that was requested"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value if called as a setter, undefined if called as a getter."
          }
        ]
      },
      {
        "name": "beginPropertyChanges",
        "displayName": "SC.Observable#beginPropertyChanges",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a grouping of property changes.\n\n    You can use this method to group property changes so that notifications\n    will not be sent until the changes are finished.  If you plan to make a\n    large number of changes to an object at one time, you should call this\n    method at the beginning of the changes to suspend change notifications.\n    When you are done making changes, call endPropertyChanges() to allow\n    notification to resume.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "endPropertyChanges",
        "displayName": "SC.Observable#endPropertyChanges",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends a grouping of property changes.\n\n    You can use this method to group property changes so that notifications\n    will not be sent until the changes are finished.  If you plan to make a\n    large number of changes to an object at one time, you should call\n    beginPropertyChanges() at the beginning of the changes to suspend change\n    notifications. When you are done making changes, call this method to allow\n    notification to resume.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "propertyWillChange",
        "displayName": "SC.Observable#propertyWillChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notify the observer system that a property is about to change.\n\n    Sometimes you need to change a value directly or indirectly without\n    actually calling get() or set() on it.  In this case, you can use this\n    method and propertyDidChange() instead.  Calling these two methods\n    together will notify all observers that the property has potentially\n    changed value.\n\n    Note that you must always call propertyWillChange and propertyDidChange as\n    a pair.  If you do not, it may get the property change groups out of order\n    and cause notifications to be delivered more often than you would like.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property key that is about to change."
          }
        ]
      },
      {
        "name": "propertyDidChange",
        "displayName": "SC.Observable#propertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notify the observer system that a property has just changed.\n\n    Sometimes you need to change a value directly or indirectly without\n    actually calling get() or set() on it.  In this case, you can use this\n    method and propertyWillChange() instead.  Calling these two methods\n    together will notify all observers that the property has potentially\n    changed value.\n\n    Note that you must always call propertyWillChange and propertyDidChange as\n    a pair. If you do not, it may get the property change groups out of order\n    and cause notifications to be delivered more often than you would like.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property key that has just changed."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new value of the key.  May be null."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "_keepCache",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Private property"
          }
        ]
      },
      {
        "name": "registerDependentKey",
        "displayName": "SC.Observable#registerDependentKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Use this to indicate that one key changes if other keys it depends on\n    change.  Pass the key that is dependent and additional keys it depends\n    upon.  You can either pass the additional keys inline as arguments or\n    in a single array.\n\n    You generally do not call this method, but instead pass dependent keys to\n    your property() method when you declare a computed property.\n\n    You can call this method during your init to register the keys that should\n    trigger a change notification for your computed properties.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the dependent key"
          },
          {
            "title": "param",
            "type": "Array|String",
            "name": "dependentKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more dependent keys"
          }
        ]
      },
      {
        "name": "addObserver",
        "displayName": "SC.Observable#addObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds an observer on a property.\n\n      This is the core method used to register an observer for a property.\n\n      Once you call this method, anytime the key's value is set, your observer\n      will be notified.  Note that the observers are triggered anytime the\n      value is set, regardless of whether it has actually changed.  Your\n      observer should be prepared to handle that.\n\n      You can also pass an optional context parameter to this method.  The\n      context will be passed to your observer method whenever it is triggered.\n      Note that if you add the same target/method pair on a key multiple times\n      with different context parameters, your observer will only be called once\n      with the last context you passed.\n\n      Observer Methods\n      ---\n\n      Observer methods you pass should generally have the following signature if\n      you do not pass a \"context\" parameter:\n\n            fooDidChange: function(sender, key, value, rev);\n\n      The sender is the object that changed.  The key is the property that\n      changes.  The value property is currently reserved and unused.  The rev\n      is the last property revision of the object when it changed, which you can\n      use to detect if the key value has really changed or not.\n\n      If you pass a \"context\" parameter, the context will be passed before the\n      revision like so:\n\n            fooDidChange: function(sender, key, value, context, rev);\n\n      Usually you will not need the value, context or revision parameters at\n      the end.  In this case, it is common to write observer methods that take\n      only a sender and key value as parameters or, if you aren't interested in\n      any of these values, to write an observer that has no parameters at all.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "self"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to observer"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to invoke"
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method to invoke."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional context"
          }
        ]
      },
      {
        "name": "removeObserver",
        "displayName": "SC.Observable#removeObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove an observer you have previously registered on this object.  Pass\n      the same key, target, and method you passed to addObserver() and your\n      target will no longer receive notifications.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to observer"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to invoke"
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method to invoke."
          }
        ]
      },
      {
        "name": "hasObserverFor",
        "displayName": "SC.Observable#hasObserverFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the object currently has observers registered for a\n      particular key.  You can use this method to potentially defer performing\n      an expensive action until someone begins observing a particular property\n      on the object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to check"
          }
        ]
      },
      {
        "name": "initObservable",
        "displayName": "SC.Observable#initObservable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will register any observers and computed properties saved on\n      the object.  Normally you do not need to call this method youself.  It\n      is invoked automatically just before property notifications are sent and\n      from the init() method of SC.Object.  You may choose to call this\n      from your own initialization method if you are using SC.Observable in\n      a non-SC.Object-based object.\n\n      This method looks for several private variables, which you can setup,\n      to initialize:\n\n        - _observers: this should contain an array of key names for observers\n          you need to configure.\n\n        - _bindings: this should contain an array of key names that configure\n          bindings.\n\n        - _properties: this should contain an array of key names for computed\n          properties.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": []
      },
      {
        "name": "observersForKey",
        "displayName": "SC.Observable#observersForKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array with all of the observers registered for the specified\n      key.  This is intended for debugging purposes only.  You generally do not\n      want to rely on this method for production code.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of Observer objects, describing the observer."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to evaluate"
          }
        ]
      },
      {
        "name": "bind",
        "displayName": "SC.Observable#bind",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Manually add a new binding to an object.  This is the same as doing\n      the more familiar propertyBinding: 'property.path' approach.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Binding",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new binding instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "toKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to bind to"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "target or property path to bind from"
          },
          {
            "title": "param",
            "type": "String|Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "method for target to bind from"
          }
        ]
      },
      {
        "name": "didChangeFor",
        "displayName": "SC.Observable#didChangeFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "didChangeFor allows you to determine if a property has changed since the\n      last time the method was called. You must pass a unique context as the\n      first parameter (so didChangeFor can identify which method is calling it),\n      followed by a list of keys that should be checked for changes.\n\n      For example, in your render method you might pass the following context:\n      if (this.didChangeFor('render','height','width')) {\n         // Only render if changed\n      }\n\n      In your view's update method, you might instead pass 'update':\n\n      if (this.didChangeFor('update', 'height', 'width')) {\n        // Only update height and width properties\n      }\n\n      This method works by comparing property revision counts. Every time a\n      property changes, an internal counter is incremented. When didChangeFor is\n      invoked, the current revision count of the property is compared to the\n      revision count from the last time this method was called.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String|Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a unique identifier"
          },
          {
            "title": "param",
            "type": "Stringâ¦",
            "name": "propertyNames",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more property names"
          }
        ]
      },
      {
        "name": "setIfChanged",
        "displayName": "SC.Observable#setIfChanged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the property only if the passed value is different from the\n      current value.  Depending on how expensive a get() is on this property,\n      this may be more efficient.\n\n      NOTE: By default, the set() method will not set the value unless it has\n      changed. However, this check can skipped by setting .property().idempotent(NO)\n      setIfChanged() may be useful in this case.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to change"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to change"
          }
        ]
      },
      {
        "name": "getPath",
        "displayName": "SC.Observable#getPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Navigates the property path, returning the value at that point.\n\n      If any object in the path is undefined, returns undefined.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property path you want to retrieve"
          }
        ]
      },
      {
        "name": "setPath",
        "displayName": "SC.Observable#setPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Navigates the property path, finally setting the value.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property path to set"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to set"
          }
        ]
      },
      {
        "name": "setPathIfChanged",
        "displayName": "SC.Observable#setPathIfChanged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Navigates the property path, finally setting the value but only if\n      the value does not match the current value.  This will avoid sending\n      unecessary change notifications.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "this"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property path to set"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to set"
          }
        ]
      },
      {
        "name": "getEach",
        "displayName": "SC.Observable#getEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method to get an array of properties.\n\n      Pass in multiple property keys or an array of property keys.  This\n      method uses getPath() so you can also pass key paths.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Values of property keys."
          }
        ],
        "params": []
      },
      {
        "name": "incrementProperty",
        "displayName": "SC.Observable#incrementProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Increments the value of a property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new value of property"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property name"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "increment",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount to increment (optional)"
          }
        ]
      },
      {
        "name": "decrementProperty",
        "displayName": "SC.Observable#decrementProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Decrements the value of a property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new value of property"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property name"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "increment",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount to decrement (optional)"
          }
        ]
      },
      {
        "name": "toggleProperty",
        "displayName": "SC.Observable#toggleProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Inverts a property.  Property should be a bool.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property name"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional parameter for \"true\" value"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "alt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional parameter for \"false\" value"
          }
        ]
      },
      {
        "name": "notifyPropertyChange",
        "displayName": "SC.Observable#notifyPropertyChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method to call propertyWillChange/propertyDidChange.\n\n      Sometimes you need to notify observers that a property has changed value\n      without actually changing this value.  In those cases, you can use this\n      method as a convenience instead of calling propertyWillChange() and\n      propertyDidChange().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property key that has just changed."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The new value of the key.  May be null."
          }
        ]
      },
      {
        "name": "allPropertiesDidChange",
        "displayName": "SC.Observable#allPropertiesDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notifies observers of all possible property changes.\n\n      Sometimes when you make a major update to your object, it is cheaper to\n      simply notify all observers that their property might have changed than\n      to figure out specifically which properties actually did change.\n\n      In those cases, you can simply call this method to notify all property\n      observers immediately.  Note that this ignores property groups.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Observable",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "addProbe",
        "displayName": "SC.Observable#addProbe",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Allows you to inspect a property for changes. Whenever the named property\n      changes, a log will be printed to the console. This (along with removeProbe)\n      are convenience methods meant for debugging purposes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the property you want probed for changes"
          }
        ]
      },
      {
        "name": "removeProbe",
        "displayName": "SC.Observable#removeProbe",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Stops a running probe from observing changes to the observer.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the property you want probed for changes"
          }
        ]
      },
      {
        "name": "logProperty",
        "displayName": "SC.Observable#logProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Logs the named properties to the SC.Logger.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String...",
            "name": "propertyNames",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more property names"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isObservable",
        "displayName": "SC.Observable#isObservable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Observable",
        "overview": "Walk like that ol' duck",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6831,
    "name": "Page",
    "displayName": "SC.Page",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/page.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "SC.Page\n\n  A Page object is used to store a set of views that can be lazily configured\n  as needed.  The page object works by overloading the get() method.  The\n  first time you try to get the page",
    "methods": [
      {
        "name": "awake",
        "displayName": "SC.Page#awake",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds all views defined on this page instances and builds them.  This is \n    a quick, brute force way to wake up all of the views in a page object.  It\n    is not generally recommended. Instead, you should use get() or getPath() \n    to retrieve views and rely on the lazy creation process to set them up.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Page",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "getIfConfigured",
        "displayName": "SC.Page#getIfConfigured",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the named property unless the property is a view that has not yet\n    been configured.  In that case it will return undefined.  You can use this\n    method to safely get a view without waking it up.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "loc",
        "displayName": "SC.Page#loc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Applies a localization to every view builder defined on the page.  You must call this before you construct a view to apply the localization.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "locs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "localization",
        "displayName": "SC.Page.localization",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calling localization returns passed attrs.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "emitDesign",
        "displayName": "SC.Page#emitDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extend `SC.Page` to emit a design document for the entire page.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "designController",
        "displayName": "SC.Page#designController",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extend `SC.Page` to create a `PageDesignController` on demand.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "owner",
        "displayName": "SC.Page#owner",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Page",
        "overview": "When you create a page, you can set it's \"owner\" property to an\n    object outside the page definition. This allows views in the page\n    to use the owner object as a target, (as well as other objects\n    accessible through the owner object). E.g.\n    \n        myButton: SC.ButtonView.design({\n          title: 'Click me',\n          target: SC.outlet('page.owner'),\n          action: 'buttonClicked'\n        })\n    \n    Usually, you'll set 'owner' to the object defined in core.js.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "design",
        "displayName": "SC.Page.design",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Page",
        "overview": "Calling design() on a page is the same as calling create()",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 33912,
    "name": "PageDesignController",
    "displayName": "SC.PageDesignController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/controllers/page_design.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "An instance of this controller is created for every page where designers \n  are involved.  The Designer's themselves will register with the \n  controller so that you can hook to the controller to manage the views and\n  their editors.\n  \n  Among other things, this controller implements global selection support for\n  the designers.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 33944,
    "name": "pageFilesController",
    "displayName": "SC.pageFilesController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/controllers/page_files.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "in `suppressMain` mode all page files register with this array controller",
    "methods": [],
    "properties": []
  },
  {
    "guid": 34862,
    "name": "pageItemView",
    "displayName": "SC.pageItemView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/views/page_item_view.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Mike Ball",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ListItemVIew"
      }
    ],
    "overview": "This View is used by Greenhouse when application is in design mode\n  Used for displaying page items",
    "methods": [],
    "properties": []
  },
  {
    "guid": 22081,
    "name": "PalettePane",
    "displayName": "SC.PalettePane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/palette.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PanelPane"
      }
    ],
    "overview": "Displays a non-modal, default positioned, drag&drop-able palette pane.\n\n  The default way to use the palette pane is to simply add it to your page like this:\n  \n      SC.PalettePane.create({\n        layout: { width: 400, height: 200, right: 0, top: 0 },\n        contentView: SC.View.extend({\n        })\n      }).append();\n  \n  This will cause your palette pane to display.\n  \n  Palette pane is a simple way to provide non-modal messaging that won't \n  blocks the user's interaction with your application.  Palette panes are \n  useful for showing important detail informations with flexsible position.\n  They provide a better user experience than modal panel.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.PalettePane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PalettePane",
        "overview": "",
        "defaultValue": "['sc-palette']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isModal",
        "displayName": "SC.PalettePane#isModal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PalettePane",
        "overview": "Palettes are not modal by default",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "modalPane",
        "displayName": "SC.PalettePane#modalPane",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PalettePane",
        "overview": "",
        "defaultValue": "SC.ModalPane",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isAnchored",
        "displayName": "SC.PalettePane#isAnchored",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PalettePane",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6232,
    "name": "Pane",
    "displayName": "SC.Pane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/panes/pane.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ResponderContext"
      }
    ],
    "overview": "A Pane is like a regular view except that it does not need to live within a\n  parent view.  You usually use a Pane to form the root of a view hierarchy in\n  your application, such as your main application view or for floating\n  palettes, popups, menus, etc.\n\n  Usually you will not work directly with the SC.Pane class, but with one of\n  its subclasses such as SC.MainPane, SC.Panel, or SC.PopupPane.\n\n  ## Showing a Pane\n\n  To make a pane visible, you need to add it to your HTML document.  The\n  simplest way to do this is to call the append() method:\n\n      myPane = SC.Pane.create();\n      myPane.append(); // adds the pane to the document\n\n  This will insert your pane into the end of your HTML document body, causing\n  it to display on screen.  It will also register your pane with the\n  SC.RootResponder for the document so you can start to receive keyboard,\n  mouse, and touch events.\n\n  If you need more specific control for where you pane appears in the\n  document, you can use several other insertion methods such as appendTo(),\n  prependTo(), before() and after().  These methods all take a an element to\n  indicate where in your HTML document you would like you pane to be inserted.\n\n  Once a pane is inserted into the document, it will be sized and positioned\n  according to the layout you have specified.  It will then automatically\n  resize with the window if needed, relaying resize notifications to children\n  as well.\n\n  ## Hiding a Pane\n\n  When you are finished with a pane, you can hide the pane by calling the\n  remove() method.  This method will actually remove the Pane from the\n  document body, as well as deregistering it from the RootResponder so that it\n  no longer receives events.\n\n  The isVisibleInWindow method will also change to NO for the Pane and all of\n  its childViews and the views will no longer have their updateDisplay methods\n  called.\n\n  You can readd a pane to the document again any time in the future by using\n  any of the insertion methods defined in the previous section.\n\n  ## Receiving Events\n\n  Your pane and its child views will automatically receive any mouse or touch\n  events as long as it is on the screen.  To receive keyboard events, however,\n  you must focus the keyboard on your pane by calling makeKeyPane() on the\n  pane itself.  This will cause the RootResponder to route keyboard events to\n  your pane.  The pane, in turn, will route those events to its current\n  keyView, if there is any.\n\n  Note that all SC.Views (anything that implements SC.ClassicResponder,\n  really) will be notified when it is about or gain or lose keyboard focus.\n  These notifications are sent both when the view is made keyView of a\n  particular pane and when the pane is made keyPane for the entire\n  application.\n\n  You can prevent your Pane from becoming key by setting the acceptsKeyPane\n  to NO on the pane.  This is useful when creating palettes and other popups\n  that should not steal keyboard control from another view.",
    "methods": [
      {
        "name": "computeParentDimensions",
        "displayName": "SC.Pane#computeParentDimensions",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The parent dimensions are always the last known window size.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Rect",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "current window size"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "frame",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "windowSizeDidChange",
        "displayName": "SC.Pane#windowSizeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the root responder whenever the window resizes.  This should\n    simply begin the process of notifying children that the view size has\n    changed, if needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "oldSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the old window size"
          },
          {
            "title": "param",
            "type": "Rect",
            "name": "newSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new window size"
          }
        ]
      },
      {
        "name": "prependTo",
        "displayName": "SC.Pane#prependTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Inserts the pane's layer as the first child of the passed element.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "DOMElement|jQuery|String",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the element to prepend the pane's layer to.\n      This is passed to `jQuery()`, so any value supported by `jQuery()` will work."
          }
        ]
      },
      {
        "name": "removeFromParent",
        "displayName": "SC.Pane#removeFromParent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method has no effect in the pane.  Instead use remove().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "sendEvent",
        "displayName": "SC.Pane#sendEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to send the event down the responder chain for this pane.  If you\n    pass a target, this method will begin with the target and work up the\n    responder chain.  Otherwise, it will begin with the current rr\n    and walk up the chain looking for any responder that implements a handler\n    for the passed method and returns YES when executed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object that handled the event"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "action",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "nextResponder",
        "displayName": "SC.Pane#nextResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Pane's never have a next responder.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "becomeKeyPane",
        "displayName": "SC.Pane#becomeKeyPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Make the pane receive key events.  Until you call this method, the\n    keyView set for this pane will not receive key events.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "resignKeyPane",
        "displayName": "SC.Pane#resignKeyPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove the pane view status from the pane.  This will simply set the\n    keyPane on the rootResponder to null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "makeFirstResponder",
        "displayName": "SC.Pane#makeFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Makes the passed view (or any object that implements SC.Responder) into\n    the new firstResponder for this pane.  This will cause the current first\n    responder to lose its responder status and possibly keyResponder status as\n    well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "that cause this to become first responder"
          },
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "willLoseKeyPaneTo",
        "displayName": "SC.Pane#willLoseKeyPaneTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just before the pane loses it's keyPane status.  This will notify\n    the current keyView, if there is one, that it is about to lose focus,\n    giving it one last opportunity to save its state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "willBecomeKeyPaneFrom",
        "displayName": "SC.Pane#willBecomeKeyPaneFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just before the pane becomes keyPane.  Notifies the current keyView\n    that it is about to gain focus.  The keyView can use this opportunity to\n    prepare itself, possibly stealing any value it might need to steal from\n    the current key view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didLoseKeyPaneTo",
        "displayName": "SC.Pane#didLoseKeyPaneTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just after the pane has lost its keyPane status.  Notifies the\n    current keyView of the change.  The keyView can use this method to do any\n    final cleanup and changes its own display value if needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didBecomeKeyPaneFrom",
        "displayName": "SC.Pane#didBecomeKeyPaneFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just after the keyPane focus has changed to the receiver.  Notifies\n    the keyView of its new status.  The keyView should use this method to\n    update its display and actually set focus on itself at the browser level\n    if needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "focusFrom",
        "displayName": "SC.Pane#focusFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when the pane is about to become the focused pane.  Override to\n    implement your own custom handling.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane that currently have focus"
          }
        ]
      },
      {
        "name": "blurTo",
        "displayName": "SC.Pane#blurTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when the the pane is about to lose its focused pane status.\n    Override to implement your own custom handling",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the pane that will receive focus next"
          }
        ]
      },
      {
        "name": "blurMainTo",
        "displayName": "SC.Pane#blurMainTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when the view is about to lose its mainPane status.  The default\n    implementation will also remove the pane from the document since you can't\n    have more than one mainPane in the document at a time.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "focusMainFrom",
        "displayName": "SC.Pane#focusMainFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes when the view is about to become the new mainPane.  The default\n    implementation simply updates the isMainPane property.  In your subclass,\n    you should make sure your pane has been added to the document before\n    trying to make it the mainPane.  See SC.MainPane for more information.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "append",
        "displayName": "SC.Pane#append",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Inserts the pane at the end of the document.  This will also add the pane\n    to the rootResponder.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RootResponder",
            "name": "rootResponder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.Pane#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the pane from the document.  This will remove the\n    DOM node and deregister you from the document window.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "insert",
        "displayName": "SC.Pane#insert",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Inserts the current pane into the page. The actual DOM insertion is done\n    by a function passed into `insert`, which receives the layer as a\n    parameter. This function is responsible for making sure a layer exists,\n    is not already attached, and for calling `paneDidAttach` when done.\n\n        pane = SC.Pane.create();\n        pane.insert(function(layer) {\n          jQuery(layer).insertBefore(\"#otherElement\");\n        });",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "fn",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function which performs the actual DOM manipulation\n      necessary in order to insert the pane's layer into the DOM."
          }
        ]
      },
      {
        "name": "appendTo",
        "displayName": "SC.Pane#appendTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Inserts the pane into the DOM.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "DOMElement|jQuery|String",
            "name": "elem",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the element to append the pane's layer to.\n      This is passed to `jQuery()`, so any value supported by `jQuery()` will work."
          }
        ]
      },
      {
        "name": "recomputeDependentProperties",
        "displayName": "SC.Pane#recomputeDependentProperties",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called after the pane is attached and before child views\n    are notified that they were appended to the document. Override this\n    method to recompute properties that depend on the pane's existence\n    in the DOM but must be run prior to child view notification.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasTouchIntercept",
        "displayName": "SC.Pane#hasTouchIntercept",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if wantsTouchIntercept and this is a touch platform.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "recomputeIsVisibleInWindow",
        "displayName": "SC.Pane#recomputeIsVisibleInWindow",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the isVisibleInWindow state on the pane and its childViews if\n    necessary.  This works much like SC.View's default implementation, but it\n    does not need a parentView to function.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Pane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "currentWindowSize",
        "displayName": "SC.Pane#currentWindowSize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "Last known window size.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isPane",
        "displayName": "SC.Pane#isPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "Returns YES for easy detection of when you reached the pane.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "page",
        "displayName": "SC.Pane#page",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "Set to the current page when the pane is instantiated from a page object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rootResponder",
        "displayName": "SC.Pane#rootResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "The rootResponder for this pane.  Whenever you add a pane to a document,\n    this property will be set to the rootResponder that is now forwarding\n    events to the pane.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "firstResponder",
        "displayName": "SC.Pane#firstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "The first responder.  This is the first view that should receive action\n    events.  Whenever you click on a view, it will usually become\n    firstResponder.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsKeyPane",
        "displayName": "SC.Pane#acceptsKeyPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "If YES, this pane can become the key pane.  You may want to set this to NO\n    for certain types of panes.  For example, a palette may never want to\n    become key.  The default value is YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isKeyPane",
        "displayName": "SC.Pane#isKeyPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "This is set to YES when your pane is currently the target of key events.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMainPane",
        "displayName": "SC.Pane#isMainPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "Returns YES whenever the pane has been set as the main pane for the\n    application.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isPaneAttached",
        "displayName": "SC.Pane#isPaneAttached",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "YES when the pane is currently attached to a document DOM.  Read only.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "wantsTouchIntercept",
        "displayName": "SC.Pane#wantsTouchIntercept",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "If YES, a touch intercept pane will be added above this pane when on\n    touch platforms.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "zIndex",
        "displayName": "SC.Pane#zIndex",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "The Z-Index of the pane. Currently, you have to match this in CSS.\n    TODO: ALLOW THIS TO AUTOMATICALLY SET THE Z-INDEX OF THE PANE (as an option).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "touchZ",
        "displayName": "SC.Pane#touchZ",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Pane",
        "overview": "The amount over the pane's z-index that the touch intercept should be.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22100,
    "name": "PanelPane",
    "displayName": "SC.PanelPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/panel.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Erich Ocean",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Pane"
      }
    ],
    "overview": "Most SproutCore applications need modal panels. The default way to use the \n  panel pane is to simply add it to your page like this:\n  \n      SC.PanelPane.create({\n        layout: { width: 400, height: 200, centerX: 0, centerY: 0 },\n        contentView: SC.View.extend({\n        })\n      }).append();\n  \n  This will cause your panel to display.  The default layout for a Panel \n  is to cover the entire document window with a semi-opaque background, and to \n  resize with the window.",
    "methods": [
      {
        "name": "replaceContent",
        "displayName": "SC.PanelPane#replaceContent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "newContent",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentViewDidChange",
        "displayName": "SC.PanelPane#contentViewDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the content property changes. This method will simply\n    call replaceContent. Override replaceContent to change how the view is\n    swapped out.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.PanelPane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "",
        "defaultValue": "['sc-panel']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsKeyPane",
        "displayName": "SC.PanelPane#acceptsKeyPane",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.Pane#acceptsKeyPane"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.PanelPane#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "The WAI-ARIA role for panel pane.",
        "defaultValue": "'dialog'",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "ariaLabel",
        "displayName": "SC.PanelPane#ariaLabel",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "The WAI-ARIA label for the panel. Screen readers will use this to tell\n    the user a name for the panel.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isModal",
        "displayName": "SC.PanelPane#isModal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "Indicates that a pane is modal and should not allow clicks to pass\n    though to panes underneath it. This will usually cause the pane to show\n    the modalPane underneath it.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "modalPane",
        "displayName": "SC.PanelPane#modalPane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "The modal pane to place behind this pane if this pane is modal. This\n    must be a subclass or an instance of SC.ModalPane.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentView",
        "displayName": "SC.PanelPane#contentView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "Set this to the view you want to act as the content within the panel.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.PanelPane#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PanelPane",
        "overview": "The name of the theme's `SC.PanelPane` render delegate.",
        "defaultValue": "'panelRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22145,
    "name": "PickerPane",
    "displayName": "SC.PickerPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/picker.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PalettePane"
      }
    ],
    "overview": "Display a non-modal pane that automatically repositions around a view so as\n  to remain visible.\n  \n  An `SC.PickerPane` repositions around the view to which it is anchored as the\n  browser window is resized so as to ensure the pane's content remains visible.\n  A picker pane is useful for displaying supplementary information and does not\n  block the user's interaction with other UI elements. Picker panes typically\n  provide a better user experience than modal panels.\n\n  An `SC.PickerPane` repositions itself according to the optional `preferMatrix`\n  argument passed in the `.popup()` method call. The `preferMatrix` either\n  specifies an offset-based arrangement behavior or a position-based arrangement\n  behavior depending on the `preferType` argument in the `.popup()` call.\n\n  The simplest way to create and display a picker pane:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(someView);\n  \n  This displays the `SC.PickerPane` anchored to `someView`.\n\n  ## Positioning\n  \n  Picker pane positioning can be classified into two broad categories:\n  offset-based and position-based.\n\n  ### Offset-based\n\n  When `preferType` is unspecified, `SC.PICKER_MENU` or `SC.PICKER_FIXED`, then\n  the `preferMatrix` array describes the offset that is used to position the\n  pane below the anchor. The offset is described by an array of three values,\n  defaulting to `[1, 4, 3]`. The first value controls the x offset and the second\n  value the y offset. The third value can be `0` (right) or `3` (bottom),\n  controlling whether the origin of the pane is further offset by the width\n  (in the case of 0) or the height (in the case of 3) of the anchor.\n  \n  ### Position-based\n  \n  When `preferType` is `SC.PICKER_POINTER` or `SC.PICKER_MENU_POINTER`, then\n  the `preferMatrix` specifies the sides in the order in which you want the\n  `SC.PickerPane` to try to arrange itself around the view to which it is\n  anchored. The fifth element in the `preferMatrix` specifies which side the\n  `SC.PickerPane` should display on when there isn't enough space around any\n  of the preferred sides.\n  \n  Anchor sides are defined by their index in `SC.POINTER_LAYOUT`, where right\n  is `0`, left is `1`, top is `2`, and bottom is `3`.\n  \n  For example, the `preferMatrix` of `[3, 0, 1, 2, 2]` says: \"Display below the\n  anchor (3); if there isn't enough space then display to the right of the anchor (0).\n  If there isn't enough space either below or to the right of the anchor, then appear\n  to the left (1), unless there is also no space on the left, in which case display\n  above the anchor (2).\"\n  \n  ## Position Rules\n  \n  When invoking `.popup()` you can optionally specify a picker position rule with\n  the `preferType` argument.\n  \n  If no `preferType` is specified, the picker pane is displayed just below the anchor.\n  The pane will reposition automatically for optimal visibility, ensuring the top-left\n  corner is visible.\n  \n  These position rules have the following behaviors:\n  \n  ### `SC.PICKER_MENU`\n  \n  Positioning is offset-based, with `preferMatrix` defaulting to `[1, 4, 3]`.\n  Furthermore, a minimum left and right padding to window, of 7px and 8px, respectively,\n  is enforced.\n  \n  \n  ### `SC.PICKER_FIXED`\n  \n  Positioning is offset-based, with `preferMatrix` defaulting to `[1, 4, 3]` and\n  skipping `fitPositionToScreen`.\n  \n  \n  ### `SC.PICKER_POINTER`\n  \n  Positioning is position-based, with `preferMatrix` defaulting to `[0, 1, 2, 3, 2]`,\n  i.e. right > left > top > bottom; fallback to top.\n  \n  \n  ### `SC.PICKER_MENU_POINTER`\n  \n  Positioning is position-based, with `preferMatrix` defaulting to `[3, 0, 1, 2, 3]`,\n  i.e. bottom, right, left, top; fallback to bottom.\n  \n  \n  \n  ## Examples\n  \n  Examples for applying popular customized picker position rules:\n  \n  ### default:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor);\n\n  ### menu below the anchor with default `preferMatrix` of `[1,4,3]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_MENU);\n\n  ### menu on the right side of anchor with custom `preferMatrix` of `[2,6,0]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_MENU, [2,6,0]);\n\n  ### fixed below the anchor with default `preferMatrix` of `[1,4,3]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_FIXED);\n\n  ### fixed on the right side of anchor with `preferMatrix` of `[-22,-17,0]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_FIXED, [-22,-17,0]);\n\n  ### pointer with default `preferMatrix` of `[0,1,2,3,2]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_POINTER);\n  \n  Positioning: right (0) > left (1) > top (2) > bottom (3). Fallback to top (2).\n\n  ### pointer with custom `preferMatrix` of `[3,0,1,2,2]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_POINTER, [3,0,1,2,2]);\n\n  Positioning: bottom (3) > right (0) > left (1) > top (2). Fallback to top (2).\n\n  ### menu-pointer with default `preferMatrix` of `[3,0,1,2,3]`:\n\n      SC.PickerPane.create({\n        layout: { width: 400, height: 200 },\n        contentView: SC.View.extend({})\n      }).popup(anchor, SC.PICKER_MENU_POINTER);\n  \n  Positioning: bottom (3) > right (0) > left (1) > top (2). Fallback to bottom (3).",
    "methods": [
      {
        "name": "popup",
        "displayName": "SC.PickerPane#popup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Displays a new picker pane.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.PickerPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View|HTMLElement",
            "name": "anchorViewOrElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view or element to anchor to"
          },
          {
            "title": "param",
            "type": "String",
            "name": "preferType",
            "isOptional": true,
            "defaultValue": "",
            "desc": "apply picker position rule"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "preferMatrix",
            "isOptional": true,
            "defaultValue": "",
            "desc": "apply custom offset or position pref matrix for specific preferType"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "pointerOffset",
            "isOptional": true,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "windowSizeDidChange",
        "displayName": "SC.PickerPane#windowSizeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the root responder. Re-position picker whenever the window resizes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "oldSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "newSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.PickerPane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "['sc-picker']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isAnchored",
        "displayName": "SC.PickerPane#isAnchored",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isModal",
        "displayName": "SC.PickerPane#isModal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pointerPos",
        "displayName": "SC.PickerPane#pointerPos",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "'perfectRight'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pointerPosX",
        "displayName": "SC.PickerPane#pointerPosX",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pointerPosY",
        "displayName": "SC.PickerPane#pointerPosY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "anchorElement",
        "displayName": "SC.PickerPane#anchorElement",
        "objectType": "property",
        "propertyType": "HTMLElement",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "This property will be set to the element (or view.get('layer')) that \n    triggered your picker to show.  You can use this to properly position your \n    picker.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "preferType",
        "displayName": "SC.PickerPane#preferType",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "popular customized picker position rule",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "preferMatrix",
        "displayName": "SC.PickerPane#preferMatrix",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "default/custom offset or position pref matrix for specific preferType",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pointerOffset",
        "displayName": "SC.PickerPane#pointerOffset",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "default/custom offset of pointer for picker-pointer or pointer-menu",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "extraRightOffset",
        "displayName": "SC.PickerPane#extraRightOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "default offset of extra-right pointer for picker-pointer or pointer-menu",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "removeTarget",
        "displayName": "SC.PickerPane#removeTarget",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "The target object to invoke the remove action on when the user clicks off the \n    picker that is to be removed.\n\n    If you set this target, the action will be called on the target object\n    directly when the user clicks off the picker. If you leave this property \n    set to null, then the button will search the responder chain for a view that\n    implements the action when the button is pressed instead.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "removeAction",
        "displayName": "SC.PickerPane#removeAction",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "The name of the action you want triggered when the user clicks off the\n    picker pane that is to be removed. \n    \n    This property is used in conjunction with the removeTarget property to execute\n    a method when the user clicks off the picker pane.  \n\n    If you do not set a target, then clicking off the picker pane will cause the\n    responder chain to search for a view that implements the action you name\n    here, if one was provided. \n    \n    Note that this property is optional. If no explicit value is provided then the \n    picker pane will perform the default action which is to simply remove itself.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.PickerPane#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "['preferType','pointerPos','pointerPosY']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.PickerPane#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "defaultValue": "'pickerRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "PICKER_POINTER_OFFSET",
        "displayName": "SC.PickerPane.PICKER_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "PICKER_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.PICKER_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_PICKER_MENU_POINTER_OFFSET",
        "displayName": "SC.PickerPane.TINY_PICKER_MENU_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.TINY_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_PICKER_MENU_POINTER_OFFSET",
        "displayName": "SC.PickerPane.SMALL_PICKER_MENU_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.SMALL_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_PICKER_MENU_POINTER_OFFSET",
        "displayName": "SC.PickerPane.REGULAR_PICKER_MENU_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.REGULAR_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_PICKER_MENU_POINTER_OFFSET",
        "displayName": "SC.PickerPane.LARGE_PICKER_MENU_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.LARGE_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_PICKER_MENU_POINTER_OFFSET",
        "displayName": "SC.PickerPane.HUGE_PICKER_MENU_POINTER_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "displayName": "SC.PickerPane.HUGE_PICKER_MENU_EXTRA_RIGHT_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PickerPane",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36262,
    "name": "PinchGesture",
    "displayName": "SC.PinchGesture",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/gestures/pinch.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Gesture"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "unassignedTouchesDidChange",
        "displayName": "SC.PinchGesture#unassignedTouchesDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The default for this method is to loop through each touch one by one to see if it qualifies.\n    Here, however, we want to take the touches when there are 2, and only 2 of them. As a result\n    we can do the work here, with no need to pass them on.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The touch event"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": "All touches"
          }
        ]
      },
      {
        "name": "touchStart",
        "displayName": "SC.PinchGesture#touchStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "We could probably just return YES here, since unassignedTouchesDidChange shouldn't let more\n    than 2 touches through, however, we're double checking here to make sure that we haven't\n    already captured 2 touches.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if there were none or one touches prior to this, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Touch",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesDragged",
        "displayName": "SC.PinchGesture#touchesDragged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Here we're getting the distance between the 2 touches and comparing it to their starting\n    distance. It's possible we'll want to implement a more complex algorithm to make things\n    a bit smoother. Once we have the relative change, we trigger the pinch action in the view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Array",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchEnd",
        "displayName": "SC.PinchGesture#touchEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Once one touch has ended we don't need to watch the other so we release all touches.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Touch",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.PinchGesture#name",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PinchGesture",
        "overview": "",
        "defaultValue": "\"pinch\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMultitouch",
        "displayName": "SC.PinchGesture#acceptsMultitouch",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PinchGesture",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scale",
        "displayName": "SC.PinchGesture#scale",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PinchGesture",
        "overview": "",
        "defaultValue": "1",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28908,
    "name": "PopupButtonView",
    "displayName": "SC.PopupButtonView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/popup_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Santosh Shanbhogue, Tom Dale",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "SC.PopupButtonView displays a pop-up menu when clicked, from which the user\n  can select an item.\n\n  To use, create the SC.PopupButtonView as you would a standard SC.ButtonView,\n  then set the menu property to an instance of SC.MenuPane. For example:\n\n      SC.PopupButtonView.design({\n        layout: { width: 200, height: 18 },\n        menuBinding: 'MyApp.menuController.menuPane'\n      });\n\n  You would then have your MyApp.menuController return an instance of the menu\n  to display.",
    "methods": [
      {
        "name": "setupMenu",
        "displayName": "SC.PopupButtonView#setupMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Instantiates the menu if it exists and is not already instantiated.\n   If another menu is already instantiated, it will be destroyed.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createMenu",
        "displayName": "SC.PopupButtonView#createMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to instantiate a menu. You can override this to set properties\n    such as the menu's width or the currently selected item.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.MenuPane",
            "name": "menu",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The MenuPane class to instantiate."
          }
        ]
      },
      {
        "name": "showMenu",
        "displayName": "SC.PopupButtonView#showMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Shows the PopupButton's menu. You can call this to show it manually.\n    \n    NOTE: The menu will not be shown until the end of the Run Loop.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hideMenu",
        "displayName": "SC.PopupButtonView#hideMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Hides the PopupButton's menu if it is currently showing.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.PopupButtonView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "",
        "defaultValue": "['sc-popup-button']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.PopupButtonView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "",
        "defaultValue": "'popupButtonRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "preferMatrix",
        "displayName": "SC.PopupButtonView#preferMatrix",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "The prefer matrix to use when displaying the menu.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menu",
        "displayName": "SC.PopupButtonView#menu",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "The SC.MenuPane that should be displayed when the button is clicked.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldLoadInBackground",
        "displayName": "SC.PopupButtonView#shouldLoadInBackground",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "If YES and the menu is a class, this will cause a task that will instantiate the menu\n    to be added to SC.backgroundTaskQueue.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuPreferMatrix",
        "displayName": "SC.PopupButtonView#menuPreferMatrix",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView",
        "overview": "The prefer matrix (positioning information) to use to pop up the new menu.",
        "defaultValue": "[0, 0, 0]",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 35513,
    "name": "InstantiateMenuTask",
    "displayName": "SC.PopupButtonView.InstantiateMenuTask",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/select_view/views/popup_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "An SC.Task that handles instantiating a PopupButtonView's menu. It is used\n  by SC.PopupButtonView to instantiate the menu in the backgroundTaskQueue.",
    "methods": [
      {
        "name": "run",
        "displayName": "SC.PopupButtonView.InstantiateMenuTask#run",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Instantiates the menu.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "queue",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "popupButton",
        "displayName": "SC.PopupButtonView.InstantiateMenuTask#popupButton",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.PopupButtonView.InstantiateMenuTask",
        "overview": "The popupButton whose menu should be instantiated.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28949,
    "name": "ProgressView",
    "displayName": "SC.ProgressView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/progress.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "Displays a progress bar.  You can display both a defined and an \n  indeterminate progressbar.  The progress bar itself is designed to be styled\n  using CSS classes with the following structure:\n  \n      <div class=\"sc-progress-view\"><div class=\"inner\"></div></div>\n  \n  The outer can form the boundary of the bar while the inner will be adjusted \n  to fit the percentage of the progress.\n  \n  Creating a ProgressView accepts a number of properties, for example:\n  \n      progressView: SC.ProgressView.design({\n        value: 50, \n        minimum: 0, \n        maximum: 100,\n        isIndeterminate: NO,\n        isEnabled: YES\n      })",
    "methods": [
      {
        "name": "ariaValue",
        "displayName": "SC.ProgressView#ariaValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The WAI-ARIA value for the progress view. This value will be passed to any\n    rendering code as-is, not converted into percentages, etc. It is computed\n    based on the original value property.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ProgressView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "",
        "defaultValue": "['sc-progress-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.ProgressView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "",
        "defaultValue": "'displayValue ariaValue minimum maximum isRunning isEnabled isIndeterminate animatedBackgroundMatrix offsetRange'.w()",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.ProgressView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "",
        "defaultValue": "'progressRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.ProgressView#value",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Bind this to the current value of the progress bar.  Note that by default \n    an empty value will disable the progress bar and a multiple value will make \n    it indeterminate.",
        "defaultValue": "0.50",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayValue",
        "displayName": "SC.ProgressView#displayValue",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.ProgressView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "The WAI-ARIA role for progress view.",
        "defaultValue": "'progressbar'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimum",
        "displayName": "SC.ProgressView#minimum",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "The minimum value of the progress.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentMinimumKey",
        "displayName": "SC.ProgressView#contentMinimumKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Optionally specify the key used to extract the minimum progress value \n    from the content object.  If this is set to null then the minimum value\n    will not be derived from the content object.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximum",
        "displayName": "SC.ProgressView#maximum",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "The maximum value of the progress bar.",
        "defaultValue": "1.0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "offsetRange",
        "displayName": "SC.ProgressView#offsetRange",
        "objectType": "property",
        "propertyType": "Integer",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "This should now be changed in themes.\n",
        "memberOf": "SC.ProgressView",
        "overview": "Deprecated. This is a render setting, and as such, should be adjusted in\n    the theme. Investigate your theme's progressRenderDelegate.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentMaximumKey",
        "displayName": "SC.ProgressView#contentMaximumKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Optionally specify the key used to extract the maximum progress value \n    from the content object.  If this is set to null then the maximum value\n    will not be derived from the content object.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isIndeterminate",
        "displayName": "SC.ProgressView#isIndeterminate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Set to true if the item in progress is indeterminate.  This may be \n    overridden by the actual value.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRunning",
        "displayName": "SC.ProgressView#isRunning",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Set to YES when the process is currently running.  This will cause the \n    progress bar to animate, especially if it is indeterminate.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "animatedBackgroundMatrix",
        "displayName": "SC.ProgressView#animatedBackgroundMatrix",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Set to the matrix used for background image position for animation.\n    [1st image y-location, offset, total number of images]",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentIsIndeterminateKey",
        "displayName": "SC.ProgressView#contentIsIndeterminateKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ProgressView",
        "overview": "Optionally specify the key used to extract the isIndeterminate value \n    from the content object.  If this is set to null then the isIndeterminate \n    value will not be derived from the content object.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 15551,
    "name": "Query",
    "displayName": "SC.Query",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/query.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      }
    ],
    "overview": "This permits you to perform queries on your data store,\n  written in a SQL-like language. Here is a simple example:\n    \n      q = SC.Query.create({\n        conditions: \"firstName = 'Jonny' AND lastName = 'Cash'\"\n      })\n    \n  You can check if a certain record matches the query by calling\n\n      q.contains(record)\n  \n  To find all records of your store, that match query q, use findAll with\n  query q as argument:\n  \n      r = MyApp.store.findAll(q)\n  \n  `r` will be a record array containing all matching records.\n  To limit the query to a record type of `MyApp.MyModel`,\n  you can specify the type as a property of the query like this:\n  \n      q = SC.Query.create({ \n        conditions: \"firstName = 'Jonny' AND lastName = 'Cash'\",\n        recordType: MyApp.MyModel \n      })\n  \n  Calling `find()` like above will now return only records of type t.\n  It is recommended to limit your query to a record type, since the query will\n  have to look for matching records in the whole store, if no record type\n  is given.\n  \n  You can give an order, which the resulting records should follow, like this:\n  \n      q = SC.Query.create({ \n        conditions: \"firstName = 'Jonny' AND lastName = 'Cash'\",\n        recordType: MyApp.MyModel,\n        orderBy: \"lastName, year DESC\" \n      });\n  \n  The default order direction is ascending. You can change it to descending\n  by writing `'DESC'` behind the property name like in the example above.\n  If no order is given, or records are equal in respect to a given order,\n  records will be ordered by guid.\n\n  SproutCore Query Language\n  =====\n  \n  Features of the query language:\n  \n  Primitives:\n\n   - record properties\n   - `null`, `undefined`\n   - `true`, `false`\n   - numbers (integers and floats)\n   - strings (double or single quoted)\n  \n  Parameters:\n\n   - `%@` (wild card)\n   - `{parameterName}` (named parameter)\n\n  Wild cards are used to identify parameters by the order in which they appear \n  in the query string. Named parameters can be used when tracking the order \n  becomes difficult. Both types of parameters can be used by giving the \n  parameters as a property to your query object:\n  \n      yourQuery.parameters = yourParameters\n  \n  where yourParameters should have one of the following formats:\nfor wild cards: `[firstParam, secondParam, thirdParam]`\nfor named params: `{name1: param1, mane2: parma2}`\n\n  You cannot use both types of parameters in a single query!\n  \n  Operators:\n  \n   - `=`\n   - `!=`\n   - `<`\n   - `<=`\n   - `>`\n   - `>=`\n   - `BEGINS_WITH` -- (checks if a string starts with another one)\n   - `ENDS_WITH` --   (checks if a string ends with another one)\n   - `CONTAINS` --    (checks if a string contains another one, or if an\n                      object is in an array)\n   - `MATCHES` --     (checks if a string is matched by a regexp,\n                      you will have to use a parameter to insert the regexp)\n   - `ANY` --         (checks if the thing on its left is contained in the array\n                      on its right, you will have to use a parameter\n                      to insert the array)\n   - `TYPE_IS` --     (unary operator expecting a string containing the name \n                      of a Model class on its right side, only records of this\n                      type will match)\n    \n  Boolean Operators:\n  \n   - `AND`\n   - `OR`\n   - `NOT`\n  \n  Parenthesis for grouping:\n  \n   - `(` and `)`\n\n\n  Adding Your Own Query Handlers\n  ---\n\n  You can extend the query language with your own operators by calling:\n\n      SC.Query.registerQueryExtension('your_operator', your_operator_definition);\n\n  See details below. As well you can provide your own comparison functions\n  to control ordering of specific record properties like this:\n\n      SC.Query.registerComparison(property_name, comparison_for_this_property);\n  \n  Examples\n  \n  Some example queries:\n  \n  TODO add examples",
    "methods": [
      {
        "name": "expandedRecordTypes",
        "displayName": "SC.Query#expandedRecordTypes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the complete set of `recordType`s matched by this query.  Includes\n    any named `recordType`s plus their subclasses.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isRemote",
        "displayName": "SC.Query#isRemote",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` if query location is Remote.  This is sometimes more \n    convenient than checking the location.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isLocal",
        "displayName": "SC.Query#isLocal",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` if query location is Local.  This is sometimes more \n    convenient than checking the location.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "contains",
        "displayName": "SC.Query#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` if record is matched by the query, `NO` otherwise.  This is \n    used when computing a query locally.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if record belongs, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record to check"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "parameters",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional override parameters"
          }
        ]
      },
      {
        "name": "containsRecordTypes",
        "displayName": "SC.Query#containsRecordTypes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` if the query matches one or more of the record types in the\n    passed set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if record types match"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Set",
            "name": "types",
            "isOptional": false,
            "defaultValue": "",
            "desc": "set of record types"
          }
        ]
      },
      {
        "name": "compare",
        "displayName": "SC.Query#compare",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the sort order of the two passed records, taking into account the\n    orderBy property set on this query.  This method does not verify that the\n    two records actually belong in the query set or not; this is checked using\n    `contains()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "-1 if record1 < record2, \n                      +1 if record1 > record2,\n                      0 if equal"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the first record"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the second record"
          }
        ]
      },
      {
        "name": "parse",
        "displayName": "SC.Query#parse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method has to be called before the query object can be used.\n    You will normaly not have to do this; it will be called automatically\n    if you try to evaluate a query.\n    You can, however, use this function for testing your queries.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if parsing succeeded, false otherwise"
          }
        ],
        "params": []
      },
      {
        "name": "queryWithScope",
        "displayName": "SC.Query#queryWithScope",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the same query but with the scope set to the passed record array.\n    This will copy the receiver.  It also stores these queries in a cache to\n    reuse them if possible.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new query"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RecordArray",
            "name": "recordArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the scope"
          }
        ]
      },
      {
        "name": "tokenizeString",
        "displayName": "SC.Query#tokenizeString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Takes a string and tokenizes it based on the grammar definition\n    provided. Called by `parse()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "list of tokens"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "inputString",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the string to tokenize"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "grammar",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the grammar definition (normally queryLanguage)"
          }
        ]
      },
      {
        "name": "buildTokenTree",
        "displayName": "SC.Query#buildTokenTree",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Takes an array of tokens and returns a tree, depending on the\n    specified tree logic. The returned object will have an error property\n    if building of the tree failed. Check it to get some information\n    about what happend.\n    If everything worked, the tree can be evaluated by calling\n    \n        tree.evaluate(record, parameters)\n    \n    If `tokenList` is empty, a single token will be returned which will\n    evaluate to true for all records.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "token tree"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "tokenList",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the list of tokens"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "treeLogic",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the logic definition (normally queryLanguage)"
          }
        ]
      },
      {
        "name": "buildOrder",
        "displayName": "SC.Query#buildOrder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Takes a string containing an order statement and returns an array\n    describing this order for easier processing.\n    Called by `parse()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array | Function",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of order statement, or a function if a function was specified"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String | Function",
            "name": "orderOp",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the string containing the order statement, or a comparison function"
          }
        ]
      },
      {
        "name": "storeKeyFor",
        "displayName": "SC.Query.storeKeyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a query, returns the associated `storeKey`.  For the inverse of this \n    method see `SC.Store.queryFor()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a storeKey."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query"
          }
        ]
      },
      {
        "name": "containsRecords",
        "displayName": "SC.Query.containsRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will find which records match a give `SC.Query` and return an array of \n    store keys. This will also apply the sorting for the query.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array instance of store keys matching the SC.Query (sorted)"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to apply"
          },
          {
            "title": "param",
            "type": "SC.RecordArray",
            "name": "records",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to search within"
          },
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to materialize record from"
          }
        ]
      },
      {
        "name": "orderStoreKeys",
        "displayName": "SC.Query.orderStoreKeys",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sorts a set of store keys according to the orderBy property\n    of the `SC.Query`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "sorted store keys.  may be same instance as passed value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to sort"
          },
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to use for sorting"
          },
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to materialize records from"
          }
        ]
      },
      {
        "name": "compareStoreKeys",
        "displayName": "SC.Query.compareStoreKeys",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default sort method that is used when calling `containsStoreKeys()`\n    or `containsRecords()` on this query. Simply materializes two records\n    based on `storekey`s before passing on to `compare()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "-1 if record1 < record2,  +1 if record1 > record2, 0 if equal"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a store key"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a store key"
          },
          {
            "title": "param",
            "type": "",
            "name": "storeKey1",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "storeKey2",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "build",
        "displayName": "SC.Query.build",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a `SC.Query` instance reflecting the passed properties.  Where \n    possible this method will return cached query instances so that multiple \n    calls to this method will return the same instance.  This is not possible \n    however, when you pass custom parameters or set ordering. All returned \n    queries are frozen.\n    \n    Usually you will not call this method directly.  Instead use the more\n    convenient `SC.Query.local()` and `SC.Query.remote()`.\n    \n    Examples\n    \n    There are a number of different ways you can call this method.  \n    \n    The following return local queries selecting all records of a particular \n    type or types, including any subclasses:\n    \n        var people = SC.Query.local(Ab.Person);\n        var peopleAndCompanies = SC.Query.local([Ab.Person, Ab.Company]);\n      \n        var people = SC.Query.local('Ab.Person');\n        var peopleAndCompanies = SC.Query.local('Ab.Person Ab.Company'.w());\n      \n        var allRecords = SC.Query.local(SC.Record);\n    \n    The following will match a particular type of condition:\n    \n        var married = SC.Query.local(Ab.Person, \"isMarried=YES\");\n        var married = SC.Query.local(Ab.Person, \"isMarried=%@\", [YES]);\n        var married = SC.Query.local(Ab.Person, \"isMarried={married}\", {\n          married: YES\n        });\n    \n    You can also pass a hash of options as the second parameter.  This is \n    how you specify an order, for example:\n    \n        var orderedPeople = SC.Query.local(Ab.Person, { orderBy: \"firstName\" });",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "location",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query location."
          },
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type or types."
          },
          {
            "title": "param",
            "type": "String",
            "name": "conditions",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional conditions"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional params. or pass multiple args."
          }
        ]
      },
      {
        "name": "local",
        "displayName": "SC.Query.local",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a `LOCAL` query with the passed options.  For a full description of\n    the parameters you can pass to this method, see `SC.Query.build()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type or types."
          },
          {
            "title": "param",
            "type": "String",
            "name": "conditions",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional conditions"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional params. or pass multiple args."
          }
        ]
      },
      {
        "name": "remote",
        "displayName": "SC.Query.remote",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a `REMOTE` query with the passed options.  For a full description of\n    the parameters you can pass to this method, see `SC.Query.build()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type or types."
          },
          {
            "title": "param",
            "type": "String",
            "name": "conditions",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional conditions"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional params. or pass multiple args."
          }
        ]
      },
      {
        "name": "registerComparison",
        "displayName": "SC.Query.registerComparison",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call to register a comparison for a specific property name.\n  The function you pass should accept two values of this property\n  and return -1 if the first is smaller than the second,\n  0 if they are equal and 1 if the first is greater than the second.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": "of the record property"
          },
          {
            "title": "param",
            "type": "Function",
            "name": "custom",
            "isOptional": false,
            "defaultValue": "",
            "desc": "comparison function"
          }
        ]
      },
      {
        "name": "registerQueryExtension",
        "displayName": "SC.Query.registerQueryExtension",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call to register an extension for the query language.\n  You shoud provide a name for your extension and a definition\n  specifying how it should be parsed and evaluated.\n  \n  Have a look at `queryLanguage` for examples of definitions.\n  \n  TODO add better documentation here",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "tokenName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name of the operator"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "token",
            "isOptional": false,
            "defaultValue": "",
            "desc": "extension definition"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isQuery",
        "displayName": "SC.Query#isQuery",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "conditions",
        "displayName": "SC.Query#conditions",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Unparsed query conditions.  If you are handling a query yourself, then \n    you will find the base query string here.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orderBy",
        "displayName": "SC.Query#orderBy",
        "objectType": "property",
        "propertyType": "String | Function",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Optional orderBy parameters.  This can be a string of keys, optionally\n    beginning with the strings `\"DESC \"` or `\"ASC \"` to select descending or \n    ascending order.\n    \n    Alternatively, you can specify a comparison function, in which case the\n    two records will be sent to it.  Your comparison function, as with any\n    other, is expected to return -1, 0, or 1.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordType",
        "displayName": "SC.Query#recordType",
        "objectType": "property",
        "propertyType": "SC.Record",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "The base record type or types for the query.  This must be specified to\n    filter the kinds of records this query will work on.  You may either \n    set this to a single record type or to an array or set of record types.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordTypes",
        "displayName": "SC.Query#recordTypes",
        "objectType": "property",
        "propertyType": "SC.Enumerable",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Optional array of multiple record types.  If the query accepts multiple \n    record types, this is how you can check for it.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parameters",
        "displayName": "SC.Query#parameters",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Optional hash of parameters.  These parameters may be interpolated into \n    the query conditions.  If you are handling the query manually, these \n    parameters will not be used.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "location",
        "displayName": "SC.Query#location",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Indicates the location where the result set for this query is stored.  \n    Currently the available options are:\n    \n     - `SC.Query.LOCAL` -- indicates that the query results will be\n       automatically computed from the in-memory store.\n     - `SC.Query.REMOTE` -- indicates that the query results are kept on a\n       remote server and hence must be loaded from the `DataSource`.\n    \n    The default setting for this property is `SC.Query.LOCAL`.  \n    \n    Note that even if a query location is `LOCAL`, your `DataSource` will\n    still have its `fetch()` method called for the query.  For `LOCAL`\n    queries, you  won't need to explicitly provide the query result set; you\n    can just load records into the in-memory store as needed and let the query\n    recompute automatically.\n    \n    If your query location is `REMOTE`, then your `DataSource` will need to \n    provide the actual set of query results manually.  Usually you will only \n    need to use a `REMOTE` query if you are retrieving a large data set and you\n    don't want to pay the cost of computing the result set client side.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scope",
        "displayName": "SC.Query#scope",
        "objectType": "property",
        "propertyType": "SC.Query",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Another query that will optionally limit the search of records.  This is \n    usually configured for you when you do `find()` from another record array.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.Query#isEditable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Indicates whether a record is editable or not.  Defaults to `NO`.  Local\n    queries should never be made editable.  Remote queries may be editable or\n    not depending on the data source.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "queryLanguage",
        "displayName": "SC.Query#queryLanguage",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "This is the definition of the query language. You can extend it\n    by using `SC.Query.registerQueryExtension()`.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LOCAL",
        "displayName": "SC.Query.LOCAL",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Constant used for `SC.Query#location`",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REMOTE",
        "displayName": "SC.Query.REMOTE",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Query",
        "overview": "Constant used for `SC.Query#location`",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 28990,
    "name": "RadioView",
    "displayName": "SC.RadioView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/radio.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "A RadioView is used to create a group of radio buttons.  The user can use\n  these buttons to pick from a choice of options.\n  \n  This view renders simulated radio buttons that can display a mixed state and \n  has other features not found in platform-native controls.\n  \n  The radio buttons themselves are designed to be styled using CSS classes with\n  the following structure:\n  \n      <label class=\"sc-radio-button\">\n        <img class=\"button\" src=\"some_image.gif\"/>\n        <input type=\"radio\" name=\"<sc-guid>\" value=\"\"/>\n        <span class=\"sc-button-label\">Label for button1</span>\n      </label>\n  \n  Setting up a RadioView accepts a number of properties, for example:\n  \n      radio: SC.RadioView.design({\n        items: [\n          { \n            title: \"Red\",\n            value: \"red\",\n            enabled: YES,\n            icon: \"button_red\"\n          },{\n            title: \"Green\",\n            value: \"green\",\n            enabled: YES,\n            icon: 'button_green'\n          }\n        ],\n        value: 'red',\n        itemTitleKey: 'title',\n        itemValueKey: 'value',\n        itemIconKey: 'icon',\n        itemIsEnabledKey: 'enabled',\n        isEnabled: YES,\n        layoutDirection: SC.LAYOUT_HORIZONTAL\n      })\n  \n  The items array can contain either strings, or as in the example above a \n  hash. When using a hash, make sure to also specify the itemTitleKey\n  and itemValueKey you are using. Similarly, you will have to provide \n  itemIconKey if you are using icons radio buttons. The individual items \n  enabled property is YES by default, and the icon is optional.",
    "methods": [],
    "properties": [
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.RadioView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.RadioView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "",
        "defaultValue": "['sc-radio-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.RadioView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "The WAI-ARIA role for a group of radio buttons.",
        "defaultValue": "'radiogroup'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.RadioView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "",
        "defaultValue": "['displayItems', 'isEnabled', 'layoutDirection']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.RadioView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "",
        "defaultValue": "'radioGroupRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemAriaLabeledByKey",
        "displayName": "SC.RadioView#itemAriaLabeledByKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the ariaLabeledBy with this itemAriaLabeledByKey property.ariaLabeledBy is used\n    as the WAI-ARIA attribute for the radio view. This property is assigned to\n    'aria-labelledby' attribute, which defines a string value that labels the\n    element. Used to support voiceover.  It should be assigned a non-empty string,\n    if the 'aria-labelledby' attribute has to be set for the element.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemAriaLabelKey",
        "displayName": "SC.RadioView#itemAriaLabelKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the ariaLabeled with this itemAriaLabelKey property.ariaLabel is used\n    as the WAI-ARIA attribute for the radio view. This property is assigned to\n    'aria-label' attribute, which defines a string value that labels the\n    element. Used to support voiceover.  It should be assigned a non-empty string,\n    if the 'aria-label' attribute has to be set for the element.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.RadioView#value",
        "objectType": "property",
        "propertyType": "Object|String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "The value of the currently selected item, and which will be checked in the \n    UI. This can be either a string or an array with strings for checking \n    multiple values.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.RadioView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "This property indicates how the radio buttons are arranged. Possible values:\n    \n      - SC.LAYOUT_VERTICAL\n      - SC.LAYOUT_HORIZONTAL",
        "defaultValue": "SC.LAYOUT_VERTICAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "escapeHTML",
        "displayName": "SC.RadioView#escapeHTML",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "items",
        "displayName": "SC.RadioView#items",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "The items property can be either an array with strings, or a\n    hash. When using a hash, make sure to also specify the appropriate\n    itemTitleKey, itemValueKey, itemIsEnabledKey and itemIconKey.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTitleKey",
        "displayName": "SC.RadioView#itemTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the title with this itemTitleKey property.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemWidthKey",
        "displayName": "SC.RadioView#itemWidthKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the item width with this itemWidthKey property. This is only used when\n    layoutDirection is set to SC.LAYOUT_HORIONZTAL and can be used to override\n    the default value provided by the framework or theme CSS.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemValueKey",
        "displayName": "SC.RadioView#itemValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the value with this itemValueKey property.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIsEnabledKey",
        "displayName": "SC.RadioView#itemIsEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the value with this itemIsEnabledKey property.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIconKey",
        "displayName": "SC.RadioView#itemIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RadioView",
        "overview": "If items property is a hash, specify which property will function as\n    the value with this itemIconKey property.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48415,
    "name": "RangeObserver",
    "displayName": "SC.RangeObserver",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/range_observer.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A RangeObserver is used by Arrays to automatically observe all of the\n  objects in a particular range on the array.  Whenever any property on one\n  of those objects changes, it will notify its delegate.  Likewise, whenever\n  the contents of the array itself changes, it will notify its delegate and\n  possibly update its own registration.\n\n  This implementation uses only SC.Array methods.  It can be used on any\n  object that complies with SC.Array.  You may, however, choose to subclass\n  this object in a way that is more optimized for your particular design.",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.RangeObserver#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new range observer owned by the source.  The indexSet you pass\n    must identify the indexes you are interested in observing.  The passed\n    target/method will be invoked whenever the observed range changes.\n\n    Note that changes to a range are buffered until the end of a run loop\n    unless a property on the record itself changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source array"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexSet",
            "isOptional": false,
            "defaultValue": "",
            "desc": "set of indexes to observer"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target"
          },
          {
            "title": "param",
            "type": "Function|String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method to invoke"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional context to include in callback"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "isDeep",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if YES, observe property changes as well"
          }
        ]
      },
      {
        "name": "extend",
        "displayName": "SC.RangeObserver#extend",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create subclasses for the RangeObserver.  Pass one or more attribute\n    hashes.  Use this to create customized RangeObservers if needed for your\n    classes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "extended range observer class"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more attribute hashes"
          }
        ]
      },
      {
        "name": "destroy",
        "displayName": "SC.RangeObserver#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys an active ranger observer, cleaning up first.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source array"
          }
        ]
      },
      {
        "name": "update",
        "displayName": "SC.RangeObserver#update",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the set of indexes the range observer applies to.  This will\n    stop observing the old objects for changes and start observing the\n    new objects instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source array"
          },
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexSet",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index set representing the change"
          }
        ]
      },
      {
        "name": "beginObserving",
        "displayName": "SC.RangeObserver#beginObserving",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Configures observing for each item in the current range.  Should update\n    the observing array with the list of observed objects so they can be\n    torn down later",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "endObserving",
        "displayName": "SC.RangeObserver#endObserving",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Remove observers for any objects currently begin observed.  This is\n    called whenever the observed range changes due to an array change or\n    due to destroying the observer.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "rangeDidChange",
        "displayName": "SC.RangeObserver#rangeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Whenever the actual objects in the range changes, notify the delegate\n    then begin observing again.  Usually this method will be passed an\n    IndexSet with the changed indexes.  The range observer will only notify\n    its delegate if the changed indexes include some of all of the indexes\n    this range observer is monitoring.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "changes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional set of changed indexes"
          }
        ]
      },
      {
        "name": "objectPropertyDidChange",
        "displayName": "SC.RangeObserver#objectPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Whenever an object changes, notify the delegate",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RangeObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object that changed"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property that changed"
          },
          {
            "title": "param",
            "type": "Null",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "No longer used"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "rev",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The revision of the change"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isRangeObserver",
        "displayName": "SC.RangeObserver#isRangeObserver",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RangeObserver",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14891,
    "name": "Record",
    "displayName": "SC.Record",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/record.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [
      "SC.RecordAttribute"
    ],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "A Record is the core model class in SproutCore. It is analogous to \n  NSManagedObject in Core Data and EOEnterpriseObject in the Enterprise\n  Objects Framework (aka WebObjects), or ActiveRecord::Base in Rails.\n  \n  To create a new model class, in your SproutCore workspace, do:\n  \n      $ sc-gen model MyApp.MyModel\n  \n  This will create MyApp.MyModel in clients/my_app/models/my_model.js.\n  \n  The core attributes hash is used to store the values of a record in a \n  format that can be easily passed to/from the server.  The values should \n  generally be stored in their raw string form.  References to external \n  records should be stored as primary keys.\n  \n  Normally you do not need to work with the attributes hash directly.  \n  Instead you should use get/set on normal record properties.  If the \n  property is not defined on the object, then the record will check the \n  attributes hash instead.\n  \n  You can bulk update attributes from the server using the \n  `updateAttributes()` method.",
    "methods": [
      {
        "name": "id",
        "displayName": "SC.Record#id",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the id for the record instance.  The id is used to uniquely \n    identify this record instance from all others of the same type.  If you \n    have a `primaryKey set on this class, then the id will be the value of the\n    `primaryKey` property on the underlying JSON hash.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "status",
        "displayName": "SC.Record#status",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "All records generally have a life cycle as they are created or loaded into \n    memory, modified, committed and finally destroyed.  This life cycle is \n    managed by the status property on your record. \n\n    The status of a record is modelled as a finite state machine.  Based on the \n    current state of the record, you can determine which operations are \n    currently allowed on the record and which are not.\n    \n    In general, a record can be in one of five primary states:\n    `SC.Record.EMPTY`, `SC.Record.BUSY`, `SC.Record.READY`,\n    `SC.Record.DESTROYED`, `SC.Record.ERROR`.  These are all described in\n    more detail in the class mixin (below) where they are defined.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isDestroyed",
        "displayName": "SC.Record#isDestroyed",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "YES when the record has been destroyed",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isEditable",
        "displayName": "SC.Record#isEditable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "`YES` when the record is in an editable state.  You can use this property to\n    quickly determine whether attempting to modify the record would raise an \n    exception or not.\n    \n    This property is both readable and writable.  Note however that if you \n    set this property to `YES` but the status of the record is anything but\n    `SC.Record.READY`, the return value of this property may remain `NO`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isLoaded",
        "displayName": "SC.Record#isLoaded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "`YES` when the record's contents have been loaded for the first time.  You \n    can use this to quickly determine if the record is ready to display.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "attributes",
        "displayName": "SC.Record#attributes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will return the raw attributes that you can edit directly.  If you \n    make changes to this hash, be sure to call `beginEditing()` before you get\n    the attributes and `endEditing()` afterwards.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "readOnlyAttributes",
        "displayName": "SC.Record#readOnlyAttributes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will return the raw attributes that you cannot edit directly.  It is\n    useful if you want to efficiently look at multiple attributes in bulk.  If\n    you would like to edit the attributes, see the `attributes` property\n    instead.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isNestedRecord",
        "displayName": "SC.Record#isNestedRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Whether or not this is a nested Record.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "parentRecord",
        "displayName": "SC.Record#parentRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The parent record if this is a nested record.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "refresh",
        "displayName": "SC.Record#refresh",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Refresh the record from the persistent store.  If the record was loaded \n    from a persistent store, then the store will be asked to reload the \n    record data from the server.  If the record is new and exists only in \n    memory then this call will have no effect.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "boolean",
            "name": "recordOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional param if you want to only THIS record\n      even if it is a child record."
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional callback that will fire when request finishes"
          }
        ]
      },
      {
        "name": "destroy",
        "displayName": "SC.Record#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Deletes the record along with any dependent records.  This will mark the \n    records destroyed in the store as well as changing the isDestroyed \n    property on the record to YES.  If this is a new record, this will avoid \n    creating the record in the first place.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "boolean",
            "name": "recordOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional param if you want to only THIS record\n      even if it is a child record."
          }
        ]
      },
      {
        "name": "recordDidChange",
        "displayName": "SC.Record#recordDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can invoke this method anytime you need to make the record as dirty.\n    This will cause the record to be commited when you `commitChanges()`\n    on the underlying store.\n    \n    If you use the `writeAttribute()` primitive, this method will be called \n    for you.\n    \n    If you pass the key that changed it will ensure that observers are fired\n    only once for the changed property instead of `allPropertiesDidChange()`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key that changed (optional)"
          }
        ]
      },
      {
        "name": "beginEditing",
        "displayName": "SC.Record#beginEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Defers notification of record changes until you call a matching \n    `endEditing()` method.  This method is called automatically whenever you\n    set an attribute, but you can call it yourself to group multiple changes.\n    \n    Calls to `beginEditing()` and `endEditing()` can be nested.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "endEditing",
        "displayName": "SC.Record#endEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notifies the store of record changes if this matches a top level call to\n    `beginEditing()`.  This method is called automatically whenever you set an\n    attribute, but you can call it yourself to group multiple changes.\n    \n    Calls to `beginEditing()` and `endEditing()` can be nested.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key that changed (optional)"
          }
        ]
      },
      {
        "name": "readAttribute",
        "displayName": "SC.Record#readAttribute",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads the raw attribute from the underlying data hash.  This method does\n    not transform the underlying attribute at all.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value of the key, or undefined if it doesn't exist"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attribute you want to read"
          }
        ]
      },
      {
        "name": "writeAttribute",
        "displayName": "SC.Record#writeAttribute",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the passed attribute with the new value.  This method does not \n    transform the value at all.  If instead you want to modify an array or \n    hash already defined on the underlying json, you should instead get \n    an editable version of the attribute using `editableAttribute()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attribute you want to read"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value you want to write"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "ignoreDidChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": "only set if you do NOT want to flag \n      record as dirty"
          }
        ]
      },
      {
        "name": "propagateToAggregates",
        "displayName": "SC.Record#propagateToAggregates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will also ensure that any aggregate records are also marked dirty\n    if this record changes.\n    \n    Should not have to be called manually.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "storeDidChangeProperties",
        "displayName": "SC.Record#storeDidChangeProperties",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the store whenever the underlying data hash has changed.  This\n    will notify any observers interested in data hash properties that they\n    have changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "statusOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "changed"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "that changed (optional)"
          }
        ]
      },
      {
        "name": "normalize",
        "displayName": "SC.Record#normalize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Normalizing a record will ensure that the underlying hash conforms\n    to the record attributes such as their types (transforms) and default \n    values. \n    \n    This method will write the conforming hash to the store and return\n    the materialized record.\n    \n    By normalizing the record, you can use `.attributes()` and be\n    assured that it will conform to the defined model. For example, this\n    can be useful in the case where you need to send a JSON representation\n    to some server after you have used `.createRecord()`, since this method\n    will enforce the 'rules' in the model such as their types and default\n    values. You can also include null values in the hash with the \n    includeNull argument.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the normalized record"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "includeNull",
            "isOptional": false,
            "defaultValue": "",
            "desc": "will write empty (null) attributes"
          }
        ]
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.Record#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If you try to get/set a property not defined by the record, then this \n    method will be called. It will try to get the value from the set of \n    attributes.\n    \n    This will also check is `ignoreUnknownProperties` is set on the recordType\n    so that they will not be written to `dataHash` unless explicitly defined\n    in the model schema.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attribute being get/set"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value to set the key to, if present"
          }
        ]
      },
      {
        "name": "commitRecord",
        "displayName": "SC.Record#commitRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Lets you commit this specific record to the store which will trigger\n    the appropriate methods in the data source for you.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additonal params that will passed down\n      to the data source"
          },
          {
            "title": "param",
            "type": "boolean",
            "name": "recordOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional param if you want to only commit a single\n      record if it has a parent."
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional callback that the store will fire once the \n    datasource finished committing"
          }
        ]
      },
      {
        "name": "isError",
        "displayName": "SC.Record#isError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` whenever the status is SC.Record.ERROR.  This will allow you\n    to put the UI into an error state.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "errorValue",
        "displayName": "SC.Record#errorValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the receiver if the record is in an error state.  Returns null\n    otherwise.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "errorObject",
        "displayName": "SC.Record#errorObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current error object only if the record is in an error state.\n    If no explicit error object has been set, returns SC.Record.GENERIC_ERROR.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "registerNestedRecord",
        "displayName": "SC.Record#registerNestedRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Registers a child record with this parent record.\n\n    If the parent already knows about the child record, return the cached\n    instance. If not, create the child record instance and add it to the child\n    record cache.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the child record that was registered"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The hash of attributes to apply to the child record."
          },
          {
            "title": "param",
            "type": "Integer",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The store key that we are asking for"
          },
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property path of the child record"
          }
        ]
      },
      {
        "name": "createNestedRecord",
        "displayName": "SC.Record#createNestedRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new nested record instance.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the nested record created"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The type of the nested record to create."
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "hash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The hash of attributes to apply to the child record.\n    (may be null)"
          }
        ]
      },
      {
        "name": "generateIdForChild",
        "displayName": "SC.Record#generateIdForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override this function if you want to have a special way of creating \n    ids for your child records",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id generated"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "childRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "attr",
        "displayName": "SC.Record#attr",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method returns a new `SC.RecordAttribute` instance to map a simple\n    value or to-one relationship.  At the very least, you should pass the \n    type class you expect the attribute to have.  You may pass any additional\n    options as well.\n    \n    Use this helper when you define SC.Record subclasses. \n    \n        MyApp.Contact = SC.Record.extend({\n          firstName: SC.Record.attr(String, { isRequired: YES })\n        });",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "created instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "type",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attribute type"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the options for the attribute"
          }
        ]
      },
      {
        "name": "fetch",
        "displayName": "SC.Record#fetch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an `SC.RecordAttribute` that describes a fetched attribute.  When \n    you reference this attribute, it will return an `SC.RecordArray` that uses\n    the type as the fetch key and passes the attribute value as a param.\n    \n    Use this helper when you define SC.Record subclasses. \n    \n        MyApp.Group = SC.Record.extend({\n          contacts: SC.Record.fetch('MyApp.Contact')\n        });",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "created instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|String",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The type of records to load"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the options for the attribute"
          }
        ]
      },
      {
        "name": "toMany",
        "displayName": "SC.Record#toMany",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will return one of the following:\n    \n     1. `SC.ManyAttribute` that describes a record array backed by an \n        array of guids stored in the underlying JSON.  \n     2. `SC.ChildrenAttribute` that describes a record array backed by a\n        array of hashes.\n    \n    You can edit the contents of this relationship.\n    \n    For `SC.ManyAttribute`, If you set the inverse and `isMaster: NO` key, \n    then editing this array will modify the underlying data, but the \n    inverse key on the matching record will also be edited and that \n    record will be marked as needing a change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ManyAttribute|SC.ChildrenAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "created instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|String",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The type of record to create"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the options for the attribute"
          }
        ]
      },
      {
        "name": "toOne",
        "displayName": "SC.Record#toOne",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will return one of the following:\n    \n     1. `SC.SingleAttribute` that converts the underlying ID to a single\n        record.  If you modify this property, it will rewrite the underyling\n        ID. It will also modify the inverse of the relationship, if you set it.\n     2. `SC.ChildAttribute` that you can edit the contents\n        of this relationship.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SingleAttribute|SC.ChildAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "created instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|String",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the type of the record to create"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "additional options"
          }
        ]
      },
      {
        "name": "storeKeysById",
        "displayName": "SC.Record#storeKeysById",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns all storeKeys mapped by Id for this record type.  This method is\n    used mostly by the `SC.Store` and the Record to coordinate.  You will rarely\n    need to call this method yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "storeKeyFor",
        "displayName": "SC.Record#storeKeyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a primaryKey value for the record, returns the associated\n    storeKey.  If the primaryKey has not been assigned a storeKey yet, it \n    will be added.\n    \n    For the inverse of this method see `SC.Store.idFor()` and \n    `SC.Store.recordTypeFor()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a storeKey."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a record id"
          }
        ]
      },
      {
        "name": "storeKeyExists",
        "displayName": "SC.Record#storeKeyExists",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a primaryKey value for the record, returns the associated\n    storeKey.  As opposed to `storeKeyFor()` however, this method\n    will NOT generate a new storeKey but returned undefined.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a storeKey."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a record id"
          }
        ]
      },
      {
        "name": "find",
        "displayName": "SC.Record#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a record with the named ID in store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id or a query"
          }
        ]
      },
      {
        "name": "storeKeyFor",
        "displayName": "SC.Record.storeKeyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [
          "SC.Record.storeKeyFor"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Like the original SC.Record.storeKeyFor,\n      but when a storeKey is generated, it will\n      propagate it to superclasses.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "fixtures",
        "displayName": "SC.Record.fixtures",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Default fixtures instance for use in applications.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRecord",
        "displayName": "SC.Record#isRecord",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Walk like a duck",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isParentRecord",
        "displayName": "SC.Record#isParentRecord",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "If you have nested records",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "primaryKey",
        "displayName": "SC.Record#primaryKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "This is the primary key used to distinguish records.  If the keys\n    match, the records are assumed to be identical.",
        "defaultValue": "'guid'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "store",
        "displayName": "SC.Record#store",
        "objectType": "property",
        "propertyType": "SC.Store",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "The store that owns this record.  All changes will be buffered into this\n    store and committed to the rest of the store chain through here.\n    \n    This property is set when the record instance is created and should not be\n    changed or else it will break the record behavior.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "storeKey",
        "displayName": "SC.Record#storeKey",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "This is the store key for the record, it is used to link it back to the \n    dataHash. If a record is reused, this value will be replaced.\n    \n    You should not edit this store key but you may sometimes need to refer to\n    this store key when implementing a Server object.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "relationships",
        "displayName": "SC.Record#relationships",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "If set, this should be an array of active relationship objects that need\n    to be notified whenever the underlying record properties change.  \n    Currently this is only used by toMany relationships, but you could \n    possibly patch into this yourself also if you are building your own \n    relationships.\n    \n    Note this must be a regular Array - NOT any object implementing SC.Array.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nestedRecordNamespace",
        "displayName": "SC.Record#nestedRecordNamespace",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "The namespace which to retrieve the childRecord Types from",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ignoreUnknownProperties",
        "displayName": "SC.Record#ignoreUnknownProperties",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Whether to ignore unknown properties when they are being set on the record\n    object. This is useful if you want to strictly enforce the model schema\n    and not allow dynamically expanding it by setting new unknown properties",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "CLEAN",
        "displayName": "SC.Record#CLEAN",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic state for records with no local changes.\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0001",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "DIRTY",
        "displayName": "SC.Record#DIRTY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic state for records with local changes.\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0002",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "EMPTY",
        "displayName": "SC.Record#EMPTY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that are still loaded.  \n    \n    A record instance should never be in this state.  You will only run into \n    it when working with the low-level data hash API on `SC.Store`. Use a \n    logical AND (single `&`) to test record status",
        "defaultValue": "0x0100",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "ERROR",
        "displayName": "SC.Record#ERROR",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records in an error state.\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x1000",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "READY",
        "displayName": "SC.Record#READY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic state for records that are loaded and ready for use\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0200",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "READY_CLEAN",
        "displayName": "SC.Record#READY_CLEAN",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that are loaded and ready for use with no local changes\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0201",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "READY_DIRTY",
        "displayName": "SC.Record#READY_DIRTY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that are loaded and ready for use with local changes\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0202",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "READY_NEW",
        "displayName": "SC.Record#READY_NEW",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that are new - not yet committed to server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0203",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "DESTROYED",
        "displayName": "SC.Record#DESTROYED",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic state for records that have been destroyed\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0400",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "DESTROYED_CLEAN",
        "displayName": "SC.Record#DESTROYED_CLEAN",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have been destroyed and committed to server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0401",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "DESTROYED_DIRTY",
        "displayName": "SC.Record#DESTROYED_DIRTY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have been destroyed but not yet committed to server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0402",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY",
        "displayName": "SC.Record#BUSY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic state for records that have been submitted to data source\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0800",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_LOADING",
        "displayName": "SC.Record#BUSY_LOADING",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that are still loading data from the server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0804",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_CREATING",
        "displayName": "SC.Record#BUSY_CREATING",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for new records that were created and submitted to the server; \n    waiting on response from server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0808",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_COMMITTING",
        "displayName": "SC.Record#BUSY_COMMITTING",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have been modified and submitted to server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0810",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_REFRESH",
        "displayName": "SC.Record#BUSY_REFRESH",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have requested a refresh from the server.\n    \n    Use a logical AND (single `&`) to test record status.",
        "defaultValue": "0x0820",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_REFRESH_CLEAN",
        "displayName": "SC.Record#BUSY_REFRESH_CLEAN",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have requested a refresh from the server.\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0821",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_REFRESH_DIRTY",
        "displayName": "SC.Record#BUSY_REFRESH_DIRTY",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have requested a refresh from the server.\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0822",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_DESTROYING",
        "displayName": "SC.Record#BUSY_DESTROYING",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "State for records that have been destroyed and submitted to server\n    \n    Use a logical AND (single `&`) to test record status",
        "defaultValue": "0x0840",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BAD_STATE_ERROR",
        "displayName": "SC.Record#BAD_STATE_ERROR",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Error for when you try to modify a record while it is in a bad \n    state.",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "RECORD_EXISTS_ERROR",
        "displayName": "SC.Record#RECORD_EXISTS_ERROR",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Error for when you try to create a new record that already exists.",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "NOT_FOUND_ERROR",
        "displayName": "SC.Record#NOT_FOUND_ERROR",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Error for when you attempt to locate a record that is not found",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "BUSY_ERROR",
        "displayName": "SC.Record#BUSY_ERROR",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Error for when you try to modify a record that is currently busy",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "GENERIC_ERROR",
        "displayName": "SC.Record#GENERIC_ERROR",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "Generic unknown record error",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "isPolymorphic",
        "displayName": "SC.Record.isPolymorphic",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Record",
        "overview": "If YES, then searches for records of this type will return\n      subclass instances. For example:\n\n          Person = SC.Record.extend();\n          Person.isPolymorphic = YES;\n\n          Male = Person.extend();\n          Female = Person.extend();\n\n      Using SC.Store#find, or a toOne or toMany relationship on\n      Person will then return records of type Male and Female.\n      Polymorphic record types must have unique GUIDs for all\n      subclasses.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 15950,
    "name": "RecordArray",
    "displayName": "SC.RecordArray",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/record_array.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Array"
      }
    ],
    "overview": "A `RecordArray` wraps an array of `storeKeys` and, optionally, a `Query`\n  object. When you access the items of a `RecordArray`, it will automatically\n  convert the `storeKeys` into actual `SC.Record` objects that the rest of\n  your application can work with.\n  \n  Normally you do not create `RecordArray`s yourself.  Instead, a\n  `RecordArray` is returned when you call `SC.Store.findAll()`, already\n  properly configured. You can usually just work with the `RecordArray`\n  instance just like any other array.\n  \n  The information below about `RecordArray` internals is only intended for\n  those who need to override this class for some reason to do something\n  special.\n  \n  Internal Notes\n  ---\n  \n  Normally the `RecordArray` behavior is very simple.  Any array-like\n  operations will be translated into similar calls onto the underlying array\n  of `storeKeys`.  The underlying array can be a real array or it may be a \n  `SparseArray`, which is how you implement incremental loading.\n  \n  If the `RecordArray` is created with an `SC.Query` object as well (and it \n  almost always will have a `Query` object), then the `RecordArray` will also \n  consult the query for various delegate operations such as determining if \n  the record array should update automatically whenever records in the store\n  changes. It will also ask the `Query` to refresh the `storeKeys` whenever\n  records change in the store.\n  \n  If the `SC.Query` object has complex matching rules, it might be \n  computationally heavy to match a large dataset to a query. To avoid the \n  browser from ever showing a slow script timer in this scenario, the query\n  matching is by default paced at 100ms. If query matching takes longer than\n  100ms, it will chunk the work with setTimeout to avoid too much computation\n  to happen in one runloop.",
    "methods": [
      {
        "name": "isEditable",
        "displayName": "SC.RecordArray#isEditable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current editabile state based on the query.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "contains",
        "displayName": "SC.RecordArray#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed can be found in the record array.  This is\n    provided for compatibility with SC.Set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.RecordArray#add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the specified record to the record array if it is not already part \n    of the array.  Provided for compatibilty with `SC.Set`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.RecordArray#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the specified record from the array if it is not already a part\n    of the array.  Provided for compatibility with `SC.Set`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "find",
        "displayName": "SC.RecordArray#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extends the standard SC.Enumerable implementation to return results based\n    on a Query if you pass it in.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a SC.Query object"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target object to use"
          }
        ]
      },
      {
        "name": "refresh",
        "displayName": "SC.RecordArray#refresh",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call whenever you want to refresh the results of this query.  This will\n    notify the data source, asking it to refresh the contents.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "reload",
        "displayName": "SC.RecordArray#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will recompute the results based on the `SC.Query` attached to the record\n    array. Useful if your query is based on computed properties that might \n    have changed. Use `refresh()` instead of you want to trigger a fetch on\n    your data source since this will purely look at records already loaded\n    into the store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.RecordArray#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys the record array.  Releases any `storeKeys`, and deregisters with\n    the owner store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "flush",
        "displayName": "SC.RecordArray#flush",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Applies the query to any pending changed store keys, updating the record\n    array contents as necessary.  This method is called automatically anytime\n    you access the RecordArray to make sure it is up to date, but you can\n    call it yourself as well if you need to force the record array to fully\n    update immediately.\n    \n    Currently this method only has an effect if the query location is \n    `SC.Query.LOCAL`.  You can call this method on any `RecordArray` however,\n    without an error.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "_flush",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to force it - use reload() to trigger it"
          }
        ]
      },
      {
        "name": "isError",
        "displayName": "SC.RecordArray#isError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns `YES` whenever the status is `SC.Record.ERROR`.  This will allow\n    you to put the UI into an error state.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "errorValue",
        "displayName": "SC.RecordArray#errorValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the receiver if the record array is in an error state.  Returns\n    `null` otherwise.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "errorObject",
        "displayName": "SC.RecordArray#errorObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current error object only if the record array is in an error\n    state. If no explicit error object has been set, returns\n    `SC.Record.GENERIC_ERROR.`",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "store",
        "displayName": "SC.RecordArray#store",
        "objectType": "property",
        "propertyType": "SC.Store",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "The store that owns this record array.  All record arrays must have a \n    store to function properly. \n    \n    NOTE: You **MUST** set this property on the `RecordArray` when creating\n    it or else it will fail.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "query",
        "displayName": "SC.RecordArray#query",
        "objectType": "property",
        "propertyType": "SC.Query",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "The `Query` object this record array is based upon.  All record arrays\n*MUST** have an associated query in order to function correctly.  You\n    cannot change this property once it has been set.\n\n    NOTE: You **MUST** set this property on the `RecordArray` when creating\n    it or else it will fail.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "storeKeys",
        "displayName": "SC.RecordArray#storeKeys",
        "objectType": "property",
        "propertyType": "SC.Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "The array of `storeKeys` as retrieved from the owner store.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "status",
        "displayName": "SC.RecordArray#status",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "The current status for the record array.  Read from the underlying\n    store.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsFlush",
        "displayName": "SC.RecordArray#needsFlush",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "Set to `YES` when the query is dirty and needs to update its storeKeys \n    before returning any results.  `RecordArray`s always start dirty and become\n    clean the first time you try to access their contents.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NOT_EDITABLE",
        "displayName": "SC.RecordArray#NOT_EDITABLE",
        "objectType": "property",
        "propertyType": "SC.Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "Standard error throw when you try to modify a record that is not editable",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "QUERY_MATCHING_THRESHOLD",
        "displayName": "SC.RecordArray#QUERY_MATCHING_THRESHOLD",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordArray",
        "overview": "Number of milliseconds to allow a query matching to run for. If this number\n    is exceeded, the query matching will be paced so as to not lock up the\n    browser (by essentially splitting the work with a setTimeout)",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 15114,
    "name": "RecordAttribute",
    "displayName": "SC.RecordAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/record_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [
      "SC.Record",
      "SC.ManyAttribute",
      "SC.SingleAttribute"
    ],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "A RecordAttribute describes a single attribute on a record.  It is used to\n  generate computed properties on records that can automatically convert data\n  types and verify data.\n  \n  When defining an attribute on an SC.Record, you can configure it this way: \n  \n      title: SC.Record.attr(String, { \n        defaultValue: 'Untitled',\n        isRequired: YES|NO\n      })\n  \n  In addition to having predefined transform types, there is also a way to \n  set a computed relationship on an attribute. A typical example of this would\n  be if you have record with a parentGuid attribute, but are not able to \n  determine which record type to map to before looking at the guid (or any\n  other attributes). To set up such a computed property, you can attach a \n  function in the attribute definition of the SC.Record subclass:\n  \n      relatedToComputed: SC.Record.toOne(function() {\n        return (this.readAttribute('relatedToComputed').indexOf(\"foo\")==0) ? MyApp.Foo : MyApp.Bar;\n      })\n  \n  Notice that we are not using .get() to avoid another transform which would \n  trigger an infinite loop.\n  \n  You usually will not work with RecordAttribute objects directly, though you\n  may extend the class in any way that you like to create a custom attribute.\n\n  A number of default RecordAttribute types are defined on the SC.Record.",
    "methods": [
      {
        "name": "typeClass",
        "displayName": "SC.RecordAttribute#typeClass",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the type, resolved to a class.  If the type property is a regular\n    class, returns the type unchanged.  Otherwise attempts to lookup the \n    type as a property path.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "transform",
        "displayName": "SC.RecordAttribute#transform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the transform handler. Attempts to find a transform that you\n    registered using registerTransform for this attribute's type, otherwise\n    defaults to using the default transform for String.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "toType",
        "displayName": "SC.RecordAttribute#toType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the passed value into the core attribute value.  This will apply \n    any format transforms.  You can install standard transforms by adding to\n    the `SC.RecordAttribute.transforms` hash.  See \n    SC.RecordAttribute.registerTransform() for more.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The transformed value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The record instance"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The key used to access this attribute on the record"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property value before being transformed"
          }
        ]
      },
      {
        "name": "fromType",
        "displayName": "SC.RecordAttribute#fromType",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the passed value from the core attribute value.  This will apply \n    any format transforms.  You can install standard transforms by adding to\n    the `SC.RecordAttribute.transforms` hash.  See \n    `SC.RecordAttribute.registerTransform()` for more.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The value converted back to attribute format"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The record instance"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The key used to access this attribute on the record"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The transformed value"
          }
        ]
      },
      {
        "name": "call",
        "displayName": "SC.RecordAttribute#call",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The core handler. Called when `get()` is called on the\n    parent record, since `SC.RecordAttribute` uses `isProperty` to masquerade\n    as a computed property. Get expects a property be a function, thus we\n    need to implement call.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The record instance"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The key used to access this attribute on the record"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property value if called as a setter"
          }
        ]
      },
      {
        "name": "attr",
        "displayName": "SC.RecordAttribute#attr",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The default method used to create a record attribute instance.  Unlike \n    `create()`, takes an `attributeType` as the first parameter which will be\n    set on the attribute itself.  You can pass a string naming a class or a\n    class itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object|String",
            "name": "attributeType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the assumed attribute type"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "opts",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additional config options"
          }
        ]
      },
      {
        "name": "registerTransform",
        "displayName": "SC.RecordAttribute#registerTransform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call to register a transform handler for a specific type of object.  The\n    object you pass can be of any type as long as it responds to the following\n    methods\n    \n     - `to(value, attr, klass, record, key)` converts the passed value\n       (which will be of the class expected by the attribute) into the\n       underlying attribute value\n     - `from(value, attr, klass, record, key)` converts the underyling\n       attribute value into a value of the class\n    \n    You can also provide an array of keys to observer on the return value.\n    When any of these change, your from method will be called to write the\n    changed object back to the record. For example:\n\n        {\n          to: function(value, attr, type, record, key) {\n            if(value) return value.toSet();\n            else return SC.Set.create();\n          },\n\n          from: function(value, attr, type, record, key) {\n            return value.toArray();\n          },\n\n          observesChildren: ['[]']\n        }",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RecordAttribute",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "klass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the type of object you convert"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "transform",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the transform object"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isRecordAttribute",
        "displayName": "SC.RecordAttribute#isRecordAttribute",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "Walk like a duck.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultValue",
        "displayName": "SC.RecordAttribute#defaultValue",
        "objectType": "property",
        "propertyType": "Object|function",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "The default value.  If attribute is `null` or `undefined`, this default\n    value will be substituted instead.  Note that `defaultValue`s are not\n    converted, so the value should be in the output type expected by the\n    attribute.\n    \n    If you use a `defaultValue` function, the arguments given to it are the\n    record instance and the key.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "type",
        "displayName": "SC.RecordAttribute#type",
        "objectType": "property",
        "propertyType": "Object|String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "The attribute type.  Must be either an object class or a property path\n    naming a class.  The built in handler allows all native types to pass \n    through, converts records to ids and dates to UTF strings.\n    \n    If you use the `attr()` helper method to create a RecordAttribute instance,\n    it will set this property to the first parameter you pass.",
        "defaultValue": "String",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "key",
        "displayName": "SC.RecordAttribute#key",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "The underlying attribute key name this attribute should manage.  If this\n    property is left empty, then the key will be whatever property name this\n    attribute assigned to on the record.  If you need to provide some kind\n    of alternate mapping, this provides you a way to override it.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRequired",
        "displayName": "SC.RecordAttribute#isRequired",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "If `YES`, then the attribute is required and will fail validation unless\n    the property is set to a non-null or undefined value.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditable",
        "displayName": "SC.RecordAttribute#isEditable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "If `NO` then attempts to edit the attribute will be ignored.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useIsoDate",
        "displayName": "SC.RecordAttribute#useIsoDate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "If set when using the Date format, expect the ISO8601 date format.  \n    This is the default.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "aggregate",
        "displayName": "SC.RecordAttribute#aggregate",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RecordAttribute",
        "overview": "Can only be used for toOne or toMany relationship attributes. If YES,\n    this flag will ensure that any related objects will also be marked\n    dirty when this record dirtied. \n    \n    Useful when you might have multiple related objects that you want to \n    consider in an 'aggregated' state. For instance, by changing a child\n    object (image) you might also want to automatically mark the parent \n    (album) dirty as well.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 46802,
    "name": "Reducers",
    "displayName": "SC.Reducers",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/mixins/enumerable.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "enumerableContentDidChange",
        "displayName": "SC.Reducers#enumerableContentDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoke this method when the contents of your enumerable has changed.\n    This will notify any observers watching for content changes.  If your are\n    implementing an ordered enumerable (such as an array), also pass the\n    start and end values where the content changed so that it can be used to\n    notify range observers.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional start offset for the content change"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional length of change"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "delta",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if you added or removed objects, the delta change"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "addedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects that were added"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "removedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects that were removed"
          }
        ]
      },
      {
        "name": "reducedProperty",
        "displayName": "SC.Reducers#reducedProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method from your unknownProperty() handler to implement\n    automatic reduced properties.  A reduced property is a property that\n    collects its contents dynamically from your array contents.  Reduced\n    properties always begin with \"@\".  Getting this property will call\n    reduce() on your array with the function matching the key name as the\n    processor.\n\n    The return value of this will be either the return value from the\n    reduced property or undefined, which means this key is not a reduced\n    property.  You can call this at the top of your unknownProperty handler\n    like so:\n\n      unknownProperty: function(key, value) {\n        var ret = this.handleReduceProperty(key, value) ;\n        if (ret === undefined) {\n          // process like normal\n        }\n      }",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the reduced property or undefined"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the reduce property key"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a value or undefined."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "generateProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "only set to false if you do not want\n      an optimized computed property handler generated for this.  Not common."
          }
        ]
      },
      {
        "name": "reduceMax",
        "displayName": "SC.Reducers#reduceMax",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reducer for @max reduced property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reduceMaxObject",
        "displayName": "SC.Reducers#reduceMaxObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reduces an enumberable to the max of the items in the enumerable. If\n    reducerProperty is passed, it will reduce that property. Otherwise, it will\n    reduce the item itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reduceMin",
        "displayName": "SC.Reducers#reduceMin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reduces an enumberable to the min of the items in the enumerable. If\n    reducerProperty is passed, it will reduce that property. Otherwise, it will\n    reduce the item itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reduceMinObject",
        "displayName": "SC.Reducers#reduceMinObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reduces an enumberable to the max of the items in the enumerable. If\n    reducerProperty is passed, it will reduce that property. Otherwise, it will\n    reduce the item itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reduceAverage",
        "displayName": "SC.Reducers#reduceAverage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reduces an enumberable to the average of the items in the enumerable. If\n    reducerProperty is passed, it will reduce that property. Otherwise, it will\n    reduce the item itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "reduceSum",
        "displayName": "SC.Reducers#reduceSum",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reduces an enumberable to the sum of the items in the enumerable. If\n    reducerProperty is passed, it will reduce that property. Otherwise, it will\n    reduce the item itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reduced value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "previousValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The previous value in the enumerable"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current value in the enumerable"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The index of the current item in the enumerable"
          },
          {
            "title": "param",
            "type": "String",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(Optional) The property in the enumerable being reduced"
          },
          {
            "title": "param",
            "type": "",
            "name": "reducerProperty",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 7004,
    "name": "RenderContext",
    "displayName": "SC.RenderContext",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/render_context.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A RenderContext is a builder that can be used to generate HTML for views or\n  to update an existing element.  Rather than making changes to an element\n  directly, you use a RenderContext to queue up changes to the element,\n  finally applying those changes or rendering the new element when you are\n  finished.\n\n  You will not usually create a render context yourself but you will be passed\n  a render context as the first parameter of your render() method on custom\n  views.\n\n  Render contexts are essentially arrays of strings.  You can add a string to\n  the context by calling push().  You can retrieve the entire array as a\n  single string using join().  This is basically the way the context is used\n  for views.  You are passed a render context and expected to add strings of\n  HTML to the context like a normal array.  Later, the context will be joined\n  into a single string and converted into real HTML for display on screen.\n\n  In addition to the core push and join methods, the render context also\n  supports some extra methods that make it easy to build tags.\n\n  context.begin() <-- begins a new tag context\n  context.end() <-- ends the tag context...",
    "methods": [],
    "properties": []
  },
  {
    "guid": 37295,
    "name": "RenderDelegate",
    "displayName": "SC.RenderDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/render_delegates/render_delegate.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Base class for all render delegates.\n\n  You should use SC.RenderDelegate or a subclass of it as the base for all \n  of your render delegates. SC.RenderDelegate offers many helper methods \n  and can be simpler to subclass between themes than `SC.Object`.\n\n  Creating & Subclassing\n  ===\n  You create render delegates just like you create SC.Objects:\n\n      MyTheme.someRenderDelegate = SC.RenderDelegate.create({ ... });\n\n  You can subclass a render delegate and use that:\n\n      MyTheme.RenderDelegate = SC.RenderDelegate.extend({ ... });\n      MyTheme.someRenderDelegate = MyTheme.RenderDelegate.create({});\n\n  And you can even subclass instances or SC.RenderDelegate:\n\n      MyTheme.someRenderDelegate = SC.RenderDelegate.create({ ... });\n      MyTheme.otherRenderDelegate = MyTheme.someRenderDelegate.create({ ... });\n\n      // this allows you to subclass another theme's render delegate:\n      MyTheme.buttonRenderDelegate = SC.BaseTheme.buttonRenderDelegate.create({ ... });\n\n  For render delegates, subclassing and instantiating are the same.\n\n  NOTE: Even though `.extend` and `.create` technically do the same thing, \n  convention dictates that you use `.extend` for RenderDelegates that \n  will be used primarily as base classes, and `create` for RenderDelegates\n  that you expect to be instances.\n\n  Rendering and Updating\n  ===\n  Render delegates are most commonly used for two things: rendering and updating\n  DOM representations of controls.\n\n  Render delegates use their `render` and `update` methods to do this:\n\n      render: function(dataSource, context) {\n        // rendering tasks here\n        // example:\n        context.begin('div').addClass('title')\n          .text(dataSource.get('title')\n        .end();\n      },\n\n      update: function(dataSource, jquery) {\n        // updating tasks here\n        // example:\n        jquery.find('.title').text(dataSource.get('title'));\n      }\n\n  Variables\n  ===\n  The data source provides your render delegate with all of the information\n  needed to render. However, the render delegate's consumer--usually a view--\n  may need to get information back.\n\n  For example, `SC.AutoResize` resizes controls to fit their text. You can use\n  it to size a button to fit its title. But it can't just make the button\n  have the same width as its title: it needs to be a little larger to make room\n  for the padding to the left and right sides of the title.\n\n  This padding will vary from theme to theme.\n  \n  You can specify properties on the render delegate like any other property:\n\n      MyRenderDelegate = SC.RenderDelegate.create({\n        autoSizePadding: 10\n        ...\n      });\n\n  But there are multiple sizes of buttons; shouldn't the padding change as\n  well? You can add hashes for the various control sizes and override properties:\n\n      SC.RenderDelegate.create({\n        autoSizePadding: 10,\n\n        'sc-jumbo-size': {\n          autoResizePadding: 20\n        }\n\n  For details, see the discussion on size helpers below.\n\n  You can also calculate values for the data source. In this example, we calculate\n  the autoSizePadding to equal half the data source's height:\n\n      SC.RenderDelegate.create({\n        autoSizePaddingFor: function(dataSource) {\n          if (dataSource.get('frame')) {\n            return dataSource.get('frame').height / 2;\n          }\n        }\n\n\n  When SC.ButtonView tries to get `autoSizePadding`, the render delegate will look for\n  `autoSizePaddingFor`. It will be called if it exists. Otherwise, the property will\n  be looked up like normal.\n\n  Note: To support multiple sizes, you must also render the class name; see size\n  helper discussion below.\n\n  Helpers\n  ===\n  SC.RenderDelegate have \"helper methods\" to assist the rendering process.\n  There are a few built-in helpers, and you can add your own.\n\n  Slices\n  ----------------------\n  Chance provides the `includeSlices` method to easily slice images for\n  use in the SproutCore theme system.\n\n      includeSlices(dataSource, context, slices);\n\n  You can call this to add DOM that matches Chance's `@include slices()`\n  directive. For example:\n\n      MyTheme.buttonRenderDelegate = SC.RenderDelegate.create({\n        name: 'button',\n        render: function(dataSource, context) {\n          this.includeSlices(dataSource, context, SC.THREE_SLICE);\n        }\n      });\n\n  DOM elements will be added as necessary for the slices. From your CSS, you\n  can match it like this:\n\n      $theme.button {",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.RenderDelegate#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new render delegate based on this one. When you want to\n    create a render delegate, you call this:\n   \n        MyTheme.myRenderDelegate = SC.RenderDelegate.create({\n          name: 'my-render-delegate',\n          render: function(dataSource, context) {\n            // your code here...\n          }\n        })",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "reopen",
        "displayName": "SC.RenderDelegate#reopen",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds extra capabilities to this render delegate.\n   \n    You can use this to add helpers to all render delegates:\n   \n        SC.RenderDelegate.reopen({\n          myHelperMethod: function(dataSource) { ... }\n        });",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "mixin",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "get",
        "displayName": "SC.RenderDelegate#get",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the specified property from this render delegate.\n    Implemented to match SC.Object's API.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "propertyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getPropertyFor",
        "displayName": "SC.RenderDelegate#getPropertyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets or generates the named property for the specified\n    dataSource. If a method `propertyName + 'For'` is found,\n    it will be used to compute the value, `dataSource`\n    being passed as an argument. Otherwise, it will simply\n    be looked up on the render delegate.\n    \n    NOTE: this implementation is a reference implementation. It\n    is overriden in the sizing code (helpers/sizing.js) to be\n    size-sensitive.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "propertyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "render",
        "displayName": "SC.RenderDelegate#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Writes the DOM representation of this render delegate to the\n    supplied `SC.RenderContext`, using the supplied `dataSource`\n    for any data needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "DataSource",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An object from which to get\n    data. See documentation on data sources above."
          },
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A context to render DOM into."
          }
        ]
      },
      {
        "name": "update",
        "displayName": "SC.RenderDelegate#update",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the DOM representation of this render delegate using\n    the supplied `jQuery` instance and `dataSource`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "DataSource",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An object from which to get\n    data. See documentation on data sources above."
          },
          {
            "title": "param",
            "type": "jQuery",
            "name": "jquery",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A jQuery instance containing the DOM\n    element to update. This will be the DOM generated by `render()`."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.RenderDelegate#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RenderDelegate",
        "overview": "All render delegates should have a name. Any time a render delegate is\n    used, this name should be added as a class name (`SC.View`s do this\n    automatically).",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 4597,
    "name": "Request",
    "displayName": "SC.Request",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/ajax/system/request.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      }
    ],
    "overview": "Implements support for Ajax requests using XHR and other prototcols.\n  \n  SC.Request is much like an inverted version of the request/response objects\n  you receive when implementing HTTP servers.  \n  \n  To send a request, you just need to create your request object, configure\n  your options, and call send() to initiate the request.",
    "methods": [
      {
        "name": "headers",
        "displayName": "SC.Request#headers",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Current set of headers for the request",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "encodedBody",
        "displayName": "SC.Request#encodedBody",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The body, encoded as JSON or XML if needed.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "willSend",
        "displayName": "SC.Request#willSend",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked on the original request object just before a copied request is \n    frozen and then sent to the server.  This gives you one last change to \n    fixup the request; possibly adding headers and other options.\n    \n    If you do not want the request to actually send, call cancel().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Request",
            "name": "request",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A copy of the request object, not frozen"
          },
          {
            "title": "param",
            "type": "SC.Response",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that will wrap the response"
          }
        ]
      },
      {
        "name": "didSend",
        "displayName": "SC.Request#didSend",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked on the original request object just after the request is sent to\n    the server.  You might use this callback to update some state in your \n    application.\n    \n    The passed request is a frozen copy of the request, indicating the \n    options set at the time of the request.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "BOOL YES on success, NO on failure"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Request",
            "name": "request",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A copy of the request object, frozen"
          },
          {
            "title": "param",
            "type": "SC.Response",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that will wrap the response"
          }
        ]
      },
      {
        "name": "willReceive",
        "displayName": "SC.Request#willReceive",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when a response has been received but not yet processed.  This is\n    your chance to fix up the response based on the results.  If you don't\n    want to continue processing the response call response.cancel().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Request",
            "name": "request",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A copy of the request object, frozen"
          },
          {
            "title": "param",
            "type": "SC.Response",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that will wrap the response"
          }
        ]
      },
      {
        "name": "didReceive",
        "displayName": "SC.Request#didReceive",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked after a response has been processed but before any listeners are\n    notified.  You can do any standard processing on the request at this \n    point.  If you don't want to allow notifications to continue, call\n    response.cancel()",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Request",
            "name": "request",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A copy of the request object, frozen"
          },
          {
            "title": "param",
            "type": "SC.Response",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object that will wrap the response"
          }
        ]
      },
      {
        "name": "copy",
        "displayName": "SC.Request#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a copy of the current request.  This will only copy certain\n    properties so if you want to add additional properties to the copy you\n    will need to override copy() in a subclass.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new request"
          }
        ],
        "params": []
      },
      {
        "name": "header",
        "displayName": "SC.Request#header",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "To set headers on the request object.  Pass either a single key/value \n    pair or a hash of key/value pairs.  If you pass only a header name, this\n    will return the current value of the header.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request|Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "clearHeaders",
        "displayName": "SC.Request#clearHeaders",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clears the list of headers that were set on this request.\n    This could be used by a subclass to blow-away any custom\n    headers that were added by the super class.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "async",
        "displayName": "SC.Request#async",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the current request to be asynchronous.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "flag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to make asynchronous, NO or undefined"
          }
        ]
      },
      {
        "name": "timeoutAfter",
        "displayName": "SC.Request#timeoutAfter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the maximum amount of time the request will wait for a response.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "timeout",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The timeout in milliseconds."
          }
        ]
      },
      {
        "name": "json",
        "displayName": "SC.Request#json",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the current request to use JSON.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "flag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to make JSON, NO or undefined"
          }
        ]
      },
      {
        "name": "xml",
        "displayName": "SC.Request#xml",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the current request to use XML.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "recevier"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "flag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to make XML, NO or undefined"
          }
        ]
      },
      {
        "name": "send",
        "displayName": "SC.Request#send",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will fire the actual request.  If you have set the request to use JSON \n    mode then you can pass any object that can be converted to JSON as the \n    body.  Otherwise you should pass a string body.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Response",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new response object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Object",
            "name": "body",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional)"
          }
        ]
      },
      {
        "name": "resend",
        "displayName": "SC.Request#resend",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resends the current request.  This is more efficient than calling send()\n    for requests that have already been used in a send.  Otherwise acts just\n    like send().  Does not take a body argument.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Response",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new response object"
          }
        ],
        "params": []
      },
      {
        "name": "notify",
        "displayName": "SC.Request#notify",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Configures a callback to execute when a request completes.  You must pass\n    at least a target and action/method to this and optionally a status code.\n    You may also pass additional parameters which will be passed along to your\n    callback. If your callback handled the notification, it should return YES.\n    \n    Scoping With Status Codes\n    ------\n    \n    If you pass a status code as the first option to this method, then your \n    notification callback will only be called if the response status matches\n    the code.  For example, if you pass 201 (or SC.Request.CREATED) then \n    your method will only be called if the response status from the server\n    is 201.\n    \n    You can also pass \"generic\" status codes such as 200, 300, or 400, which\n    will be invoked anytime the status code is the range if a more specific \n    notifier was not registered first and returned YES.  \n    \n    Finally, passing a status code of 0 or no status at all will cause your\n    method to be executed no matter what the resulting status is unless a \n    more specific notifier was registered and returned YES.\n    \n    Callback Format\n    ------\n    \n    Your notification callback should expect to receive the Response object\n    as the first parameter plus any additional parameters that you pass.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "status",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String|function",
            "name": "action",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getUrl",
        "displayName": "SC.Request.getUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method for quickly setting up a GET request.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "address",
            "isOptional": false,
            "defaultValue": "",
            "desc": "url of request"
          }
        ]
      },
      {
        "name": "postUrl",
        "displayName": "SC.Request.postUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method for quickly setting up a POST request.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "address",
            "isOptional": false,
            "defaultValue": "",
            "desc": "url of request"
          },
          {
            "title": "param",
            "type": "String",
            "name": "body",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "deleteUrl",
        "displayName": "SC.Request.deleteUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method for quickly setting up a DELETE request.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "address",
            "isOptional": false,
            "defaultValue": "",
            "desc": "url of request"
          }
        ]
      },
      {
        "name": "putUrl",
        "displayName": "SC.Request.putUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper method for quickly setting up a PUT request.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Request",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "address",
            "isOptional": false,
            "defaultValue": "",
            "desc": "url of request"
          },
          {
            "title": "param",
            "type": "String",
            "name": "body",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isAsynchronous",
        "displayName": "SC.Request#isAsynchronous",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "Sends the request asynchronously instead of blocking the browser.  You\n    should almost always make requests asynchronous.  You can change this \n    options with the async() helper option (or simply set it directly).",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isJSON",
        "displayName": "SC.Request#isJSON",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "Processes the request and response as JSON if possible.  You can change\n    this option with the json() helper method.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isXML",
        "displayName": "SC.Request#isXML",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "Process the request and response as XML if possible.  You can change this\n    option with the xml() helper method.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "attachIdentifyingHeaders",
        "displayName": "SC.Request#attachIdentifyingHeaders",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "Specifies whether or not the request will have custom headers attached\n    to it. By default, SC.Request attaches X-Requested-With and\n    X-SproutCore-Version headers to all outgoing requests. This allows\n    you to override that behavior.\n\n    You may want to set this to NO if you are making simple CORS requests\n    in compatible browsers. See <a href=\"http://www.w3.org/TR/cors/\">CORS \n    Spec for more informatinon.</a>\n    \n    TODO: Add unit tests for this feature",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "responseClass",
        "displayName": "SC.Request#responseClass",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "Underlying response class to actually handle this request.  Currently the\n    only supported option is SC.XHRResponse which uses a traditional\n    XHR transport.",
        "defaultValue": "SC.XHRResponse",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "source",
        "displayName": "SC.Request#source",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "The original request for copied requests.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "address",
        "displayName": "SC.Request#address",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "The URL this request to go to.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "type",
        "displayName": "SC.Request#type",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "The HTTP method to use.",
        "defaultValue": "GET",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "timeout",
        "displayName": "SC.Request#timeout",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "An optional timeout value of the request, in milliseconds.  The timer\n    begins when SC.Response#fire is actually invoked by the request manager\n    and not necessarily when SC.Request#send is invoked.  If this timeout is\n    reached before a response is received, the equivalent of\n    SC.Request.manager#cancel() will be invoked on the SC.Response instance\n    and the didReceive() callback will be called.\n\n    An exception will be thrown if you try to invoke send() on a request that\n    has both a timeout and isAsyncronous set to NO.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "body",
        "displayName": "SC.Request#body",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request",
        "overview": "The body of the request.  May be an object is isJSON or isXML is set,\n    otherwise should be a string.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 4681,
    "name": "manager",
    "displayName": "SC.Request.manager",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/ajax/system/request.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The request manager coordinates all of the active XHR requests.  It will\n  only allow a certain number of requests to be active at a time; queuing \n  any others.  This allows you more precise control over which requests load\n  in which order.",
    "methods": [
      {
        "name": "sendRequest",
        "displayName": "SC.Request.manager.sendRequest",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the send() method on a request.  This will create a new low-\n    level transport object and queue it if needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "response object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Request",
            "name": "request",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the request to send"
          }
        ]
      },
      {
        "name": "cancel",
        "displayName": "SC.Request.manager.cancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cancels a specific request.  If the request is pending it will simply\n    be removed.  Otherwise it will actually be cancelled.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if cancelled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a response object"
          }
        ]
      },
      {
        "name": "cancelAll",
        "displayName": "SC.Request.manager.cancelAll",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cancels all inflight and pending requests.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if any items were cancelled."
          }
        ],
        "params": []
      },
      {
        "name": "fireRequestIfNeeded",
        "displayName": "SC.Request.manager.fireRequestIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks the inflight queue.  If there is an open slot, this will move a \n    request from pending to inflight.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "transportDidClose",
        "displayName": "SC.Request.manager.transportDidClose",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a response/transport object when finishes running.  Removes \n    the transport from the queue and kicks off the next one.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "response",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "maxRequests",
        "displayName": "SC.Request.manager.maxRequests",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request.manager",
        "overview": "Maximum number of concurrent requests allowed.  6 for all browsers.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "inflight",
        "displayName": "SC.Request.manager.inflight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request.manager",
        "overview": "Current requests that are inflight.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pending",
        "displayName": "SC.Request.manager.pending",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Request.manager",
        "overview": "Requests that are pending and have not been started yet.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 7223,
    "name": "Responder",
    "displayName": "SC.Responder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/responder.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Provides common methods for sending events down a responder chain.\n  Responder chains are used most often to deliver events to user interface\n  elements in your application, but you can also use them to deliver generic\n  events to any part of your application, including controllers.",
    "methods": [
      {
        "name": "becomeFirstResponder",
        "displayName": "SC.Responder#becomeFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method on your view or responder to make it become first \n    responder.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Responder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "resignFirstResponder",
        "displayName": "SC.Responder#resignFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method on your view or responder to resign your first responder \n    status. Normally this is not necessary since you will lose first responder \n    status automatically when another view becomes first responder.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Responder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Event",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "original event that caused this method to be called"
          }
        ]
      },
      {
        "name": "willLoseFirstResponder",
        "displayName": "SC.Responder#willLoseFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just before the responder or any of its subresponder's are about to\n    lose their first responder status.  The passed responder is the responder\n    that is about to lose its status. \n    \n    Override this method to provide any standard teardown when the first \n    responder changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the responder that is about to change"
          }
        ]
      },
      {
        "name": "didBecomeFirstResponder",
        "displayName": "SC.Responder#didBecomeFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just after the responder or any of its subresponder's becomes a \n    first responder.  \n    \n    Override this method to provide any standard setup when the first \n    responder changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the responder that changed"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "pane",
        "displayName": "SC.Responder#pane",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "responderContext",
        "displayName": "SC.Responder#responderContext",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nextResponder",
        "displayName": "SC.Responder#nextResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isFirstResponder",
        "displayName": "SC.Responder#isFirstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasFirstResponder",
        "displayName": "SC.Responder#hasFirstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.Responder#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Responder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6028,
    "name": "ResponderContext",
    "displayName": "SC.ResponderContext",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/mixins/responder_context.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The root object for a responder chain.  A responder context can dispatch\n  actions directly to a first responder; walking up the responder chain until\n  it finds a responder that can handle the action.\n\n  If no responder can be found to handle the action, it will attempt to send\n  the action to the defaultResponder.\n\n  You can have as many ResponderContext's as you want within your application.\n  Every SC.Pane and SC.Application automatically implements this mixin.\n\n  Note that to implement this, you should mix SC.ResponderContext into an\n  SC.Responder or SC.Responder subclass.",
    "methods": [
      {
        "name": "nextResponder",
        "displayName": "SC.ResponderContext.nextResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "nextResponderFor",
        "displayName": "SC.ResponderContext.nextResponderFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the next responder for the passed responder based on the responder's\n    nextResponder property.  If the property is a string, then lookup the path\n    in the receiver.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "responderNameFor",
        "displayName": "SC.ResponderContext.responderNameFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the responder name by searching the responders one time.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeFirstResponder",
        "displayName": "SC.ResponderContext.makeFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Makes the passed responder into the new firstResponder for this\n    responder context.  This will cause the current first responder to lose\n    its responder status and possibly keyResponder status as well.\n\n    When you change the first responder, this will send callbacks to\n    responders up the chain until you reach a shared responder, at which point\n    it will stop notifying.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ResponderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "that cause this to become first responder"
          }
        ]
      },
      {
        "name": "resetFirstResponder",
        "displayName": "SC.ResponderContext.resetFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Re-enters the current responder (calling willLoseFirstResponder and didBecomeFirstResponder).",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sendAction",
        "displayName": "SC.ResponderContext.sendAction",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Send the passed action down the responder chain, starting with the\n    current first responder.  This will look for the first responder that\n    actually implements the action method and returns YES or no value when\n    called.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Responder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the responder that handled it or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "action",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name of action"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object sending the action"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additonal context info"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "trace",
        "displayName": "SC.ResponderContext.trace",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ResponderContext",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultResponder",
        "displayName": "SC.ResponderContext.defaultResponder",
        "objectType": "property",
        "propertyType": "SC.Responder",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ResponderContext",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "firstResponder",
        "displayName": "SC.ResponderContext.firstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ResponderContext",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 7246,
    "name": "RootResponder",
    "displayName": "SC.RootResponder",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/root_responder.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The RootResponder captures events coming from a web browser and routes them\n  to the correct view in the view hierarchy.  Usually you do not work with a\n  RootResponder directly.  Instead you will work with Pane objects, which\n  register themselves with the RootResponder as needed to receive events.\n\n  RootResponder and Platforms\n  ---\n\n  RootResponder contains core functionality common among the different web\n  platforms. You will likely be working with a subclass of RootResponder that\n  implements functionality unique to that platform.\n\n  The correct instance of RootResponder is detected at runtime and loaded\n  transparently.\n\n  Event Types\n  ---\n\n  RootResponders can route four types of events:\n\n   - Direct events, such as mouse and touch events.  These are routed to the\n     nearest view managing the target DOM elment. RootResponder also handles\n     multitouch events so that they are delegated to the correct views.\n   - Keyboard events. These are sent to the keyPane, which will then send the\n     event to the current firstResponder and up the responder chain.\n   - Resize events. When the viewport resizes, these events will be sent to all\n     panes.\n   - Keyboard shortcuts. Shortcuts are sent to the keyPane first, which\n     will go down its view hierarchy. Then they go to the mainPane, which will\n     go down its view hierarchy.\n   - Actions. Actions are generic messages that your application can send in\n     response to user action or other events. You can either specify an\n     explicit target, or allow the action to traverse the hierarchy until a\n     view is found that handles it.",
    "methods": [
      {
        "name": "makeMainPane",
        "displayName": "SC.RootResponder#makeMainPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Swaps the main pane.  If the current main pane is also the key pane, then\n    the new main pane will also be made key view automatically.  In addition\n    to simply updating the mainPane property, this method will also notify the\n    panes themselves that they will lose/gain their mainView status.\n\n    Note that this method does not actually change the Pane's place in the\n    document body.  That will be handled by the Pane itself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RootResponder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeMenuPane",
        "displayName": "SC.RootResponder#makeMenuPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets a pane as the menu pane. All key events will be directed to this\n    pane, but the current key pane will not lose focus.\n\n    Usually you would not call this method directly, but allow instances of\n    SC.MenuPane to manage the menu pane for you. If your pane does need to\n    become menu pane, you should relinquish control by calling this method\n    with a null parameter. Otherwise, key events will always be delivered to\n    that pane.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RootResponder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.MenuPane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeKeyPane",
        "displayName": "SC.RootResponder#makeKeyPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Makes the passed pane the new key pane.  If you pass null or if the pane\n    does not accept key focus, then key focus will transfer to the previous\n    key pane (if it is still attached), and so on down the stack.  This will\n    notify both the old pane and the new root View that key focus has changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RootResponder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "computeWindowSize",
        "displayName": "SC.RootResponder#computeWindowSize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the window size from the DOM.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Rect"
          }
        ],
        "params": []
      },
      {
        "name": "resize",
        "displayName": "SC.RootResponder#resize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "On window resize, notifies panes of the change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "focus",
        "displayName": "SC.RootResponder#focus",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handle window focus.  Change hasFocus and add sc-focus CSS class\n    (removing sc-blur).  Also notify panes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "focusin",
        "displayName": "SC.RootResponder#focusin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handle window focus event for IE. Listening to the focus event is not\n    reliable as per every focus event you receive you inmediately get a blur\n    event (Only on IE of course ;)",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "focusout",
        "displayName": "SC.RootResponder#focusout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handle window blur event for IE. Listening to the focus event is not\n    reliable as per every focus event you receive you inmediately get a blur\n    event (Only on IE of course ;)",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "blur",
        "displayName": "SC.RootResponder#blur",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handle window focus.  Change hasFocus and add sc-focus CSS class (removing\n    sc-blur).  Also notify panes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sendAction",
        "displayName": "SC.RootResponder#sendAction",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Route an action message to the appropriate responder.  This method will\n    walk the responder chain, attempting to find a responder that implements\n    the action name you pass to this method.  Set 'target' to null to search\n    the responder chain.\n*IMPORTANT**: This method's API and implementation will likely change\n    significantly after SproutCore 1.0 to match the version found in\n    SC.ResponderContext.\n\n    You generally should not call or override this method in your own\n    applications.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if action was performed, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "action",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The action to perform - this is a method name."
          },
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to set method to (can be null)"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The sender of the action"
          },
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "pane",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional pane to start search with"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional. only passed to ResponderContexts"
          },
          {
            "title": "param",
            "type": "",
            "name": "firstResponder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "targetForAction",
        "displayName": "SC.RootResponder#targetForAction",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to determine the initial target for a given action/target/sender\n    tuple.  This is the method used by sendAction() to try to determine the\n    correct target starting point for an action before trickling up the\n    responder chain.\n\n    You send actions for user interface events and for menu actions.\n\n    This method returns an object if a starting target was found or null if no\n    object could be found that responds to the target action.\n\n    Passing an explicit target or pane constrains the target lookup to just\n    them; the defaultResponder and other panes are *not* searched.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "target object or null if none found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object|String",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "or null if no target is specified"
          },
          {
            "title": "param",
            "type": "String",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "name for target"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "sender",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional sender"
          },
          {
            "title": "param",
            "type": "SC.Pane",
            "name": "optional",
            "isOptional": false,
            "defaultValue": "",
            "desc": "pane"
          },
          {
            "title": "param",
            "type": "firstResponder",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": "first responder to use"
          }
        ]
      },
      {
        "name": "targetViewForEvent",
        "displayName": "SC.RootResponder#targetViewForEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the view that appears to be targeted by the passed event.  This only\n    works on events with a valid target property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view instance or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "sendEvent",
        "displayName": "SC.RootResponder#sendEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to send an event down the responder chain.  This method will\n    invoke the sendEvent() method on either the keyPane or on the pane owning\n    the target view you pass in.  It will also automatically begin and end\n    a new run loop.\n\n    If you want to trap additional events, you should use this method to\n    send the event down the responder chain.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object that handled the event or null if not handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "action",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "listenFor",
        "displayName": "SC.RootResponder#listenFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default method to add an event listener for the named event.  If you simply\n    need to add listeners for a type of event, you can use this method as\n    shorthand.  Pass an array of event types to listen for and the element to\n    listen in.  A listener will only be added if a handler is actually installed\n    on the RootResponder (or receiver) of the same name.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RootResponder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "keyNames",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Element",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "receiver",
            "isOptional": false,
            "defaultValue": "",
            "desc": "- optional if you don't want 'this'"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "useCapture",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setup",
        "displayName": "SC.RootResponder#setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the document is ready to begin handling events.  Setup event\n    listeners in this method that you are interested in observing for your\n    particular platform.  Be sure to call sc_super().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "touchesForView",
        "displayName": "SC.RootResponder#touchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the touches that are registered to the specified view or responder; undefined if none.\n\n    When views receive a touch event, they have the option to subscribe to it.\n    They are then mapped to touch events and vice-versa. This returns touches mapped to the view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "averagedTouchesForView",
        "displayName": "SC.RootResponder#averagedTouchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes a hash with x, y, and d (distance) properties, containing the average position\n    of all touches, and the average distance of all touches from that average.\n\n    This is useful for implementing scaling.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "added",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "makeTouchResponder",
        "displayName": "SC.RootResponder#makeTouchResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The touch responder for any given touch is the view which will receive touch events\n    for that touch. Quite simple.\n\n    makeTouchResponder takes a potential responder as an argument, and, by calling touchStart on each\n    nextResponder, finds the actual responder. As a side-effect of how it does this, touchStart is called\n    on the new responder before touchCancelled is called on the old one (touchStart has to accept the touch\n    before it can be considered cancelled).\n\n    You usually don't have to think about this at all. However, if you don't want your view to,\n    for instance, prevent scrolling in a ScrollView, you need to make sure to transfer control\n    back to the previous responder:\n\n        if (Math.abs(touch.pageY - touch.startY) > this.MAX_SWIPE)\n          touch.restoreLastTouchResponder();\n\n    You don't call makeTouchResponder on RootResponder directly. Instead, it gets called for you\n    when you return YES to captureTouch or touchStart.\n\n    You do, however, use a form of makeTouchResponder to return to a previous touch responder. Consider\n    a button view inside a ScrollView: if the touch moves too much, the button should give control back\n    to the scroll view.\n\n        if (Math.abs(touch.pageX - touch.startX) > 4) {\n          if (touch.nextTouchResponder)\n            touch.makeTouchResponder(touch.nextTouchResponder);\n        }\n\n    This will give control back to the containing view. Maybe you only want to do it if it is a ScrollView?\n\n        if (\n          Math.abs(touch.pageX - touch.startX) > 4 &&\n          touch.nextTouchResponder &&\n          touch.nextTouchResponder.isScrollable\n        )\n          touch.makeTouchResponder(touch.nextTouchResponder);\n\n    Possible gotcha: while you can do touch.nextTouchResponder, the responders are not chained in a linked list like\n    normal responders, because each touch has its own responder stack. To navigate through the stack (or, though\n    it is not recommended, change it), use touch.touchResponders (the raw stack array).\n\n    makeTouchResponder is called with an event object. However, it usually triggers custom touchStart/touchCancelled\n    events on the views. The event object is passed so that functions such as stopPropagation may be called.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "shouldStack",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "upViewChain",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "captureTouch",
        "displayName": "SC.RootResponder#captureTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "captureTouch is used to find the view to handle a touch. It starts at the starting point and works down\n    to the touch's target, looking for a view which captures the touch. If no view is found, it uses the target\n    view.\n\n    Then, it triggers a touchStart event starting at whatever the found view was; this propagates up the view chain\n    until a view responds YES. This view becomes the touch's owner.\n\n    You usually do not call captureTouch, and if you do call it, you'd call it on the touch itself:\n    touch.captureTouch(startingPoint, shouldStack)\n\n    If shouldStack is YES, the previous responder will be kept so that it may be returned to later.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "startingPoint",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "shouldStack",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "attemptKeyEquivalent",
        "displayName": "SC.RootResponder#attemptKeyEquivalent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked on a keyDown event that is not handled by any actual value.  This\n    will get the key equivalent string and then walk down the keyPane, then\n    the focusedPane, then the mainPane, looking for someone to handle it.\n    Note that this will walk DOWN the view hierarchy, not up it like most.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Object that handled evet or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "beforedeactivate",
        "displayName": "SC.RootResponder#beforedeactivate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "IE's default behavior to blur textfields and other controls can only be\n    blocked by returning NO to this event. However we don't want to block\n    its default behavior otherwise textfields won't loose focus by clicking on\n    an empty area as it's expected. If you want to block IE from bluring another\n    control set blockIEDeactivate to true on the especific view in which you\n    want to avoid this. Think of an autocomplete menu, you want to click on\n    the menu but don't loose focus.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseup",
        "displayName": "SC.RootResponder#mouseup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "mouseUp only gets delivered to the view that handled the mouseDown evt.\n    we also handle click and double click notifications through here to\n    ensure consistant delivery.  Note that if mouseDownView is not\n    implemented, then no mouseUp event will be sent, but a click will be\n    sent.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "click",
        "displayName": "SC.RootResponder#click",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Certain browsers ignore us overriding mouseup and mousedown events and\n    still allow default behavior (such as navigating away when the user clicks\n    on a link). To block default behavior, we store whether or not the last\n    mouseup or mousedown events resulted in us calling preventDefault() or\n    stopPropagation(), in which case we make the same calls on the click event.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "whether the event should be propagated to the browser"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the click event"
          }
        ]
      },
      {
        "name": "mousemove",
        "displayName": "SC.RootResponder#mousemove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will send mouseEntered, mouseExited, mousedDragged and mouseMoved\n   to the views you hover over.  To receive these events, you must implement\n   the method. If any subviews implement them and return true, then you won't\n   receive any notices.\n\n   If there is a target mouseDown view, then mouse moved events will also\n   trigger calls to mouseDragged.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "panes",
        "displayName": "SC.RootResponder#panes",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "Contains a list of all panes currently visible on screen.  Everytime a\n    pane attaches or detaches, it will update itself in this array.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "mainPane",
        "displayName": "SC.RootResponder#mainPane",
        "objectType": "property",
        "propertyType": "SC.MainPane",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "The main pane.  This pane receives shortcuts and actions if the\n    focusedPane does not respond to them.  There can be only one main pane.\n    You can swap main panes by calling makeMainPane() here.\n\n    Usually you will not need to edit the main pane directly.  Instead, you\n    should use a MainPane subclass, which will automatically make itself main\n    when you append it to the document.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuPane",
        "displayName": "SC.RootResponder#menuPane",
        "objectType": "property",
        "propertyType": "SC.MenuPane",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "The current menu pane. This pane receives keyboard events before all other\n    panes, but tends to be transient, as it is only set when a pane is open.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "keyPane",
        "displayName": "SC.RootResponder#keyPane",
        "objectType": "property",
        "propertyType": "SC.Pane",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "The current key pane. This pane receives keyboard events, shortcuts, and\n    actions first, unless a menu is open. This pane is usually the highest\n    ordered pane or the mainPane.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "previousKeyPanes",
        "displayName": "SC.RootResponder#previousKeyPanes",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "currentWindowSize",
        "displayName": "SC.RootResponder#currentWindowSize",
        "objectType": "property",
        "propertyType": "Rect",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "The last known window size.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasFocus",
        "displayName": "SC.RootResponder#hasFocus",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "Indicates whether or not the window currently has focus.  If you need\n    to do something based on whether or not the window is in focus, you can\n    setup a binding or observer to this property.  Note that the SproutCore\n    automatically adds an sc-focus or sc-blur CSS class to the body tag as\n    appropriate.  If you only care about changing the appearance of your\n    controls, you should use those classes in your CSS rules instead.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultResponder",
        "displayName": "SC.RootResponder#defaultResponder",
        "objectType": "property",
        "propertyType": "SC.Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RootResponder",
        "overview": "Set this to a delegate object that can respond to actions as they are sent\n    down the responder chain.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 45660,
    "name": "routes",
    "displayName": "SC.routes",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/routing/system/routes.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "SC.routes manages the browser location. You can change the hash part of the\n  current location. The following code\n  \n      SC.routes.set('location', 'notes/edit/4');\n  \n  will change the location to http://domain.tld/my_app#notes/edit/4. Adding\n  routes will register a handler that will be called whenever the location\n  changes and matches the route:\n  \n      SC.routes.add(':controller/:action/:id', MyApp, MyApp.route);\n  \n  You can pass additional parameters in the location hash that will be relayed\n  to the route handler:\n  \n      SC.routes.set('location', 'notes/show/4?format=xml&language=fr');\n  \n  The syntax for the location hash is described in the location property\n  documentation, and the syntax for adding handlers is described in the\n  add method documentation.\n  \n  Browsers keep track of the locations in their history, so when the user\n  presses the 'back' or 'forward' button, the location is changed, SC.route\n  catches it and calls your handler. Except for Internet Explorer versions 7\n  and earlier, which do not modify the history stack when the location hash\n  changes.\n  \n  SC.routes also supports HTML5 history, which uses a '/' instead of a '#'\n  in the URLs, so that all your website's URLs are consistent.",
    "methods": [
      {
        "name": "location",
        "displayName": "SC.routes#location",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current location hash. It is the part in the browser's location after\n    the '#' mark.\n    \n    The following code\n    \n        SC.routes.set('location', 'notes/edit/4');\n    \n    will change the location to http://domain.tld/my_app#notes/edit/4 and call\n    the correct route handler if it has been registered with the add method.\n    \n    You can also pass additional parameters. They will be relayed to the route\n    handler. For example, the following code\n    \n        SC.routes.add(':controller/:action/:id', MyApp, MyApp.route);\n        SC.routes.set('location', 'notes/show/4?format=xml&language=fr');\n    \n    will change the location to \n    http://domain.tld/my_app#notes/show/4?format=xml&language=fr and call the\n    MyApp.route method with the following argument:\n    \n        { route: 'notes/show/4',\n          params: '?format=xml&language=fr',\n          controller: 'notes',\n          action: 'show',\n          id: '4',\n          format: 'xml',\n          language: 'fr' }\n    \n    The location can also be set with a hash, the following code\n    \n        SC.routes.set('location',\n          { route: 'notes/edit/4', format: 'xml', language: 'fr' });\n    \n    will change the location to\n    http://domain.tld/my_app#notes/show/4?format=xml&language=fr.\n    \n    The 'notes/show/4&format=xml&language=fr' syntax for passing parameters,\n    using a '&' instead of a '?', as used in SproutCore 1.0 is still supported.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "ping",
        "displayName": "SC.routes#ping",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You usually don't need to call this method. It is done automatically after\n    the application has been initialized.\n    \n    It registers for the hashchange event if available. If not, it creates a\n    timer that looks for location changes every 150ms.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hashChange",
        "displayName": "SC.routes#hashChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Event handler for the hashchange event. Called automatically by the browser\n    if it supports the hashchange event, or by our timer if not.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.routes#add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a route handler. Routes have the following format:\n\n     - 'users/show/5' is a static route and only matches this exact string,\n     - ':action/:controller/:id' is a dynamic route and the handler will be\n        called with the 'action', 'controller' and 'id' parameters passed in a\n        hash,\n     - '*url' is a wildcard route, it matches the whole route and the handler\n        will be called with the 'url' parameter passed in a hash.\n    \n    Route types can be combined, the following are valid routes:\n\n     - 'users/:action/:id'\n     - ':controller/show/:id'\n     - ':controller/ *url' (ignore the space, because of jslint)",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "route",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the route to be registered"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object on which the method will be called, or\n      directly the function to be called to handle the route"
          },
          {
            "title": "param",
            "type": "Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the method to be called on target to handle the\n      route, can be a function or a string"
          }
        ]
      },
      {
        "name": "locationDidChange",
        "displayName": "SC.routes#locationDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Observer of the 'location' property that calls the correct route handler\n    when the location changes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "trigger",
        "displayName": "SC.routes#trigger",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Triggers a route even if already in that route (does change the location, if it\n    is not already changed, as well).\n    \n    If the location is not the same as the supplied location, this simply lets \"location\"\n    handle it (which ends up coming back to here).",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "wantsHistory",
        "displayName": "SC.routes#wantsHistory",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "http://dev.w3.org/html5/spec/history.html#the-history-interface"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.routes",
        "overview": "Set this property to YES if you want to use HTML5 history, if available on\n    the browser, instead of the location hash.\n    \n    HTML 5 history uses the history.pushState method and the window's popstate\n    event.\n    \n    By default it is NO, so your URLs will look like:\n\n        http://domain.tld/my_app#notes/edit/4\n    \n    If set to YES and the browser supports pushState(), your URLs will look\n    like:\n\n        http://domain.tld/my_app/notes/edit/4\n    \n    You will also need to make sure that baseURI is properly configured, as\n    well as your server so that your routes are properly pointing to your\n    SproutCore application.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "usesHistory",
        "displayName": "SC.routes#usesHistory",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "wantsHistory"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.routes",
        "overview": "A read-only boolean indicating whether or not HTML5 history is used. Based\n    on the value of wantsHistory and the browser's support for pushState.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "baseURI",
        "displayName": "SC.routes#baseURI",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "http://www.w3.org/TR/html5/semantics.html#the-base-element"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.routes",
        "overview": "The base URI used to resolve routes (which are relative URLs). Only used\n    when usesHistory is equal to YES.\n    \n    The build tools automatically configure this value if you have the\n    html5_history option activated in the Buildfile:\n\n        config :my_app, :html5_history => true\n    \n    Alternatively, it uses by default the value of the href attribute of the\n    <base> tag of the HTML document. For example:\n\n        <base href=\"http://domain.tld/my_app\">\n    \n    The value can also be customized before or during the exectution of the\n    main() method.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48476,
    "name": "RunLoop",
    "displayName": "SC.RunLoop",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/run_loop.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The run loop provides a universal system for coordinating events within\n  your application.  The run loop processes timers as well as pending\n  observer notifications within your application.\n\n  To use a RunLoop within your application, you should make sure your event\n  handlers always begin and end with SC.RunLoop.begin() and SC.RunLoop.end()\n\n  The RunLoop is important because bindings do not fire until the end of\n  your run loop is reached.  This improves the performance of your\n  application.\n\n  Example:\n\n  This is how you could write your mouseup handler in jQuery:\n\n        $('#okButton').on('click', function() {\n          SC.RunLoop.begin();\n\n          // handle click event...\n\n          SC.RunLoop.end(); // allows bindings to trigger...\n        });",
    "methods": [
      {
        "name": "startTime",
        "displayName": "SC.RunLoop#startTime",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The time the current run loop began executing.\n\n    All timers scheduled during this run loop will begin executing as if\n    they were scheduled at this time.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "scheduleTimer",
        "displayName": "SC.RunLoop#scheduleTimer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Schedules a timer to execute at the specified runTime.  You will not\n    usually call this method directly.  Instead you should work with SC.Timer,\n    which will manage both creating the timer and scheduling it.\n\n    Calling this method on a timer that is already scheduled will remove it\n    from the existing schedule and reschedule it.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Timer",
            "name": "timer",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the timer to schedule"
          },
          {
            "title": "param",
            "type": "Time",
            "name": "runTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the time offset when you want this to run"
          }
        ]
      },
      {
        "name": "cancelTimer",
        "displayName": "SC.RunLoop#cancelTimer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the named timer from the timeout queue.  If the timer is not\n    currently scheduled, this method will have no effect.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Timer",
            "name": "timer",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the timer to schedule"
          }
        ]
      },
      {
        "name": "fireExpiredTimers",
        "displayName": "SC.RunLoop#fireExpiredTimers",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes any timers that have expired since this method was last called.\n    Usually you will not call this method directly, but it will be invoked\n    automatically at the end of the run loop.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if timers were fired, NO otherwise"
          }
        ],
        "params": []
      },
      {
        "name": "beginRunLoop",
        "displayName": "SC.RunLoop#beginRunLoop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenver you begin executing code.\n\n    This is typically invoked automatically for you from event handlers and\n    the timeout handler.  If you call setTimeout() or setInterval() yourself,\n    you may need to invoke this yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "isRunLoopInProgress",
        "displayName": "SC.RunLoop#isRunLoopInProgress",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "YES when a run loop is in progress",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "endRunLoop",
        "displayName": "SC.RunLoop#endRunLoop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you are done executing code.\n\n    This is typically invoked automatically for you from event handlers and\n    the timeout handler.  If you call setTimeout() or setInterval() yourself\n    you may need to invoke this yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "flushAllPending",
        "displayName": "SC.RunLoop#flushAllPending",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Repeatedly flushes all bindings, observers, and other queued functions until all queues are empty.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "invokeOnce",
        "displayName": "SC.RunLoop#invokeOnce",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the passed target/method pair once at the end of the runloop.\n    You can call this method as many times as you like and the method will\n    only be invoked once.\n\n    Usually you will not call this method directly but use invokeOnce()\n    defined on SC.Object.\n\n    Note that in development mode only, the object and method that call this\n    method will be recorded, for help in debugging scheduled code.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "invokeLast",
        "displayName": "SC.RunLoop#invokeLast",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokes the passed target/method pair at the very end of the run loop,\n    once all other delayed invoke queues have been flushed.  Use this to\n    schedule cleanup methods at the end of the run loop once all other work\n    (including rendering) has finished.\n\n    If you call this with the same target/method pair multiple times it will\n    only invoke the pair only once at the end of the runloop.\n\n    Usually you will not call this method directly but use invokeLast()\n    defined on SC.Object.\n\n    Note that in development mode only, the object and method that call this\n    method will be recorded, for help in debugging scheduled code.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Function",
            "name": "method",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "flushApplicationQueues",
        "displayName": "SC.RunLoop#flushApplicationQueues",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Executes any pending events at the end of the run loop.  This method is\n    called automatically at the end of a run loop to flush any pending\n    queue changes.\n\n    The default method will invoke any one time methods and then sync any\n    bindings that might have changed.  You can override this method in a\n    subclass if you like to handle additional cleanup.\n\n    This method must return YES if it found any items pending in its queues\n    to take action on.  endRunLoop will invoke this method repeatedly until\n    the method returns NO.  This way if any if your final executing code\n    causes additional queues to trigger, then can be flushed again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if items were found in any queue, NO otherwise"
          }
        ],
        "params": []
      },
      {
        "name": "begin",
        "displayName": "SC.RunLoop.begin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new run loop on the currentRunLoop.  If you are already in a\n  runloop, this method has no effect.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "end",
        "displayName": "SC.RunLoop.end",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends the run loop on the currentRunLoop.  This will deliver any final\n  pending notifications and schedule any additional necessary cleanup.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RunLoop",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "isRunLoopInProgress",
        "displayName": "SC.RunLoop.isRunLoopInProgress",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES when a run loop is in progress",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "currentRunLoop",
        "displayName": "SC.RunLoop.currentRunLoop",
        "objectType": "property",
        "propertyType": "SC.RunLoop",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RunLoop",
        "overview": "The current run loop.  This is created automatically the first time you\n  call begin().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "runLoopClass",
        "displayName": "SC.RunLoop.runLoopClass",
        "objectType": "property",
        "propertyType": "Class",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.RunLoop",
        "overview": "The default RunLoop class.  If you choose to extend the RunLoop, you can\n  set this property to make sure your class is used instead.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 20580,
    "name": "Scanner",
    "displayName": "SC.Scanner",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datetime/frameworks/core/system/datetime.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Martin Ottenwaelter",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "A Scanner reads a string and interprets the characters into numbers. You\n  assign the scanner's string on initialization and the scanner progresses\n  through the characters of that string from beginning to end as you request\n  items.\n  \n  Scanners are used by `DateTime` to convert strings into `DateTime` objects.",
    "methods": [
      {
        "name": "scan",
        "displayName": "SC.Scanner#scan",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads some characters from the string, and increments the scan location\n    accordingly.",
        "exceptions": [
          {
            "title": "throws",
            "type": "SC.SCANNER_OUT_OF_BOUNDS_ERROR",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if asked to read too many characters"
          }
        ],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the characters"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "integer",
            "name": "len",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount of characters to read"
          }
        ]
      },
      {
        "name": "scanInt",
        "displayName": "SC.Scanner#scanInt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads some characters from the string and interprets it as an integer.",
        "exceptions": [
          {
            "title": "throws",
            "type": "SC.SCANNER_INT_ERROR",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if asked to read non numeric characters"
          }
        ],
        "returns": [
          {
            "title": "return",
            "type": "integer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the scanned integer"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "integer",
            "name": "min_len",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the minimum amount of characters to read"
          },
          {
            "title": "param",
            "type": "integer",
            "name": "max_len",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally the maximum amount of characters to read (defaults to the minimum)"
          }
        ]
      },
      {
        "name": "skipString",
        "displayName": "SC.Scanner#skipString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to skip a given string.",
        "exceptions": [
          {
            "title": "throws",
            "type": "SC.SCANNER_SKIP_ERROR",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if the given string could not be scanned"
          }
        ],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the given string was successfully scanned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the string to skip"
          }
        ]
      },
      {
        "name": "scanArray",
        "displayName": "SC.Scanner#scanArray",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to scan any string in a given array.",
        "exceptions": [
          {
            "title": "throws",
            "type": "SC.SCANNER_SCAN_ARRAY_ERROR",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if no string of the given array is found"
          }
        ],
        "returns": [
          {
            "title": "return",
            "type": "integer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of the scanned string of the given array"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "ary",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the array of strings to scan"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "string",
        "displayName": "SC.Scanner#string",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scanner",
        "overview": "The string to scan. You usually pass it to the create method:\n    \n        SC.Scanner.create({string: 'May, 8th'});",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scanLocation",
        "displayName": "SC.Scanner#scanLocation",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scanner",
        "overview": "The current scan location. It is incremented by the scanner as the\n    characters are processed.\n    The default is 0: the beginning of the string.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 29088,
    "name": "SceneView",
    "displayName": "SC.SceneView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/scene.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ContainerView"
      }
    ],
    "overview": "Displays several views as scenes that can slide on and off the screen.  The\n  scene view is a nice way to provide a simple effect of moving from a \n  higher level screen to a more detailed level screen.  You will be able to\n  optionally choose the kind of animation used to transition the two scenes \n  as well if supported on the web browser.\n  \n  # Using SC.SceneView\n  \n  To setup the scene view, you should define the 'scenes' property with an \n  array of scene names.  These will be the properties on the scene view that\n  you can shift in an out of view as needed.  You can edit the scenes property\n  at any time.  It will only be used when you start to transition from one\n  scene to another.\n  \n  Next you should set your nowShowing property to the name of the scene you \n  would like to display.  This will cause the view to transition scenes if it\n  is visible on screen.  Otherwise, it will simply make the new scene view \n  the current content view and that's it.",
    "methods": [],
    "properties": [
      {
        "name": "scenes",
        "displayName": "SC.SceneView#scenes",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SceneView",
        "overview": "Array of scene names.  Scenes will slide on and off screen in the order\n    that you specifiy them here.  That is, if you shift from a scene at index\n    2 to a scene at index 1, the scenes will animation backwards.  If you\n    shift to a scene at index 3, the scenes will animate forwards.",
        "defaultValue": "['master', 'detail']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nowShowing",
        "displayName": "SC.SceneView#nowShowing",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SceneView",
        "overview": "The currently showing scene.  Changing this property will cause the \n    scene view to transition to the new scene.  If you set this property to \n    null, an empty string, or a non-existant scene, then the scene will appear\n    empty.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "transitionDuration",
        "displayName": "SC.SceneView#transitionDuration",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SceneView",
        "overview": "Speed of transition.  Should be expressed in msec.",
        "defaultValue": "200",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 21678,
    "name": "Scrollable",
    "displayName": "SC.Scrollable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/mixins/scrollable.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "Any views you implement that are scrollable should include this mixin to\n  provide basic support for scrolling actions.  You can also override any \n  of these methods as needed for your own specific behaviors.\n  \n  Often times instead of adding `SC.Scrollable` to your view, you should\n  place your view inside of an `SC.ScrollView`.  See that class for more\n  info.\n  \n  Note that isScrollable must always be true.",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "verticalPageScroll",
        "displayName": "SC.Scrollable.verticalPageScroll",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Amount to scroll one vertical page.\n    \n    Used by the default implementation of `scrollUpPage()` and `scrollDownPage()`. Defaults to\n    current `innerFrame` height.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "horizontalPageScroll",
        "displayName": "SC.Scrollable.horizontalPageScroll",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Amount to scroll one horizontal page.\n    \n    Used by the default implementation of `scrollLeftPage()` and `scrollRightPage()`.  Defaults\n    to current `innerFrame` width.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "scrollBy",
        "displayName": "SC.Scrollable.scrollBy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver in the horizontal and vertical directions by the \n    amount specified, if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Point",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the actual amount scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Point",
            "name": "amount",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount to scroll.  Must include x, y or both"
          }
        ]
      },
      {
        "name": "scrollTo",
        "displayName": "SC.Scrollable.scrollTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver to the specified x,y coordinate",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Number",
            "name": "y",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "scrollToVisible",
        "displayName": "SC.Scrollable.scrollToVisible",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scroll the view to make the passed frame visible.\n    \n    Frame must be relative to the receiver's `offsetParent`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view you want to make visible"
          }
        ]
      },
      {
        "name": "scrollDownLine",
        "displayName": "SC.Scrollable.scrollDownLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down one line if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines to scroll"
          }
        ]
      },
      {
        "name": "scrollUpLine",
        "displayName": "SC.Scrollable.scrollUpLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down up line if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines to scroll"
          }
        ]
      },
      {
        "name": "scrollRightLine",
        "displayName": "SC.Scrollable.scrollRightLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver right one line if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines to scroll"
          }
        ]
      },
      {
        "name": "scrollLeftLine",
        "displayName": "SC.Scrollable.scrollLeftLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver left one line if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines to scroll"
          }
        ]
      },
      {
        "name": "scrollDownPage",
        "displayName": "SC.Scrollable.scrollDownPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down one page if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of pages to scroll"
          }
        ]
      },
      {
        "name": "scrollUpPage",
        "displayName": "SC.Scrollable.scrollUpPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down up page if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of pages to scroll"
          }
        ]
      },
      {
        "name": "scrollRightPage",
        "displayName": "SC.Scrollable.scrollRightPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver right one page if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of pages to scroll"
          }
        ]
      },
      {
        "name": "scrollLeftPage",
        "displayName": "SC.Scrollable.scrollLeftPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver left one page if allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the amount actually scrolled."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of pages to scroll"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isScrollable",
        "displayName": "SC.Scrollable.isScrollable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scrollable",
        "overview": "Informs the view system that the receiver is scrollable.\n\n    Must always be `true.",
        "defaultValue": "YES",
        "isConstant": true,
        "isPrivate": false
      },
      {
        "name": "verticalLineScroll",
        "displayName": "SC.Scrollable.verticalLineScroll",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scrollable",
        "overview": "Amount to scroll one vertical line.\n  \n    Used by the default implementation of `scrollDownLine()` and `scrollUpLine()`.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalLineScroll",
        "displayName": "SC.Scrollable.horizontalLineScroll",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scrollable",
        "overview": "Amount to scroll one horizontal line.\n  \n    Used by the default implementation of `scrollLeftLine()` and `scrollRightLine()`.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasVerticalScroller",
        "displayName": "SC.Scrollable.hasVerticalScroller",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scrollable",
        "overview": "Returns true if the receiver has enough vertical content to require\n    scrolling.\n    \n    If you do not want to allow vertical scrolling, override this to be false\n    and set the appropriate CSS.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasHorizontalScroller",
        "displayName": "SC.Scrollable.hasHorizontalScroller",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Scrollable",
        "overview": "Returns true if the receiver has enough horizontal content to require\n    scrolling.\n    \n    If you do not want to allow horizontal scrolling, override this to be\n    false and set the appropriate CSS.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 29620,
    "name": "ScrollerView",
    "displayName": "SC.ScrollerView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/scroller.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Displays a horizontal or vertical scroller.  You will not usually need to\n  work with scroller views directly, but you may override this class to\n  implement your own custom scrollers.\n\n  Because the scroller uses the dimensions of its constituent elements to\n  calculate layout, you may need to override the default display metrics.\n\n  You can either create a subclass of ScrollerView with the new values, or\n  provide your own in your theme:\n\n      SC.mixin(SC.ScrollerView.prototype, {\n        scrollbarThickness: 14,\n        capLength: 18,\n        capOverlap: 14,\n        buttonOverlap: 11,\n        buttonLength: 41\n      });\n\n  You can change whether scroll buttons are displayed by setting the\n  hasButtons property.",
    "methods": [
      {
        "name": "displayValue",
        "displayName": "SC.ScrollerView#displayValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ScrollerView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "",
        "defaultValue": "['sc-scroller-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.ScrollerView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "",
        "defaultValue": "'thumbPosition thumbLength isEnabled controlsHidden'.w()",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.ScrollerView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The WAI-ARIA role for scroller view.",
        "defaultValue": "'scrollbar'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldScrollToClick",
        "displayName": "SC.ScrollerView#shouldScrollToClick",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "If YES, a click on the track will cause the scrollbar to scroll to that position.\n    Otherwise, a click on the track will cause a page down.\n    \n    In either case, alt-clicks will perform the opposite behavior.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.ScrollerView#value",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The value of the scroller.\n\n    The value represents the position of the scroller's thumb.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "proportion",
        "displayName": "SC.ScrollerView#proportion",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The portion of the track that the thumb should fill. Usually the\n    proportion will be the ratio of the size of the scroll view's content view\n    to the size of the scroll view.\n\n    Should be specified as a value between 0.0 (minimal size) and 1.0 (fills\n    the slot). Note that if the proportion is 1.0 then the control will be\n    disabled.",
        "defaultValue": "0.0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximum",
        "displayName": "SC.ScrollerView#maximum",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The maximum offset value for the scroller.  This will be used to calculate\n    the internal height/width of the scroller itself.\n\n    When set less than the height of the scroller, the scroller is disabled.",
        "defaultValue": "100",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimum",
        "displayName": "SC.ScrollerView#minimum",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The minimum offset value for the scroller.  This will be used to calculate\n    the internal height/width of the scroller itself.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.ScrollerView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "YES to enable scrollbar, NO to disable it.  Scrollbars will automatically\n    disable if the maximum scroll width does not exceed their capacity.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.ScrollerView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "Determine the layout direction.  Determines whether the scrollbar should\n    appear horizontal or vertical.  This must be set when the view is created.\n    Changing this once the view has been created will have no effect. Possible\n    values:\n    \n      - SC.LAYOUT_VERTICAL\n      - SC.LAYOUT_HORIZONTAL",
        "defaultValue": "SC.LAYOUT_VERTICAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasButtons",
        "displayName": "SC.ScrollerView#hasButtons",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "Whether or not the scroller should display scroll buttons",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scrollbarThickness",
        "displayName": "SC.ScrollerView#scrollbarThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The width (if vertical scroller) or height (if horizontal scroller) of the \n    scrollbar.",
        "defaultValue": "14",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "capLength",
        "displayName": "SC.ScrollerView#capLength",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The width or height of the cap that encloses the track.",
        "defaultValue": "18",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "capOverlap",
        "displayName": "SC.ScrollerView#capOverlap",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The amount by which the thumb overlaps the cap.",
        "defaultValue": "14",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonLength",
        "displayName": "SC.ScrollerView#buttonLength",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The width or height of the up/down or left/right arrow buttons. If the\n    scroller is not displaying arrows, this is the width or height of the end\n    cap.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonOverlap",
        "displayName": "SC.ScrollerView#buttonOverlap",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The amount by which the thumb overlaps the arrow buttons. If the scroller\n    is not displaying arrows, this is the amount by which the thumb overlaps\n    the end cap.",
        "defaultValue": "11",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumThumbLength",
        "displayName": "SC.ScrollerView#minimumThumbLength",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollerView",
        "overview": "The minimium length that the thumb will be, regardless of how much content\n    is in the scroll view.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 29152,
    "name": "ScrollView",
    "displayName": "SC.ScrollView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/scroll.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Implements a complete scroll view.  This class uses a manual implementation\n  of scrollers in order to properly support clipping frames.\n  \n  Important Events:\n  \n    - contentView frame size changes (to autoshow/hide scrollbar - adjust scrollbar size)\n    - horizontalScrollOffset change\n    - verticalScrollOffsetChanges\n    - scroll wheel events",
    "methods": [
      {
        "name": "scrollTo",
        "displayName": "SC.ScrollView#scrollTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver to the specified x,y coordinate.  This should be the\n    offset into the contentView you want to appear at the top-left corner of\n    the scroll view.\n    \n    This method will contrain the actual scroll based on whether the view\n    can scroll in the named direction and the maximum distance it can\n    scroll.\n    \n    If you only want to scroll in one direction, pass null for the other \n    direction.  You can also optionally pass a Hash for the first parameter \n    with x and y coordinates.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the x scroll location"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "y",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the y scroll location"
          }
        ]
      },
      {
        "name": "scrollBy",
        "displayName": "SC.ScrollView#scrollBy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver in the horizontal and vertical directions by the \n    amount specified, if allowed.  The actual scroll amount will be \n    constrained by the current scroll view settings.\n    \n    If you only want to scroll in one direction, pass null or 0 for the other \n    direction.  You can also optionally pass a Hash for the first parameter \n    with x and y coordinates.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "x",
            "isOptional": false,
            "defaultValue": "",
            "desc": "change in the x direction (or hash)"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "y",
            "isOptional": false,
            "defaultValue": "",
            "desc": "change in the y direction"
          }
        ]
      },
      {
        "name": "scrollToVisible",
        "displayName": "SC.ScrollView#scrollToVisible",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scroll the view to make the view's frame visible.  For this to make sense,\n    the view should be a subview of the contentView.  Otherwise the results\n    will be undefined.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if scroll position was changed"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "view to scroll or null to scroll receiver visible"
          }
        ]
      },
      {
        "name": "scrollToRect",
        "displayName": "SC.ScrollView#scrollToRect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scroll to the supplied rectangle.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if scroll position was changed."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "rect",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Rectangle to scroll to."
          }
        ]
      },
      {
        "name": "scrollDownLine",
        "displayName": "SC.ScrollView#scrollDownLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down one or more lines if allowed.  If number of\n    lines is not specified, scrolls one line.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollUpLine",
        "displayName": "SC.ScrollView#scrollUpLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver up one or more lines if allowed.  If number of\n    lines is not specified, scrolls one line.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollRightLine",
        "displayName": "SC.ScrollView#scrollRightLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver right one or more lines if allowed.  If number of\n    lines is not specified, scrolls one line.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollLeftLine",
        "displayName": "SC.ScrollView#scrollLeftLine",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver left one or more lines if allowed.  If number of\n    lines is not specified, scrolls one line.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "lines",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollDownPage",
        "displayName": "SC.ScrollView#scrollDownPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver down one or more page if allowed.  If number of\n    pages is not specified, scrolls one page.  The page size is determined by\n    the verticalPageScroll value.  By default this is the size of the current\n    scrollable area.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollUpPage",
        "displayName": "SC.ScrollView#scrollUpPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver up one or more page if allowed.  If number of\n    pages is not specified, scrolls one page.  The page size is determined by\n    the verticalPageScroll value.  By default this is the size of the current\n    scrollable area.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollRightPage",
        "displayName": "SC.ScrollView#scrollRightPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver right one or more page if allowed.  If number of\n    pages is not specified, scrolls one page.  The page size is determined by\n    the verticalPageScroll value.  By default this is the size of the current\n    scrollable area.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      },
      {
        "name": "scrollLeftPage",
        "displayName": "SC.ScrollView#scrollLeftPage",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Scrolls the receiver left one or more page if allowed.  If number of\n    pages is not specified, scrolls one page.  The page size is determined by\n    the verticalPageScroll value.  By default this is the size of the current\n    scrollable area.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ScrollView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "pages",
            "isOptional": false,
            "defaultValue": "",
            "desc": "number of lines"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ScrollView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "",
        "defaultValue": "['sc-scroll-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isScrollable",
        "displayName": "SC.ScrollView#isScrollable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Walk like a duck",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentView",
        "displayName": "SC.ScrollView#contentView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The content view you want the scroll view to manage. This will be assigned to the contentView of the clipView also.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalAlign",
        "displayName": "SC.ScrollView#horizontalAlign",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The horizontal alignment for non-filling content inside of the ScrollView. Possible values:\n    \n      - SC.ALIGN_LEFT\n      - SC.ALIGN_RIGHT\n      - SC.ALIGN_CENTER",
        "defaultValue": "SC.ALIGN_LEFT",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalAlign",
        "displayName": "SC.ScrollView#verticalAlign",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The vertical alignment for non-filling content inside of the ScrollView. Possible values:\n    \n      - SC.ALIGN_TOP\n      - SC.ALIGN_BOTTOM\n      - SC.ALIGN_MIDDLE",
        "defaultValue": "SC.ALIGN_TOP",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalScrollOffset",
        "displayName": "SC.ScrollView#horizontalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The current horizontal scroll offset. Changing this value will update both the contentView and the horizontal scroller, if there is one.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollOffset",
        "displayName": "SC.ScrollView#verticalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The current vertical scroll offset.  Changing this value will update both the contentView and the vertical scroller, if there is one.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximumHorizontalScrollOffset",
        "displayName": "SC.ScrollView#maximumHorizontalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The maximum horizontal scroll offset allowed given the current contentView \n    size and the size of the scroll view.  If horizontal scrolling is \n    disabled, this will always return 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximumVerticalScrollOffset",
        "displayName": "SC.ScrollView#maximumVerticalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The maximum vertical scroll offset allowed given the current contentView \n    size and the size of the scroll view.  If vertical scrolling is disabled,\n    this will always return 0 (or whatever alignment dictates).",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumHorizontalScrollOffset",
        "displayName": "SC.ScrollView#minimumHorizontalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The minimum horizontal scroll offset allowed given the current contentView \n    size and the size of the scroll view.  If horizontal scrolling is \n    disabled, this will always return 0 (or whatever alignment dictates).",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumVerticalScrollOffset",
        "displayName": "SC.ScrollView#minimumVerticalScrollOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The minimum vertical scroll offset allowed given the current contentView \n    size and the size of the scroll view.  If vertical scrolling is disabled,\n    this will always return 0 (or whatever alignment dictates).",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalLineScroll",
        "displayName": "SC.ScrollView#verticalLineScroll",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Amount to scroll one vertical line.\n  \n    Used by the default implementation of scrollDownLine() and scrollUpLine().",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalLineScroll",
        "displayName": "SC.ScrollView#horizontalLineScroll",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Amount to scroll one horizontal line.\n  \n    Used by the default implementation of scrollLeftLine() and \n    scrollRightLine().",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalPageScroll",
        "displayName": "SC.ScrollView#verticalPageScroll",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Amount to scroll one vertical page.\n    \n    Used by the default implementation of scrollUpPage() and scrollDownPage().",
        "defaultValue": "value of frame.height",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalPageScroll",
        "displayName": "SC.ScrollView#horizontalPageScroll",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Amount to scroll one horizontal page.\n    \n    Used by the default implementation of scrollLeftPage() and \n    scrollRightPage().",
        "defaultValue": "value of frame.width",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasHorizontalScroller",
        "displayName": "SC.ScrollView#hasHorizontalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "YES if the view should maintain a horizontal scroller.   This property \n    must be set when the view is created.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalScrollerView",
        "displayName": "SC.ScrollView#horizontalScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The horizontal scroller view class. This will be replaced with a view \n    instance when the ScrollView is created unless hasHorizontalScroller is \n    NO.",
        "defaultValue": "SC.ScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalTouchScrollerView",
        "displayName": "SC.ScrollView#horizontalTouchScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The horizontal scroller view for touch. This will be replaced with a view\n    instance when touch is enabled when the ScrollView is created unless \n    hasHorizontalScroller is NO.",
        "defaultValue": "SC.TouchScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isHorizontalScrollerVisible",
        "displayName": "SC.ScrollView#isHorizontalScrollerVisible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "YES if the horizontal scroller should be visible.  You can change this \n    property value anytime to show or hide the horizontal scroller.  If you \n    do not want to use a horizontal scroller at all, you should instead set \n    hasHorizontalScroller to NO to avoid creating a scroller view in the \n    first place.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canScrollHorizontal",
        "displayName": "SC.ScrollView#canScrollHorizontal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Returns YES if the view both has a horizontal scroller, the scroller is\n    visible.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autohidesHorizontalScroller",
        "displayName": "SC.ScrollView#autohidesHorizontalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "If YES, the horizontal scroller will autohide if the contentView is\n    smaller than the visible area.  You must set hasHorizontalScroller to YES \n    for this property to have any effect.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasVerticalScroller",
        "displayName": "SC.ScrollView#hasVerticalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "YES if the view shuld maintain a vertical scroller.   This property must \n    be set when the view is created.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollerView",
        "displayName": "SC.ScrollView#verticalScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The vertical scroller view class. This will be replaced with a view \n    instance when the ScrollView is created unless hasVerticalScroller is NO.",
        "defaultValue": "SC.ScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalTouchScrollerView",
        "displayName": "SC.ScrollView#verticalTouchScrollerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The vertical touch scroller view class. This will be replaced with a view\n    instance when the ScrollView is created.",
        "defaultValue": "SC.TouchScrollerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isVerticalScrollerVisible",
        "displayName": "SC.ScrollView#isVerticalScrollerVisible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "YES if the vertical scroller should be visible.  You can change this \n    property value anytime to show or hide the vertical scroller.  If you do \n    not want to use a vertical scroller at all, you should instead set \n    hasVerticalScroller to NO to avoid creating a scroller view in the first \n    place.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canScrollVertical",
        "displayName": "SC.ScrollView#canScrollVertical",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Returns YES if the view both has a horizontal scroller, the scroller is\n    visible.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autohidesVerticalScroller",
        "displayName": "SC.ScrollView#autohidesVerticalScroller",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "If YES, the vertical scroller will autohide if the contentView is\n    smaller than the visible area.  You must set hasVerticalScroller to YES \n    for this property to have any effect.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollerBottom",
        "displayName": "SC.ScrollView#verticalScrollerBottom",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Use this property to set the 'bottom' offset of your vertical scroller, \n    to make room for a thumb view or other accessory view. Default is 0.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalOverlay",
        "displayName": "SC.ScrollView#verticalOverlay",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Use this to overlay the vertical scroller.\n    \n    This ensures that the container frame will not resize to accomodate the\n    vertical scroller, hence overlaying the scroller on top of \n    the container.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalOverlay",
        "displayName": "SC.ScrollView#horizontalOverlay",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Use this to overlay the horizontal scroller.\n    \n    This ensures that the container frame will not resize to accomodate the\n    horizontal scroller, hence overlaying the scroller on top of \n    the container",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "verticalScrollerLayout",
        "displayName": "SC.ScrollView#verticalScrollerLayout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Use to control the positioning of the vertical scroller.  If you do not\n    set 'verticalOverlay' to YES, then the content view will be automatically\n    sized to meet the left edge of the vertical scroller, wherever it may be.\n    This allows you to easily, for example, have âone pixel higher and one\n    pixel lowerâ scroll bars that blend into their parent views.\n    \n    If you do set 'verticalOverlay' to YES, then the scroller view will\n    âfloat on topâ of the content view.\n    \n    Example: { top: -1, bottom: -1, right: 0 }",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "horizontalScrollerLayout",
        "displayName": "SC.ScrollView#horizontalScrollerLayout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Use to control the positioning of the horizontal scroller.  If you do not\n    set 'horizontalOverlay' to YES, then the content view will be\n    automatically sized to meet the top edge of the horizontal scroller,\n    wherever it may be.\n    \n    If you do set 'horizontalOverlay' to YES, then the scroller view will\n    âfloat on topâ of the content view.\n    \n    Example: { left: 0, bottom: 0, right: 0 }",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "containerView",
        "displayName": "SC.ScrollView#containerView",
        "objectType": "property",
        "propertyType": "SC.ContainerView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The container view that will contain your main content view.  You can \n    replace this property with your own custom subclass if you prefer.",
        "defaultValue": "SC.ConainerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canScale",
        "displayName": "SC.ScrollView#canScale",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Determines whether scaling is allowed.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scale",
        "displayName": "SC.ScrollView#scale",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "",
        "defaultValue": "1.0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumScale",
        "displayName": "SC.ScrollView#minimumScale",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The minimum scale.",
        "defaultValue": "0.25",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximumScale",
        "displayName": "SC.ScrollView#maximumScale",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The maximum scale.",
        "defaultValue": "2.0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoScaleRange",
        "displayName": "SC.ScrollView#autoScaleRange",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Whether to automatically determine the scale range based on the size of the content.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMultitouch",
        "displayName": "SC.ScrollView#acceptsMultitouch",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "decelerationRate",
        "displayName": "SC.ScrollView#decelerationRate",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "The scroll deceleration rate.",
        "defaultValue": "SC.NORMAL_SCROLL_DECELERATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "alwaysBounceHorizontal",
        "displayName": "SC.ScrollView#alwaysBounceHorizontal",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "If YES, bouncing will always be enabled in the horizontal direction, even if the content\n    is smaller or the same size as the view.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "alwaysBounceVertical",
        "displayName": "SC.ScrollView#alwaysBounceVertical",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "If NO, bouncing will not be enabled in the vertical direction when the content is smaller\n    or the same size as the scroll view.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "delaysContentTouches",
        "displayName": "SC.ScrollView#delaysContentTouches",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ScrollView",
        "overview": "Whether to delay touches from passing through to the content.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 29879,
    "name": "SegmentedView",
    "displayName": "SC.SegmentedView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/segmented.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "SegmentedView is a special type of button that can display multiple\n  segments.  Each segment has a value assigned to it.  When the user clicks\n  on the segment, the value of that segment will become the new value of\n  the control.\n\n  You can also optionally configure a target/action that will fire whenever\n  the user clicks on an item.  This will give your code an opportunity to take\n  some action depending on the new value.  (of course, you can always bind to\n  the value as well, which is generally the preferred approach.)\n\n  # Defining Your Segments\n\n  You define your segments by providing a items array, much like you provide\n  to a RadioView.  Your items array can be as simple as an array of strings\n  or as complex as full model objects.  Based on how you configure your\n  itemKey properties, the segmented view will read the properties it needs\n  from the array and construct the button.\n\n  You can define the following properties on objects you pass in:\n\n    - *itemTitleKey* - the title of the button\n    - *itemValueKey* - the value of the button\n    - *itemWidthKey* - the preferred width. if omitted, it autodetects\n    - *itemIconKey*  - an icon\n    - *itemActionKey* - an optional action to fire when pressed\n    - *itemTargetKey* - an optional target for the action\n    - *itemLayerIdKey* - an optional target for the action \n    - *segmentViewClass* - class to be used for creating segments",
    "methods": [],
    "properties": [
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.SegmentedView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.SegmentedView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "'tablist'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.SegmentedView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "['sc-segmented-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "theme",
        "displayName": "SC.SegmentedView#theme",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.ButtonView#theme"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "'square'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.SegmentedView#value",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The value of the segmented view.\n\n    The SegmentedView's value will always be the value of the currently\n    selected button.  Setting this value will change the selected button.\n    If you set this value to something that has no matching button, then\n    no buttons will be selected.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.SegmentedView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsEmptySelection",
        "displayName": "SC.SegmentedView#allowsEmptySelection",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "If YES, clicking a selected button again will deselect it, setting the\n    segmented views value to null.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsMultipleSelection",
        "displayName": "SC.SegmentedView#allowsMultipleSelection",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "If YES, then clicking on a tab will not deselect the other segments, it\n    will simply add or remove it from the selection.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selectSegmentWhenTriggeringAction",
        "displayName": "SC.SegmentedView#selectSegmentWhenTriggeringAction",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "If YES, it will set the segment value even if an action is defined.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.SegmentedView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "align",
        "displayName": "SC.SegmentedView#align",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "Aligns the segments of the segmented view within its frame horizontally.\n    Possible values:\n    \n      - SC.ALIGN_LEFT\n      - SC.ALIGN_RIGHT\n      - SC.ALIGN_CENTER",
        "defaultValue": "SC.ALIGN_CENTER",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.SegmentedView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "Change the layout direction to make this a vertical set of tabs instead\n    of horizontal ones. Possible values:\n    \n      - SC.LAYOUT_HORIZONTAL\n      - SC.LAYOUT_VERTICAL",
        "defaultValue": "SC.LAYOUT_HORIZONTAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "items",
        "displayName": "SC.SegmentedView#items",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The array of items to display.  This may be a simple array of strings, objects\n    or SC.Objects.  If you pass objects or SC.Objects, you must also set the\n    various itemKey properties to tell the SegmentedView how to extract the\n    information it needs.\n\n    Note: only SC.Object items support key-value coding and therefore may be\n    observed by the view for changes to titles, values, icons, widths,\n    isEnabled values & tooltips.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTitleKey",
        "displayName": "SC.SegmentedView#itemTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the title for each item.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemValueKey",
        "displayName": "SC.SegmentedView#itemValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the value for each item.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIsEnabledKey",
        "displayName": "SC.SegmentedView#itemIsEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "A key that determines if this item in particular is enabled.  Note if the\n    control in general is not enabled, no items will be enabled, even if the\n    item's enabled property returns YES.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIconKey",
        "displayName": "SC.SegmentedView#itemIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the icon for each item.  If omitted, no icons will\n    be displayed.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemWidthKey",
        "displayName": "SC.SegmentedView#itemWidthKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the desired width for each item.  If omitted, the\n    width will autosize.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemActionKey",
        "displayName": "SC.SegmentedView#itemActionKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the action for this item.  If defined, then\n    selecting this item will fire the action in addition to changing the\n    value.  See also itemTargetKey.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTargetKey",
        "displayName": "SC.SegmentedView#itemTargetKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the target for this item.  If this and itemActionKey\n    are defined, then this will be the target of the action fired.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemLayerIdKey",
        "displayName": "SC.SegmentedView#itemLayerIdKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the layerId for each item.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemKeyEquivalentKey",
        "displayName": "SC.SegmentedView#itemKeyEquivalentKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The key that contains the key equivalent for each item.  If defined then\n    pressing that key equivalent will be like selecting the tab.  Also,\n    pressing the Alt or Option key for 3 seconds will display the key\n    equivalent in the tab.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "overflowTitle",
        "displayName": "SC.SegmentedView#overflowTitle",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The title to use for the overflow segment if it appears.",
        "defaultValue": "'&raquo;'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "overflowToolTip",
        "displayName": "SC.SegmentedView#overflowToolTip",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The toolTip to use for the overflow segment if it appears.",
        "defaultValue": "'More&hellip;'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "overflowIcon",
        "displayName": "SC.SegmentedView#overflowIcon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The icon to use for the overflow segment if it appears.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "segmentViewClass",
        "displayName": "SC.SegmentedView#segmentViewClass",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "The view class used when creating segments.",
        "defaultValue": "SC.SegmentView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.SegmentedView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "['align']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.SegmentedView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentedView",
        "overview": "",
        "defaultValue": "'segmentedRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 29847,
    "name": "SegmentView",
    "displayName": "SC.SegmentView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/segment.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "SegmentViews are the views used and arranged by SC.SegmentedView and are very similar to a SC.ButtonView\n  without any event handling.  The event handling is done by the parent view.",
    "methods": [],
    "properties": [
      {
        "name": "ariaRole",
        "displayName": "SC.SegmentView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "'tab'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.SegmentView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "['sc-segment-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toolTip",
        "displayName": "SC.SegmentView#toolTip",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.View#toolTip"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.SegmentView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.Control#isEnabled"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isActive",
        "displayName": "SC.SegmentView#isActive",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.Control#isActive"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSelected",
        "displayName": "SC.SegmentView#isSelected",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.Control#isSelected"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "controlSize",
        "displayName": "SC.SegmentView#controlSize",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.Control#controlSize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportFocusRing",
        "displayName": "SC.SegmentView#supportFocusRing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.ButtonView#supportFocusRing"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.SegmentView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "'segmentRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useStaticLayout",
        "displayName": "SC.SegmentView#useStaticLayout",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "title",
        "displayName": "SC.SegmentView#title",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.SegmentView#value",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.SegmentView#icon",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.SegmentView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "keyEquivalent",
        "displayName": "SC.SegmentView#keyEquivalent",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "escapeHTML",
        "displayName": "SC.SegmentView#escapeHTML",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsEllipsis",
        "displayName": "SC.SegmentView#needsEllipsis",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayTitle",
        "displayName": "SC.SegmentView#displayTitle",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "Localized title.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "width",
        "displayName": "SC.SegmentView#width",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localItem",
        "displayName": "SC.SegmentView#localItem",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SegmentView",
        "overview": "The item represented by this view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30309,
    "name": "SelectButtonView",
    "displayName": "SC.SelectButtonView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/select_button.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Mohammed Ashik",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "SelectButtonView has a functionality similar to that of `SelectField`\n\n  Clicking the SelectButtonView button displays a menu pane with a\n  list of items. The selected item will be displayed on the button.\n  User has the option of enabling checkbox for the selected menu item.",
    "methods": [
      {
        "name": "sortObjects",
        "displayName": "SC.SelectButtonView#sortObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "override this method to implement your own sorting of the menu. By\n    default, menu items are sorted using the value shown or the `sortKey`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "sorted array of objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the unsorted array of objects to display."
          }
        ]
      },
      {
        "name": "displaySelectedItem",
        "displayName": "SC.SelectButtonView#displaySelectedItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Action method for the select button menu items",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "menuView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "changeSelectButtonPreferMatrix",
        "displayName": "SC.SelectButtonView#changeSelectButtonPreferMatrix",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the \"top\" attribute in the prefer matrix property which will\n     position menu such that the selected item in the menu will be\n     place aligned to the item on the button when menu is opened.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "escapeHTML",
        "displayName": "SC.SelectButtonView#escapeHTML",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "objects",
        "displayName": "SC.SelectButtonView#objects",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "An array of items that will be form the menu you want to show.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nameKey",
        "displayName": "SC.SelectButtonView#nameKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "If you set this to a non-null value, then the name shown for each\n    menu item will be pulled from the object using the named property.\n    if this is `null`, the collection objects themselves will be used.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sortKey",
        "displayName": "SC.SelectButtonView#sortKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "If you set this to a non-null value, then the value of this key will\n    be used to sort the objects.  If this is not set, then `nameKey` will\n    be used.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "valueKey",
        "displayName": "SC.SelectButtonView#valueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Set this to a non-null value to use a key from the passed set of objects\n     as the value for the options popup.  If you don't set this, then the\n     objects themselves will be used as the value.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "iconKey",
        "displayName": "SC.SelectButtonView#iconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Key used to extract icons from the objects array",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabledKey",
        "displayName": "SC.SelectButtonView#isEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Key used to indicate if the item is to be enabled",
        "defaultValue": "\"isEnabled\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.SelectButtonView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "If true, the empty name will be localized.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "disableSort",
        "displayName": "SC.SelectButtonView#disableSort",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "if true, it means that no sorting will occur, objects will appear\n    in the same order as in the array",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.SelectButtonView#classNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "['select-button']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menu",
        "displayName": "SC.SelectButtonView#menu",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Menu attached to the `selectButton`",
        "defaultValue": "SC.MenuView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemList",
        "displayName": "SC.SelectButtonView#itemList",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Menu item list",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIdx",
        "displayName": "SC.SelectButtonView#itemIdx",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Property to set the index of the selected menu item. This in turn\n    is used to calculate the `preferMatrix`.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.SelectButtonView#value",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Current Value of the selectButton",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "checkboxEnabled",
        "displayName": "SC.SelectButtonView#checkboxEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "if this property is set to `YES`, a checbox is shown next to the\n    selected menu item.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "separatorPosition",
        "displayName": "SC.SelectButtonView#separatorPosition",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Set this property to required display positon of separator from bottom",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "theme",
        "displayName": "SC.SelectButtonView#theme",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "'popup'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.SelectButtonView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Render method gets triggered when these properties change",
        "defaultValue": "['icon', 'value','controlSize','objects', 'objects.[]']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "preferMatrix",
        "displayName": "SC.SelectButtonView#preferMatrix",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Prefer matrix to position the select button menu such that the\n    selected item for the menu item will appear aligned to the\n    the button. The value at the second `index(0)` changes based on the\n    `postion(index)` of the menu item in the menu pane.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SELECT_BUTTON_SPRITE_WIDTH",
        "displayName": "SC.SelectButtonView#SELECT_BUTTON_SPRITE_WIDTH",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "Width of the sprite image that gets applied due to the theme.\n    This has to be accounted for while calculating the actual\n    width of the button",
        "defaultValue": "28",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "customView",
        "displayName": "SC.SelectButtonView#customView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "customView used to draw the menu",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "customViewClassName",
        "displayName": "SC.SelectButtonView#customViewClassName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "CSS classes applied to customView",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "customViewMenuOffsetWidth",
        "displayName": "SC.SelectButtonView#customViewMenuOffsetWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "customView menu offset width",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsEllipsis",
        "displayName": "SC.SelectButtonView#needsEllipsis",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuPaneHeightPadding",
        "displayName": "SC.SelectButtonView#menuPaneHeightPadding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "This property allows you at add extra padding to the height\n    of the menu pane.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportFocusRing",
        "displayName": "SC.SelectButtonView#supportFocusRing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "This is a property to enable/disable focus rings in buttons.\n    For `select_button` we are making it a default.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.SelectButtonView#isContextMenuEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_OFFSET_X",
        "displayName": "SC.SelectButtonView.TINY_OFFSET_X",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_OFFSET_Y",
        "displayName": "SC.SelectButtonView.TINY_OFFSET_Y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.TINY_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_OFFSET_X",
        "displayName": "SC.SelectButtonView.SMALL_OFFSET_X",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "-18",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_OFFSET_Y",
        "displayName": "SC.SelectButtonView.SMALL_OFFSET_Y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.SMALL_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "7",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_OFFSET_X",
        "displayName": "SC.SelectButtonView.REGULAR_OFFSET_X",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "-17",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_OFFSET_Y",
        "displayName": "SC.SelectButtonView.REGULAR_OFFSET_Y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.REGULAR_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "4",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_OFFSET_X",
        "displayName": "SC.SelectButtonView.LARGE_OFFSET_X",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "-17",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_OFFSET_Y",
        "displayName": "SC.SelectButtonView.LARGE_OFFSET_Y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "6",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.LARGE_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_OFFSET_X",
        "displayName": "SC.SelectButtonView.HUGE_OFFSET_X",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_OFFSET_Y",
        "displayName": "SC.SelectButtonView.HUGE_OFFSET_Y",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.HUGE_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectButtonView.MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectButtonView",
        "overview": "",
        "defaultValue": "-2",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30555,
    "name": "SelectFieldView",
    "displayName": "SC.SelectFieldView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/select_field.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley, Mike Ball",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.FieldView"
      }
    ],
    "overview": "SelectFieldView displays browser-native popup menu.  To use this view,\n  you should either bake into the HTML the preset list of options, or \n  you can set the -objects property to an array of items to show.  The\n  value is current value of the select.",
    "methods": [
      {
        "name": "validateMenuItem",
        "displayName": "SC.SelectFieldView#validateMenuItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "override this to change the enabled/disabled state of menu items as they\n    are built.  Return false if you want the menu item to be disabled.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the item should be enabled, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "itemValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value for the item to validate"
          },
          {
            "title": "param",
            "type": "",
            "name": "itemName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the name of the menu item to validate"
          }
        ]
      },
      {
        "name": "sortObjects",
        "displayName": "SC.SelectFieldView#sortObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "override this method to implement your own sorting of the menu. By\n    default, menu items are sorted using the value shown or the sortKey",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "sorted array of objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the unsorted array of objects to display."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "displayProperties",
        "displayName": "SC.SelectFieldView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "",
        "defaultValue": "['objects','nameKey','valueKey','isEnabled']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.SelectFieldView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "Reflects the value of `isEnabled`.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tagName",
        "displayName": "SC.SelectFieldView#tagName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.View#tagName"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "",
        "defaultValue": "'select'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.SelectFieldView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "",
        "defaultValue": "['sc-select-field-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "objects",
        "displayName": "SC.SelectFieldView#objects",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "An array of items that will form the menu you want to show.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nameKey",
        "displayName": "SC.SelectFieldView#nameKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "If you set this to a non-null value, then the name shown for each \n    menu item will be pulled from the object using the named property.\n    if this is null, the collection objects themselves will be used.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sortKey",
        "displayName": "SC.SelectFieldView#sortKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "If you set this to a non-null value, then the value of this key will\n    be used to sort the objects.  If this is not set, then nameKey will\n    be used.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "valueKey",
        "displayName": "SC.SelectFieldView#valueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "Set this to a non-null value to use a key from the passed set of objects\n     as the value for the options popup.  If you don't set this, then the\n     objects themselves will be used as the value.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "emptyName",
        "displayName": "SC.SelectFieldView#emptyName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "set this to non-null to place an empty option at the top of the menu.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.SelectFieldView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "if true, the empty name will be localized.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "disableSort",
        "displayName": "SC.SelectFieldView#disableSort",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectFieldView",
        "overview": "if true, it means that no sorting will occur, objects will appear \n    in the same order as in the array",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 7731,
    "name": "SelectionSet",
    "displayName": "SC.SelectionSet",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/selection_set.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      }
    ],
    "overview": "A SelectionSet contains a set of objects that represent the current\n  selection.  You can select objects by either adding them to the set directly\n  or indirectly by selecting a range of indexes on a source object.",
    "methods": [
      {
        "name": "length",
        "displayName": "SC.SelectionSet#length",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Total number of indexes in the selection set",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sources",
        "displayName": "SC.SelectionSet#sources",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A set of all the source objects used in the selection set.  This\n    property changes automatically as you add or remove index sets.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "indexSetForSource",
        "displayName": "SC.SelectionSet#indexSetForSource",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the index set for the passed source object or null if no items are\n    seleted in the source.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index set or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source object"
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.SelectionSet#add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add the passed index, range of indexSet belonging to the passed source\n    object to the selection set.\n\n    The first parameter you pass must be the source array you are selecting\n    from.  The following parameters may be one of a start/length pair, a\n    single index, a range object or an IndexSet.  If some or all of the range\n    you are selecting is already in the set, it will not be selected again.\n\n    You can also pass an SC.SelectionSet to this method and all the selected\n    sets will be added from their instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "source object or object to add."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, start of range, range or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "length if passing start/length pair."
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.SelectionSet#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the passed index, range of indexSet belonging to the passed source\n    object from the selection set.\n\n    The first parameter you pass must be the source array you are selecting\n    from.  The following parameters may be one of a start/length pair, a\n    single index, a range object or an IndexSet.  If some or all of the range\n    you are selecting is already in the set, it will not be selected again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "source object. must not be null"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, start of range, range or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "length if passing start/length pair."
          }
        ]
      },
      {
        "name": "contains",
        "displayName": "SC.SelectionSet#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the selection contains the named index, range of indexes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "source object for range"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, start of range, range object, or indexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "intersects",
        "displayName": "SC.SelectionSet#intersects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the index set contains any of the passed indexes.  You\n    can pass a single index, a range or an index set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "source object for range"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "index, range, or IndexSet"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional range length"
          }
        ]
      },
      {
        "name": "addObject",
        "displayName": "SC.SelectionSet#addObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the object to the selection set.  Unlike adding an index set, the\n    selection will actually track the object independent of its location in\n    the array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "addObjects",
        "displayName": "SC.SelectionSet#addObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds objects in the passed enumerable to the selection set.  Unlike adding\n    an index set, the seleciton will actually track the object independent of\n    its location the array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "removeObject",
        "displayName": "SC.SelectionSet#removeObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the object from the selection set.  Note that if the selection\n    set also selects a range of indexes that includes this object, it may\n    still be in the selection set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "removeObjects",
        "displayName": "SC.SelectionSet#removeObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the objects from the selection set.  Note that if the selection\n    set also selects a range of indexes that includes this object, it may\n    still be in the selection set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "containsObject",
        "displayName": "SC.SelectionSet#containsObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the selection contains the passed object.  This will search\n    selected ranges in all source objects.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to search for"
          }
        ]
      },
      {
        "name": "constrain",
        "displayName": "SC.SelectionSet#constrain",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Constrains the selection set to only objects found in the passed source\n    object.  This will remove any indexes selected in other sources, any\n    indexes beyond the length of the content, and any objects not found in the\n    set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "source",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source to limit"
          }
        ]
      },
      {
        "name": "isEqual",
        "displayName": "SC.SelectionSet#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed index set or selection set contains the exact\n    same source objects and indexes as  the receiver.  If you pass any object\n    other than an IndexSet or SelectionSet, returns NO.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "another object."
          }
        ]
      },
      {
        "name": "clear",
        "displayName": "SC.SelectionSet#clear",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clears the set.  Removes all IndexSets from the object",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "copy",
        "displayName": "SC.SelectionSet#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clones the set into a new set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "forEach",
        "displayName": "SC.SelectionSet#forEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Iterates over the selection, invoking your callback with each __object__.\n    This will actually find the object referenced by each index in the\n    selection, not just the index.\n\n    The callback must have the following signature:\n\n        function callback(object, index, source, indexSet) { ... }\n\n    If you pass a target, it will be used when the callback is called.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SelectionSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function to invoke."
          },
          {
            "title": "param",
            "type": "Object",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional content. otherwise uses window"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isSelectionSet",
        "displayName": "SC.SelectionSet#isSelectionSet",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSet",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "EMPTY",
        "displayName": "SC.SelectionSet.EMPTY",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSet",
        "overview": "Default frozen empty selection set",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6078,
    "name": "SelectionSupport",
    "displayName": "SC.SelectionSupport",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/mixins/selection_support.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Implements common selection management properties for controllers.\n\n  Selection can be managed by any controller in your applications.  This\n  mixin provides some common management features you might want such as\n  disabling selection, or restricting empty or multiple selections.\n\n  To use this mixin, simply add it to any controller you want to manage\n  selection and call updateSelectionAfterContentChange()\n  whenever your source content changes.  You can also override the properties\n  defined below to configure how the selection management will treat your\n  content.\n\n  This mixin assumes the arrangedObjects property will return an SC.Array of\n  content you want the selection to reflect.\n\n  Add this mixin to any controller you want to manage selection.  It is\n  already applied to the CollectionController and ArrayController.",
    "methods": [
      {
        "name": "firstSelectableObject",
        "displayName": "SC.SelectionSupport.firstSelectableObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return the first selectable object.  For example, if you\n    have groups or want to otherwise limit the kinds of objects that can be\n    selected.\n\n    the default imeplementation returns firstObject property.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "first selectable object"
          }
        ],
        "params": []
      },
      {
        "name": "selection",
        "displayName": "SC.SelectionSupport.selection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the current selection.  You can make this selection and another\n    controller's selection work in concert by binding them together. You\n    generally have a master selection that relays changes TO all the others.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hasSelection",
        "displayName": "SC.SelectionSupport.hasSelection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "YES if the receiver currently has a non-zero selection.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "selectObjects",
        "displayName": "SC.SelectionSupport.selectObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Selects the passed objects in your content.  If you set \"extend\" to YES,\n    then this will attempt to extend your selection as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "objects to select"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "extend",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally set to YES to extend selection"
          }
        ]
      },
      {
        "name": "selectObject",
        "displayName": "SC.SelectionSupport.selectObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Selects a single passed object in your content.  If you set \"extend\" to\n    YES then this will attempt to extend your selection as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to select"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "extend",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optionally set to YES to extend selection"
          }
        ]
      },
      {
        "name": "deselectObjects",
        "displayName": "SC.SelectionSupport.deselectObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Deselects the passed objects in your content.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "objects to select"
          }
        ]
      },
      {
        "name": "deselectObject",
        "displayName": "SC.SelectionSupport.deselectObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Deselects the passed object in your content.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "single object to select"
          }
        ]
      },
      {
        "name": "updateSelectionAfterContentChange",
        "displayName": "SC.SelectionSupport.updateSelectionAfterContentChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever your source content changes to ensure the\n    selection always remains up-to-date and valid.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "hasSelectionSupport",
        "displayName": "SC.SelectionSupport.hasSelectionSupport",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSupport",
        "overview": "Walk like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsSelection",
        "displayName": "SC.SelectionSupport.allowsSelection",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSupport",
        "overview": "If YES, selection is allowed. Default is YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsMultipleSelection",
        "displayName": "SC.SelectionSupport.allowsMultipleSelection",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSupport",
        "overview": "If YES, multiple selection is allowed. Default is YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsEmptySelection",
        "displayName": "SC.SelectionSupport.allowsEmptySelection",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectionSupport",
        "overview": "If YES, allow empty selection Default is YES.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30115,
    "name": "SelectView",
    "displayName": "SC.SelectView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/select.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Alex Iskander, Mohammed Ashik",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ButtonView"
      }
    ],
    "overview": "SelectView has a functionality similar to that of SelectField\n\n  Clicking the SelectView button displays a menu pane with a\n  list of items. The selected item will be displayed on the button.\n  User has the option of enabling checkbox for the selected menu item.",
    "methods": [
      {
        "name": "sortObjects",
        "displayName": "SC.SelectView#sortObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "override this method to implement your own sorting of the menu. By\n    default, menu items are sorted using the value shown or the sortKey",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "sorted array of objects"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the unsorted array of objects to display."
          }
        ]
      },
      {
        "name": "title",
        "displayName": "SC.SelectView#title",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The title of the button, derived from the selected item.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "minimumMenuWidth",
        "displayName": "SC.SelectView#minimumMenuWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The minimum width for the child menu. For instance, this property can make the\n    menu always cover the entire SelectView--or, alternatively, cover all but the\n    arrows on the side.\n\n    By default, it is calculated by adding the menuMinimumWidthOffset to the view's \n    width. If you are writing a theme and want to change the width so the menu covers\n    a specific part of the select view, change your render delegate's menuMinimumWidthOffset\n    property.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.SelectView#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "items",
        "displayName": "SC.SelectView#items",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "An array of items that will be form the menu you want to show.",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTitleKey",
        "displayName": "SC.SelectView#itemTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "If you set this to a non-null value, then the name shown for each\n    menu item will be pulled from the object using the named property.\n    if this is null, the collection items themselves will be used.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemSortKey",
        "displayName": "SC.SelectView#itemSortKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "If you set this to a non-null value, then the value of this key will\n    be used to sort the items.  If this is not set, then itemTitleKey will\n    be used.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemValueKey",
        "displayName": "SC.SelectView#itemValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Set this to a non-null value to use a key from the passed set of items\n     as the value for the options popup.  If you don't set this, then the\n     items themselves will be used as the value.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIconKey",
        "displayName": "SC.SelectView#itemIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Key used to extract icons from the items array",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemSeparatorKey",
        "displayName": "SC.SelectView#itemSeparatorKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Key to use to identify separators.",
        "defaultValue": "\"separator\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIsEnabledKey",
        "displayName": "SC.SelectView#itemIsEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Key used to indicate if the item is to be enabled.",
        "defaultValue": "\"isEnabled\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localize",
        "displayName": "SC.SelectView#localize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "disableSort",
        "displayName": "SC.SelectView#disableSort",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "if true, it means that no sorting will occur, items will appear\n    in the same order as in the array",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.SelectView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "['sc-select-button']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menu",
        "displayName": "SC.SelectView#menu",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Menu attached to the SelectView.",
        "defaultValue": "SC.MenuView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.SelectView#value",
        "objectType": "property",
        "propertyType": "Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Current Value of the SelectView",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "checkboxEnabled",
        "displayName": "SC.SelectView#checkboxEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "if this property is set to 'YES', a checbox is shown next to the\n    selected menu item.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "showCheckbox",
        "displayName": "SC.SelectView#showCheckbox",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "if this property is set to 'YES', a checbox is shown next to the\n    selected menu item.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "theme",
        "displayName": "SC.SelectView#theme",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "The button theme will be popup",
        "defaultValue": "'popup'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.SelectView#displayProperties",
        "objectType": "property",
        "propertyType": "SC.Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "['icon', 'value','controlSize','items']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "preferMatrix",
        "displayName": "SC.SelectView#preferMatrix",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Prefer matrix to position the select button menu such that the\n    selected item for the menu item will appear aligned to the\n    the button. The value at the second index(0) changes based on the\n    postion(index) of the menu item in the menu pane.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "CUSTOM_MENU_ITEM_HEIGHT",
        "displayName": "SC.SelectView#CUSTOM_MENU_ITEM_HEIGHT",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Property to set the menu item height. This in turn is used for\n    the calculation of prefMatrix.",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isDefaultPosition",
        "displayName": "SC.SelectView#isDefaultPosition",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "If this property is set to 'YES', the menu pane will be positioned\n    below the anchor.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleView",
        "displayName": "SC.SelectView#exampleView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Example view used for menu items.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "customViewMenuOffsetWidth",
        "displayName": "SC.SelectView#customViewMenuOffsetWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "customView menu offset width",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "needsEllipsis",
        "displayName": "SC.SelectView#needsEllipsis",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "This is a property for enabling/disabling ellipsis",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuPaneHeightPadding",
        "displayName": "SC.SelectView#menuPaneHeightPadding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "This property allows you at add extra padding to the height\n    of the menu pane.",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuItemPadding",
        "displayName": "SC.SelectView#menuItemPadding",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "The amount of space to add to the calculated width of the menu item strings to\n    determine the width of the menu pane.",
        "defaultValue": "35",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.SelectView#isContextMenuEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportFocusRing",
        "displayName": "SC.SelectView#supportFocusRing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.ButtonView#supportFocusRing"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "This is a property to enable/disable focus rings in buttons. \n    For select_button, we are making it a default.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_OFFSET_X",
        "displayName": "SC.SelectView.TINY_OFFSET_X",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_OFFSET_Y",
        "displayName": "SC.SelectView.TINY_OFFSET_Y",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "TINY_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.TINY_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_OFFSET_X",
        "displayName": "SC.SelectView.SMALL_OFFSET_X",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "-18",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_OFFSET_Y",
        "displayName": "SC.SelectView.SMALL_OFFSET_Y",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "SMALL_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.SMALL_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "7",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_OFFSET_X",
        "displayName": "SC.SelectView.REGULAR_OFFSET_X",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "-17",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_OFFSET_Y",
        "displayName": "SC.SelectView.REGULAR_OFFSET_Y",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "REGULAR_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.REGULAR_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "4",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_OFFSET_X",
        "displayName": "SC.SelectView.LARGE_OFFSET_X",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "-17",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_OFFSET_Y",
        "displayName": "SC.SelectView.LARGE_OFFSET_Y",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "6",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LARGE_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.LARGE_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "3",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_OFFSET_X",
        "displayName": "SC.SelectView.HUGE_OFFSET_X",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_OFFSET_Y",
        "displayName": "SC.SelectView.HUGE_OFFSET_Y",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "HUGE_POPUP_MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.HUGE_POPUP_MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "MENU_WIDTH_OFFSET",
        "displayName": "SC.SelectView.MENU_WIDTH_OFFSET",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "",
        "defaultValue": "-2",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemsBindingDefault",
        "displayName": "SC.SelectView#itemsBindingDefault",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "Binding default for an array of items",
        "defaultValue": "SC.Binding.multiple()",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "supportsFocusRing",
        "displayName": "SC.SelectView#supportsFocusRing",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "This is a property to enable/disable focus rings in buttons. \n    For SelectView, it is a default.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultTitle",
        "displayName": "SC.SelectView#defaultTitle",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "The title to show when no item is selected.",
        "defaultValue": "\"\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuLeftOffset",
        "displayName": "SC.SelectView#menuLeftOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "The amount by which to offset the menu's left position when displaying it.\n    This can be used to make sure the selected menu item is directly on top of\n    the label in the SelectView.\n\n    By default, this comes from the render delegate's menuLeftOffset property. \n    If you are writing a theme, you should set the value there.",
        "defaultValue": "'menuLeftOffset' from render delegate if present, or 0.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuTopOffset",
        "displayName": "SC.SelectView#menuTopOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "The amount by which to offset the menu's top position when displaying it.\n    This is added to any amount calculated based on the 'top' of a menu item.\n\n    This can be used to make sure the selected menu item's label is directly on\n    top of the SelectView's label.\n\n    By default, this comes from the render delegate's menuTopOffset property.\n    If you are writing a theme, you should set the value there.",
        "defaultValue": "'menuTopOffset' from render delegate if present, or 0.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "menuMinimumWidthOffset",
        "displayName": "SC.SelectView#menuMinimumWidthOffset",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SelectView",
        "overview": "An amount to add to the menu's minimum width. For instance, this could be\n    set to a negative value to let arrows on the side of the SelectView be visible.\n\n    By default, this comes from the render delegate's menuMinimumWidthOffset property.\n    If you are writing a theme, you should set the value there.",
        "defaultValue": "'menuWidthOffset' from render delegate if present, or 0.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30643,
    "name": "SeparatorView",
    "displayName": "SC.SeparatorView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/separator.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Displays a horizontal or vertical separator line.  Simply create one of \r\n  these views and configure the layout direction and layout frame.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.SeparatorView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SeparatorView",
        "overview": "",
        "defaultValue": "['sc-separator-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tagName",
        "displayName": "SC.SeparatorView#tagName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [
          "SC.View#tagName"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SeparatorView",
        "overview": "",
        "defaultValue": "'span'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.SeparatorView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SeparatorView",
        "overview": "Select the direction of the separator line. Possible values:\r\n    \r\n      - SC.LAYOUT_VERTICAL\r\n      - SC.LAYOUT_HORIZONTAL",
        "defaultValue": "SC.LAYOUT_HORIZONTAL",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48522,
    "name": "Set",
    "displayName": "SC.Set",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/set.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Observable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      }
    ],
    "overview": "An unordered collection of objects.\n\n  A Set works a bit like an array except that its items are not ordered.\n  You can create a set to efficiently test for membership for an object. You\n  can also iterate through a set just like an array, even accessing objects\n  by index, however there is no gaurantee as to their order.\n\n  Whether or not property observing is enabled, sets offer very powerful\n  notifications of items being added and removed, through the\n  `#js:addSetObserver` and `#js:removeSetObserver` methods; this can be\n  very useful, for instance, for filtering or mapping sets.\n\n  Note that SC.Set is a primitive object, like an array.  It does implement\n  limited key-value observing support, but it does not extend from SC.Object\n  so you should not subclass it.\n\n  Creating a Set\n  --------------\n  You can create a set like you would most objects using SC.Set.create().\n  Most new sets you create will be empty, but you can also initialize the set\n  with some content by passing an array or other enumerable of objects to the\n  constructor.\n\n  Finally, you can pass in an existing set and the set will be copied.  You\n  can also create a copy of a set by calling SC.Set#clone().\n\n      #js\n      // creates a new empty set\n      var foundNames = SC.Set.create();\n\n      // creates a set with four names in it.\n      var names = SC.Set.create([\"Charles\", \"Tom\", \"Juan\", \"Alex\"]) ; // :P\n\n      // creates a copy of the names set.\n      var namesCopy = SC.Set.create(names);\n\n      // same as above.\n      var anotherNamesCopy = names.clone();\n\n  Adding/Removing Objects\n  -----------------------\n  You generally add or remove objects from a set using add() or remove().\n  You can add any type of object including primitives such as numbers,\n  strings, and booleans.\n\n  Note that objects can only exist one time in a set.  If you call add() on\n  a set with the same object multiple times, the object will only be added\n  once.  Likewise, calling remove() with the same object multiple times will\n  remove the object the first time and have no effect on future calls until\n  you add the object to the set again.\n\n  Note that you cannot add/remove null or undefined to a set.  Any attempt to\n  do so will be ignored.\n\n  In addition to add/remove you can also call push()/pop().  Push behaves just\n  like add() but pop(), unlike remove() will pick an arbitrary object, remove\n  it and return it.  This is a good way to use a set as a job queue when you\n  don't care which order the jobs are executed in.\n\n  Testing for an Object\n  ---------------------\n  To test for an object's presence in a set you simply call SC.Set#contains().\n  This method tests for the object's hash, which is generally the same as the\n  object's guid; however, if you implement the hash() method on the object, it will\n  use the return value from that method instead.\n\n  Observing changes\n  -----------------\n  When using `#js:SC.Set` (rather than `#js:SC.CoreSet`), you can observe the\n  `#js:\"[]\"` property to be alerted whenever the content changes.\n\n  This is often unhelpful. If you are filtering sets of objects, for instance,\n  it is very inefficient to re-filter all of the items each time the set changes.\n  It would be better if you could just adjust the filtered set based on what\n  was changed on the original set. The same issue applies to merging sets,\n  as well.\n\n  `#js:SC.Set` and `#js:SC.CoreSet` both offer another method of being observed:\n  `#js:addSetObserver` and `#js:removeSetObserver`. These take a single parameter:\n  an object which implements `#js:didAddItem(set, item)` and\n  `#js:didRemoveItem(set, item)`.\n\n  Whenever an item is added or removed from the set, all objects in the set\n  (a SC.CoreSet, actually) of observing objects will be alerted appropriately.\n\n  BIG WARNING\n  ===========\n  SetObservers are not intended to be used \"_creatively_\"; for instance, do\n  not expect to be alerted immediately to any changes. **While the notifications\n  are currently sent out immediately, if we find a fast way to send them at end\n  of run loop, we most likely will do so.**",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.Set#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new set, with the optional array of items included in the\n    return set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Enumerable",
            "name": "items",
            "isOptional": false,
            "defaultValue": "",
            "desc": "items to add"
          }
        ]
      },
      {
        "name": "firstObject",
        "displayName": "SC.Set#firstObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first object in the set or null if the set is empty",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "clear",
        "displayName": "SC.Set#clear",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clears the set",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "contains",
        "displayName": "SC.Set#contains",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method to test for membership.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isEqual",
        "displayName": "SC.Set#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed object is also a set that contains the same\n    objects as the receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Set",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the other object"
          }
        ]
      },
      {
        "name": "addSetObserver",
        "displayName": "SC.Set#addSetObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a set observers. Set observers must implement two methods:\n\n    - didAddItem(set, item)\n    - didRemoveItem(set, item)\n\n    Set observers are, in fact, stored in another set (a CoreSet).",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "setObserver",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "removeSetObserver",
        "displayName": "SC.Set#removeSetObserver",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes a set observer.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "setObserver",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "add",
        "displayName": "SC.Set#add",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method to add an object. performs a basic add.\n\n    If the object is already in the set it will not be added again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to add"
          }
        ]
      },
      {
        "name": "addEach",
        "displayName": "SC.Set#addEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Add all the items in the passed array or enumerable",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "remove",
        "displayName": "SC.Set#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the object from the set if it is found.\n\n    If the object is not in the set, nothing will be changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to remove"
          }
        ]
      },
      {
        "name": "pop",
        "displayName": "SC.Set#pop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes an arbitrary object from the set and returns it.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an object from the set or null"
          }
        ],
        "params": []
      },
      {
        "name": "removeEach",
        "displayName": "SC.Set#removeEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all the items in the passed array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "copy",
        "displayName": "SC.Set#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clones the set into a new set.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new copy"
          }
        ],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.Set#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Return a set to the pool for reallocation.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Set",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "isSet",
        "displayName": "SC.Set#isSet",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Set",
        "overview": "Walk like a duck",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "length",
        "displayName": "SC.Set#length",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Set",
        "overview": "This property will change as the number of objects in the set changes.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22312,
    "name": "SheetPane",
    "displayName": "SC.SheetPane",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/panes/sheet.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Evin Grano, Tom Dale",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.PanelPane"
      }
    ],
    "overview": "Displays a modal sheet pane that animates from the top of the viewport.\n\n  The default way to use the sheet pane is to simply add it to your page like this:\n\n      SC.SheetPane.create({\n        layout: { width: 400, height: 200, centerX: 0 },\n        contentView: SC.View.extend({\n        })\n      }).append();\n\n  This will cause your sheet panel to display.  The default layout for a Sheet\n  is to cover the entire document window with a semi-opaque background, and to\n  resize with the window.",
    "methods": [
      {
        "name": "append",
        "displayName": "SC.SheetPane#append",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Displays the pane.  SheetPane will calculate the height of your pane, draw it offscreen, then\n    animate it down so that it is attached to the top of the viewport.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SheetPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "remove",
        "displayName": "SC.SheetPane#remove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Animates the sheet up, then removes it from the DOM once it is hidden from view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SheetPane",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.SheetPane#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SheetPane",
        "overview": "",
        "defaultValue": "['sc-sheet']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "modalPane",
        "displayName": "SC.SheetPane#modalPane",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SheetPane",
        "overview": "",
        "defaultValue": "SC.ModalPane",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "transitionDuration",
        "displayName": "SC.SheetPane#transitionDuration",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SheetPane",
        "overview": "Speed of transition.  Should be expressed in msec.",
        "defaultValue": "200",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 44247,
    "name": "SimpleMediaControlsView",
    "displayName": "SC.SimpleMediaControlsView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/simple_controls.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "(Document Your View Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 15215,
    "name": "SingleAttribute",
    "displayName": "SC.SingleAttribute",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/models/single_attribute.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.RecordAttribute"
      }
    ],
    "overview": "`SingleAttribute` is a subclass of `RecordAttribute` and handles to-one\n  relationships.\n\n  There are many ways you can configure a `SingleAttribute`:\n  \n      group: SC.Record.toOne('MyApp.Group', { \n        inverse: 'contacts', // set the key used to represent the inverse \n        isMaster: YES|NO, // indicate whether changing this should dirty\n        transform: function(), // transforms value <=> storeKey,\n        isEditable: YES|NO, make editable or not\n      });",
    "methods": [
      {
        "name": "inverseDidRemoveRecord",
        "displayName": "SC.SingleAttribute#inverseDidRemoveRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by an inverse relationship whenever the receiver is no longer part\n    of the relationship.  If this matches the inverse setting of the attribute\n    then it will update itself accordingly.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record owning this attribute"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key for this attribute"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record that was removed from inverse"
          },
          {
            "title": "param",
            "type": "String",
            "name": "inverseKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key on inverse that was modified"
          }
        ]
      },
      {
        "name": "inverseDidAddRecord",
        "displayName": "SC.SingleAttribute#inverseDidAddRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by an inverse relationship whenever the receiver is added to the \n    inverse relationship.  This will set the value of this inverse record to \n    the new record.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "record",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record owning this attribute"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key for this attribute"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "inverseRecord",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record that was added to inverse"
          },
          {
            "title": "param",
            "type": "String",
            "name": "inverseKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key on inverse that was modified"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "inverse",
        "displayName": "SC.SingleAttribute#inverse",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SingleAttribute",
        "overview": "Specifies the property on the member record that represents the inverse\n    of the current relationship.  If set, then modifying this relationship\n    will also alter the opposite side of the relationship.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isMaster",
        "displayName": "SC.SingleAttribute#isMaster",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SingleAttribute",
        "overview": "If set, determines that when an inverse relationship changes whether this\n    record should become dirty also or not.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30649,
    "name": "SliderView",
    "displayName": "SC.SliderView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/slider.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "A SliderView shows a horizontal slider control that you can use to set \n  variable values.\n\n  You can use a slider view much like you would any other control.  Simply\n  set the value or content/contentValueKey to whatever value you want to \n  display.  You can also set the maximumValue and minValue properties to \n  determine the mapping of the control to its children.",
    "methods": [
      {
        "name": "ariaValue",
        "displayName": "SC.SliderView#ariaValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.SliderView#acceptsFirstResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "tied to the isEnabled state",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "ariaRole",
        "displayName": "SC.SliderView#ariaRole",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "The WAI-ARIA role for slider view. This property's value should not be\n    changed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "value",
        "displayName": "SC.SliderView#value",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "Bind this to the current value of the progress bar.  Note that by default \n    an empty value will disable the progress bar and a multiple value too make \n    it indeterminate.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimum",
        "displayName": "SC.SliderView#minimum",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "The minimum value of the progress.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentMinimumKey",
        "displayName": "SC.SliderView#contentMinimumKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "Optionally specify the key used to extract the minimum progress value \n    from the content object.  If this is set to null then the minimum value\n    will not be derived from the content object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maximum",
        "displayName": "SC.SliderView#maximum",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "The maximum value of the progress bar.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentMaximumKey",
        "displayName": "SC.SliderView#contentMaximumKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "Optionally specify the key used to extract the maximum progress value \n    from the content object.  If this is set to null then the maximum value\n    will not be derived from the content object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "step",
        "displayName": "SC.SliderView#step",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SliderView",
        "overview": "Optionally set to the minimum step size allowed.\n    \n    All values will be rounded to this step size when displayed.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30738,
    "name": "SourceListGroupView",
    "displayName": "SC.SourceListGroupView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/source_list_group.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley, Erich Ocean",
    "see": [],
    "since": "0.9",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionGroup"
      }
    ],
    "overview": "Displays a group view in a source list.  Handles displaying a disclosure\n  triangle which can be used to show/hide children.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.SourceListGroupView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "",
        "defaultValue": "['sc-source-list-group']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.SourceListGroupView#content",
        "objectType": "property",
        "propertyType": "SC.Object",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "The content object the source list group will display.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isGroupVisible",
        "displayName": "SC.SourceListGroupView#isGroupVisible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "The current group visibility.  Used by the source list to determine the \n    layout size of the group.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasGroupTitle",
        "displayName": "SC.SourceListGroupView#hasGroupTitle",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "YES if group is showing its titlebar.\n    \n    Group views will typically hide their header if the content is set to \n    null.  You can also override this method to always hide the header if \n    you want and the SourceListView will not leave room for it.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "groupTitleKey",
        "displayName": "SC.SourceListGroupView#groupTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "The content property key to use as the group view's title.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "groupVisibleKey",
        "displayName": "SC.SourceListGroupView#groupVisibleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListGroupView",
        "overview": "The content property key to use to determine if the group's children are \n    visible or not.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30731,
    "name": "SourceListView",
    "displayName": "SC.SourceListView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/source_list.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ListView"
      }
    ],
    "overview": "Displays a source list like the source list in iTunes.  SourceList views\n  are very similar to ListView's but come preconfigured with the correct\n  appearance and default behaviors of a source list.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.SourceListView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListView",
        "overview": "",
        "defaultValue": "['sc-source-list']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowHeight",
        "displayName": "SC.SourceListView#rowHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [
          "SC.ListView#rowHeight"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListView",
        "overview": "Default row height for source list items is larger.",
        "defaultValue": "32",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selectOnMouseDown",
        "displayName": "SC.SourceListView#selectOnMouseDown",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.ListView#selectOnMouseDown"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListView",
        "overview": "By default source lists should not select on mouse down since you will\n    often want to drag an item instead of selecting it.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "actOnSelect",
        "displayName": "SC.SourceListView#actOnSelect",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [
          "SC.ListView#actOnSelect"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SourceListView",
        "overview": "By default, SourceListView's trigger any action you set whenever the user\n    clicks on an item.  This gives the SourceList a \"menu\" like behavior.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 7908,
    "name": "SparseArray",
    "displayName": "SC.SparseArray",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/sparse_array.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Enumerable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Array"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Observable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.DelegateSupport"
      }
    ],
    "overview": "A dynamically filled array.  A SparseArray makes it easy for you to create\n  very large arrays of data but then to defer actually populating that array\n  until it is actually needed.  This is often much faster than generating an\n  array up front and paying the cost to load your data then.\n\n  Although technically all arrays in JavaScript are \"sparse\" (in the sense\n  that you can read and write properties at arbitrary indexes), this array\n  keeps track of which elements in the array have been populated already\n  and which ones have not.  If you try to get a value at an index that has\n  not yet been populated, the SparseArray will notify a delegate object first,\n  giving the delegate a chance to populate the component.\n\n  Most of the time, you will use a SparseArray to incrementally load data\n  from the server.  For example, if you have a contact list with 3,000\n  contacts in it, you may create a SparseArray with a length of 3,000 and set\n  that as the content for a ListView.  As the ListView tries to display the\n  visible contacts, it will request them from the SparseArray, which will in\n  turn notify your delegate, giving you a chance to load the contact data from\n  the server.",
    "methods": [
      {
        "name": "length",
        "displayName": "SC.SparseArray#length",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The length of the sparse array.  The delegate for the array should set\n    this length.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "provideLength",
        "displayName": "SC.SparseArray#provideLength",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method from a delegate to provide a length for the sparse array.\n    If you pass null for this property, it will essentially \"reset\" the array\n    causing your delegate to be called again the next time another object\n    requests the array length.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "length",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the length or null"
          }
        ]
      },
      {
        "name": "init",
        "displayName": "SC.SparseArray#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Make sure to create the index array during init so that it is not shared\n    between all instances.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "objectAt",
        "displayName": "SC.SparseArray#objectAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the object at the specified index.  If the value for the index\n    is currently undefined, invokes the didRequestIndex() method to notify\n    the delegate.\n\n    The omitMaterializing flag ensures that the object will not be materialized,\n    but it simply checks for the presence of an object at the specified index\n    and will return YES (or undefined if not found). This is useful in the case\n    of SparseArrays, where you might NOT want to request the index to be loaded, \n    but simply need a shallow check to see if the position has been filled.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index to get"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "omitMaterializing",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "definedIndexes",
        "displayName": "SC.SparseArray#definedIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the set of indexes that are currently defined on the sparse array.\n    If you pass an optional index set, the search will be limited to only\n    those indexes.  Otherwise this method will return an index set containing\n    all of the defined indexes.  Currently this can be quite expensive if\n    you have a lot of indexes defined.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "defined indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.IndexSet",
            "name": "indexes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional from indexes"
          }
        ]
      },
      {
        "name": "requestIndex",
        "displayName": "SC.SparseArray#requestIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by objectAt() whenever you request an index that has not yet been\n    loaded.  This will possibly expand the index into a range and then invoke\n    an appropriate method on the delegate to request the data.\n\n    It will check if the range has been already requested.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index to retrieve"
          }
        ]
      },
      {
        "name": "provideObjectsInRange",
        "displayName": "SC.SparseArray#provideObjectsInRange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method sets the content for the specified to the objects in the\n    passed array.  If you change the way SparseArray implements its internal\n    tracking of objects, you should override this method along with\n    objectAt().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Range",
            "name": "range",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the range to apply to"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "array",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the array of objects to insert"
          }
        ]
      },
      {
        "name": "provideObjectAtIndex",
        "displayName": "SC.SparseArray#provideObjectAtIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method to provide a single object at a specified index.  Under\n    the covers this calls provideObjectsInRange() so you can override only\n    that method and this one will still work.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index to insert"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to insert"
          }
        ]
      },
      {
        "name": "objectsDidChangeInRange",
        "displayName": "SC.SparseArray#objectsDidChangeInRange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invalidates the array content in the specified range.  This is not the\n    same as editing an array.  Rather it will cause the array to reload the\n    content from the delegate again when it is requested.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Range",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "range"
          }
        ]
      },
      {
        "name": "indexOf",
        "displayName": "SC.SparseArray#indexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Optimized version of indexOf().  Asks the delegate to provide the index\n    of the specified object.  If the delegate does not implement this method\n    then it will search the internal array directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the discovered index or -1 if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to search for"
          }
        ]
      },
      {
        "name": "replace",
        "displayName": "SC.SparseArray#replace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Array primitive edits the objects at the specified index unless the\n    delegate rejects the change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index to begin to replace"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the number of items to replace"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new objects to set instead"
          }
        ]
      },
      {
        "name": "reset",
        "displayName": "SC.SparseArray#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets the SparseArray, causing it to reload its content from the\n    delegate again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "array",
        "displayName": "SC.SparseArray.array",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience metohd returns a new sparse array with a default length already\n  provided.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.SparseArray",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "len",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the length of the array"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "rangeWindowSize",
        "displayName": "SC.SparseArray#rangeWindowSize",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SparseArray",
        "overview": "The minimum range of elements that should be requested from the delegate.\n    If this value is set to larger than 1, then the sparse array will always\n    fit a requested index into a range of this size and request it.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "requestedRangeIndex",
        "displayName": "SC.SparseArray#requestedRangeIndex",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SparseArray",
        "overview": "This array contains all the start_indexes of ranges requested. This is to\n    avoid calling sparseArrayDidRequestRange to often. Indexes are removed and\n    added as range requests are completed.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6342,
    "name": "SparseArrayDelegate",
    "displayName": "SC.SparseArrayDelegate",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/protocols/sparse_array_delegate.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Delegate that provides data for a sparse array.  If you set the delegate for\n  a sparse array to an object that implements one or more of these methods,\n  they will be invoked by the sparse array to fetch data or to update the\n  array content as needed.\n\n  Your object does not need to implement all of these methods, but it should\n  at least implment the sparseArrayDidRequestIndex() method.",
    "methods": [
      {
        "name": "sparseArrayDidRequestLength",
        "displayName": "SC.SparseArrayDelegate.sparseArrayDidRequestLength",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when an object requests the length of the sparse array and the\n    length has not yet been set.  You can implement this method to update\n    the length property of the sparse array immediately or at a later time\n    by calling the provideLength() method on the sparse array.\n\n    This method will only be called once on your delegate unless you\n    subsequently call provideLength(null) on the array, which will effectively\n    \"empty\" the array and cause the array to invoke the delegate again the\n    next time its length is request.\n\n    If you do not set a length on the sparse array immediately, it will return\n    a length of 0 until you provide the length.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the array that needs a length."
          }
        ]
      },
      {
        "name": "sparseArrayDidRequestIndex",
        "displayName": "SC.SparseArrayDelegate.sparseArrayDidRequestIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when an object requests an index on the sparse array that has not\n    yet been set.  You should implement this method to set the object at the\n    index using provideObjectsAtIndex() or provideObjectsInRange() on the\n    sparse array.  You can call these methods immediately during this handler\n    or you can wait and call them at a later time once you have loaded any\n    data.\n\n    This method will only be called when an index is requested on the sparse\n    array that has not yet been filled.  If you have filled an index or range\n    and you would like to reset it, call the objectsDidChangeInRange() method\n    on the sparse array.\n\n    Note that if you implement the sparseArrayDidRequestRange() method, that\n    method will be invoked instead of this one whenever possible to allow you\n    to fill in the array with the most efficiency possible.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the sparse array"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requested index"
          }
        ]
      },
      {
        "name": "sparseArrayDidRequestRange",
        "displayName": "SC.SparseArrayDelegate.sparseArrayDidRequestRange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Alternative method invoked when an object requests an index on the\n    sparse array that has not yet been set.  If you set the\n    rangeWindowSize property on the Sparse Array, then all object index\n    requests will be expanded to to nearest range window and then this\n    method will be called with that range.\n\n    You should fill in the passed range by calling the provideObjectsInRange()\n    method on the sparse array.\n\n    If you do not implement this method but set the rangeWindowSize anyway,\n    then the sparseArrayDidRequestIndex() method will be invoked instead.\n\n    Note that the passed range is a temporary object.  Be sure to clone it if\n    you want to keep the range for later use.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the sparse array"
          },
          {
            "title": "param",
            "type": "Range",
            "name": "range",
            "isOptional": false,
            "defaultValue": "",
            "desc": "read only range."
          }
        ]
      },
      {
        "name": "sparseArrayDidRequestIndexOf",
        "displayName": "SC.SparseArrayDelegate.sparseArrayDidRequestIndexOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Optional delegate method you can use to determine the index of a\n    particular object.  If you do not implement this method, then the\n    sparse array will just search the objects it has loaded already.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index or -1"
          },
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the sparse array"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to find the index of"
          }
        ]
      },
      {
        "name": "sparseArrayShouldReplace",
        "displayName": "SC.SparseArrayDelegate.sparseArrayShouldReplace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Optional delegate method invoked whenever the sparse array attempts to\n    changes its contents.  If you do not implement this method or if you\n    return NO from this method, then the edit will not be allowed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to allow replace, NO to deny"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the sparse array"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the starting index to replace"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the number if items to replace"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the array of objects to insert"
          }
        ]
      },
      {
        "name": "sparseArrayDidReset",
        "displayName": "SC.SparseArrayDelegate.sparseArrayDidReset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the sparse array is reset.  Resetting a sparse array\n    will cause it to flush its content and go back to the delegate for all\n    property requests again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SparseArray",
            "name": "sparseArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the sparse array"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 31010,
    "name": "SplitDividerView",
    "displayName": "SC.SplitDividerView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/split_divider.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley, Lawrence Pit, Erich Ocean",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "A SplitDividerView displays a divider between two views within a SplitView.\n  Clicking and dragging the divider will change the thickness of each view\n  either to the top/left or bottom/right of the divider.\n\n  Double-clicking on the SplitDividerView will try to collapse the first\n  view within the SplitView that has property canCollapse set to true,\n  so it is not visible, unless you have canCollapse disabled on the SplitView.\n\n  This view must be a direct child of the split view it works with. It must\n  be surrounded by two other views.",
    "methods": [
      {
        "name": "capitalizeEach",
        "displayName": "SC.SplitDividerView#capitalizeEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.capitalizeEach"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "titleize",
        "displayName": "SC.SplitDividerView#titleize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.titleize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "classify",
        "displayName": "SC.SplitDividerView#classify",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.classify"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "humanize",
        "displayName": "SC.SplitDividerView#humanize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.humanize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "escapeForRegExp",
        "displayName": "SC.SplitDividerView#escapeForRegExp",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.escapeForRegExp"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "removeDiacritics",
        "displayName": "SC.SplitDividerView#removeDiacritics",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.removeDiacritics"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "trim",
        "displayName": "SC.SplitDividerView#trim",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.trim"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "trimLeft",
        "displayName": "SC.SplitDividerView#trimLeft",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.trimLeft"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "trimRight",
        "displayName": "SC.SplitDividerView#trimRight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.trimRight"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "pluralize",
        "displayName": "SC.SplitDividerView#pluralize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.pluralize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "singularize",
        "displayName": "SC.SplitDividerView#singularize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.singularize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "parentItem",
        "displayName": "SC.SplitDividerView#parentItem",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The parent item for the observer item.  Computed automatically from the\n    parent.  If the value of this is null, then this is the root of the tree.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "branchIndexes",
        "displayName": "SC.SplitDividerView#branchIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "IndexSet of children with branches.  This will ask the delegate to name\n    these indexes.  The default implementation will iterate over the children\n    of the item but a more optimized version could avoid touching each item.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isHeaderVisible",
        "displayName": "SC.SplitDividerView#isHeaderVisible",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the item itself should be shown, NO if only its children\n    should be shown.  Normally returns YES unless the parentObject is null.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "objectAt",
        "displayName": "SC.SplitDividerView#objectAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the object at the specified index.  This will talk the tree info\n    to determine the proper place.  The offset should be relative to the\n    start of this tree item.  Calls recursively down the tree.\n\n    This should only be called with an index you know is in the range of item\n    or its children based on looking at the length.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "omitMaterializing",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "replace",
        "displayName": "SC.SplitDividerView#replace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implements SC.Array.replace() primitive.  For this method to succeed, the\n    range you replace must lie entirely within the same parent item, otherwise\n    this will raise an exception.\n\n    ### The Operation Parameter\n\n    Note that this replace method accepts an additional parameter \"operation\"\n    which is used when you try to insert an item on a boundary between\n    branches whether it should be inserted at the end of the previous group\n    after the group.  If you don't pass operation, the default is\n    SC.DROP_BEFORE, which is the expected behavior.\n\n    Even if the operation is SC.DROP_AFTER, you should still pass the actual\n    index where you expect the item to be inserted.  For example, if you want\n    to insert AFTER the last index of an 3-item array, you would still call:\n\n        observer.replace(3, 0, [object1 .. objectN], SC.DROP_AFTER)\n\n    The operation is simply used to disambiguate whether the insertion is\n    intended to be AFTER the previous item or BEFORE the items you are\n    replacing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.TreeItemObserver",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the starting index"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the number of items to replace"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of objects to insert"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "operation",
            "isOptional": false,
            "defaultValue": "",
            "desc": "either SC.DROP_BEFORE or SC.DROP_AFTER"
          }
        ]
      },
      {
        "name": "observerContentDidChange",
        "displayName": "SC.SplitDividerView#observerContentDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the content for the passed observer has changed.  Default\n    version notifies the parent if it exists and updates the length.\n\n    The start, amt and delta params should reflect changes to the children\n    array, not to the expanded range for the wrapper.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "start",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "delta",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "expandChildIndex",
        "displayName": "SC.SplitDividerView#expandChildIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Accepts a child index and expands it to reflect any nested groups.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentGroupIndexes",
        "displayName": "SC.SplitDividerView#contentGroupIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the collection view to return any group indexes.  The default\n    implementation will compute the indexes one time based on the delegate\n    treeItemIsGrouped",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexOutlineLevel",
        "displayName": "SC.SplitDividerView#contentIndexOutlineLevel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the outline level for the specified index.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexDisclosureState",
        "displayName": "SC.SplitDividerView#contentIndexDisclosureState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the disclosure state for the specified index.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexExpand",
        "displayName": "SC.SplitDividerView#contentIndexExpand",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Expands the specified content index.  This will search down until it finds\n    the branchObserver responsible for this item and then calls _collapse on\n    it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "contentIndexCollapse",
        "displayName": "SC.SplitDividerView#contentIndexCollapse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called to collapse a content index item if it is currently in an open\n    disclosure state.  The default implementation does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.CollectionView",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the collection view"
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "content",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content object"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "branchObserverAt",
        "displayName": "SC.SplitDividerView#branchObserverAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the branch item for the specified index.  If none exists yet, it\n    will be created.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "invalidateBranchObserversAt",
        "displayName": "SC.SplitDividerView#invalidateBranchObserversAt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invalidates any branch observers on or after the specified index range.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "destroy",
        "displayName": "SC.SplitDividerView#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called just before a branch observer is removed.  Should stop any\n    observering and invalidate any child observers.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sizeFor",
        "displayName": "SC.SplitDividerView#sizeFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines the correct size for the given data source, and returns the\n    hash, if any, representing it.\n   \n    The hashes to choose from are properties on the render delegate. You define\n    them with the same name as you would use for styling. For example,\n    SC.REGULAR_CONTROL_SIZE uses a property name 'sc-regular-size':\n   \n        SC.RenderDelegate.create({\n          'sc-regular-size': {\n            // my properties here\n          }\n   \n    If no matching size is found, the hash (if any) for SC.REGULAR_CONTROL_SIZE\n    will be returned.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash undefined",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "DataSource",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The data source in which to find `controlSize`\n    or `frame` and to determine the size for."
          }
        ]
      },
      {
        "name": "addSizeClassName",
        "displayName": "SC.SplitDividerView#addSizeClassName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines the proper size for the dataSource, and then renders the class\n    name corresponding to that size.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateSizeClassName",
        "displayName": "SC.SplitDividerView#updateSizeClassName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines the proper size for the dataSource, and then updates\n    the DOM to include that size's class name.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "jquery",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getPropertyFor",
        "displayName": "SC.SplitDividerView#getPropertyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves the given property for the specified data source. This property\n    may be static, or may be computed specifically for this data source. This\n    version fo `getPropertyFor` will check in your size hashes to see if any\n    properties have been overriden.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "DataSource",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The data source to get the property\n    for. Some properties may differ based on the data source; for instance,\n    some may have different values depending on size."
          },
          {
            "title": "param",
            "type": "String",
            "name": "propertyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the property to retrieve."
          }
        ]
      },
      {
        "name": "touchIsInGesture",
        "displayName": "SC.SplitDividerView#touchIsInGesture",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Return YES to take exclusive control over the touch. In addition to the\n    SC.Touch object you may take control of, you are also provided a \"status\"\n    hash, which is unique for both the gesture instance and the touch instance,\n    which you may use for your own purposes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "status",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchStart",
        "displayName": "SC.SplitDividerView#touchStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "After you return YES from touchIsInGesture (or otherwise 'take' a touch, perhaps\n    using the 'take' method), touchStart will be called.\n    \n    This is where you do any logic needed now that the touch is part of the gesture.\n    For instance, you could inform the view that the gesture has started by calling\n    this.start().\n    \n    NOTE: SC.Gesture is just like SC.View in that it has an acceptsMultitouch property.\n    If NO (the default), the gesture will only receive touchStart for the first touch\n    assigned to it, and only receive touchEnd for the last touch that ends.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesDragged",
        "displayName": "SC.SplitDividerView#touchesDragged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when touches assigned to the gesture have moved.\n    \n    This is where you update the gesture's state, potentially calling change() to\n    notify the view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchEnd",
        "displayName": "SC.SplitDividerView#touchEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when a touch assigned to the gesture ends.\n    \n    If there are no remaining touches on the gesture, you may want to call end() to\n    notify the view that the gesture has ended (if you haven't ended the gesture\n    already).\n    \n    NOTE: SC.Gesture is just like SC.View in that it has an acceptsMultitouch property.\n    If NO (the default), the gesture will only receive touchStart for the first touch\n    assigned to it, and only receive touchEnd for the last touch that ends.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "start",
        "displayName": "SC.SplitDividerView#start",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Starts the gesture (marking it as \"active\"), and notifies the view.\n    \n    You can pass any number of arguments to start. They will, along with\n    the gesture instance itself, will be passed to the appropriate gesture \n    event on the SC.View.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "end",
        "displayName": "SC.SplitDividerView#end",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Ends the gesture, if it is active (marking it as not active), and notifies\n    the view.\n    \n    You may pass any number of arguments to end(). They, along with your gesture\n    instance itself, will be passed to the appropriate gesture event on the SC.View.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "change",
        "displayName": "SC.SplitDividerView#change",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the gesture is active, notifies the view that the gesture has\n    changed.\n    \n    The gesture, along with any arguments to change(), will be passed to\n    the appropriate method on the SC.View.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "cancel",
        "displayName": "SC.SplitDividerView#cancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cancels the gesture, if it is active, and notifies the view that the\n    gesture has been cancelled.\n    \n    Gestures are cancelled when they have ended, but any action that would\n    normally be appropriate due to their ending should not be performed.\n    \n    The gesture, along with any arguments to cancel(), will be passed to the\n    appropriate method on the SC.View.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "trigger",
        "displayName": "SC.SplitDividerView#trigger",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Triggers the gesture, notifying the view that the gesture has happened.\n    \n    You should trigger a gesture where it would be natural to say it has \"happened\";\n    for instance, if a touch moves a couple of pixels, you probably wouldn't say\n    a swipe has occurredâthough you might say it has \"begun.\" And you wouldn't necessarily\n    wait until the touch has ended either. Once the touch has moved a certain amount,\n    there has definitely been a swipe. By calling trigger() at this point, you will\n    tell the view that it has occurred.\n    \n    For SC.SwipeGesture, this allows a view to implement only swipe(), and then be \n    automatically notified whenever any swipe has occurred.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "take",
        "displayName": "SC.SplitDividerView#take",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Takes possession of a touch. This does not take effect immediately; it takes effect after\n    the run loop finishes to prevent it from being called during another makeTouchResponder.\n    \n    This is called automatically when you return YES from touchIsInGesture.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "release",
        "displayName": "SC.SplitDividerView#release",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Releases a touch back to its previous owner, which is usually the view. This allows\n    you to give back control of a touch that it turns out is not part of the gesture. \n    \n    This takes effect immediately, because you would usually call this from\n    touchesDragged or such.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "discardTouch",
        "displayName": "SC.SplitDividerView#discardTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Discards a touch, making its responder null. This makes the touch go away and never\n    come backânot to this gesture, nor to any other, nor to the view, nor to any other\n    view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "statusForTouch",
        "displayName": "SC.SplitDividerView#statusForTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a status hash (which gestures may and should modify) for a given touch, for tracking\n    whether it is a potential match, etc.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "unassignedTouchDidStart",
        "displayName": "SC.SplitDividerView#unassignedTouchDidStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when an unassigned touch has started. By default, this calls touchIsInGesture, and,\n    if it returns YES, takes possesion of the touch (causing touchStart to  be called).",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "unassignedTouchesDidChange",
        "displayName": "SC.SplitDividerView#unassignedTouchesDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is called when the unassigned touches (touches not in a gesture) change or move\n    in some way. By default, this calls touchIsInGesture(touch, status) for each touch.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "touches",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "unassignedTouchDidEnd",
        "displayName": "SC.SplitDividerView#unassignedTouchDidEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is called when the unassigned touches (touches not in the gesture) have ended.\n    Default does nothing. Some gestures may want to implement this even if they don't implement\n    unassignedTouchesDidChange.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "interestedInTouch",
        "displayName": "SC.SplitDividerView#interestedInTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Marks the touch as \"interesting\" to this gesture. A view could then check the 'isInteresting'\n    property of the touch to see if any gestures are interested in it, potentially delaying any\n    action of releasing the touch to another view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "uninterestedInTouch",
        "displayName": "SC.SplitDividerView#uninterestedInTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Marks the touch as \"uninteresting\" to this gesture.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "near",
        "displayName": "SC.SplitDividerView#near",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks to see if the number is near the supplied parameter to a certain lambda.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "n1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "First number in comparison."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "n2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Number to compare against the first."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "lambda",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The closeness sufficient for a positive result. Default 0.00001"
          }
        ]
      },
      {
        "name": "round",
        "displayName": "SC.SplitDividerView#round",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Rounds a number to a given decimal place. If a negative decimalPlace\n    parameter is provided, the number will be rounded outward (ie. providing\n    -3 will round to the thousands).\n    \n    Function is insufficient for high negative values of decimalPlace parameter.\n    For example, (123456.789).round(-5) should evaluate to 100000 but instead\n    evaluates to 99999.999...",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "n",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The number to round"
          },
          {
            "title": "param",
            "type": "Integer",
            "name": "decimalPlace",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hasTasks",
        "displayName": "SC.SplitDividerView#hasTasks",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if there are tasks in the queue.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "taskCount",
        "displayName": "SC.SplitDividerView#taskCount",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the number of tasks in the queue.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "push",
        "displayName": "SC.SplitDividerView#push",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the task to the end of the queue.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "task",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "next",
        "displayName": "SC.SplitDividerView#next",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes and returns the first task in the queue.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "run",
        "displayName": "SC.SplitDividerView#run",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Runs tasks until limit (TaskQueue.runLimit by default) is reached.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "limit",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setup",
        "displayName": "SC.SplitDividerView#setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "teardown",
        "displayName": "SC.SplitDividerView#teardown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "inlineEditorShouldBeginEditing",
        "displayName": "SC.SplitDividerView#inlineEditorShouldBeginEditing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "inlineEditor",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fieldValueForObject",
        "displayName": "SC.SplitDividerView#fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "if we have a number, then convert to a date object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.SplitDividerView#objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Try to pase value as a date. convert into a number, or return null if\n    it could not be parsed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "time",
        "displayName": "SC.SplitDividerView#time",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Formatted currentTime. (00:00)",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "render",
        "displayName": "SC.SplitDividerView#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Renders the appropiate HTML according for the technology to use.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the render context"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if this is creating a layer"
          }
        ]
      },
      {
        "name": "didCreateLayer",
        "displayName": "SC.SplitDividerView#didCreateLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "In didCreateLayer we add DOM events for audio tag or quicktime.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "addAudioDOMEvents",
        "displayName": "SC.SplitDividerView#addAudioDOMEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds all the neccesary audio DOM elements.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "addQTDOMEvents",
        "displayName": "SC.SplitDividerView#addQTDOMEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds all the neccesary quicktime DOM elements.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "seek",
        "displayName": "SC.SplitDividerView#seek",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when currentTime changes. Notifies the differnt technologies \n    then new currentTime.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "startSeek",
        "displayName": "SC.SplitDividerView#startSeek",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Should be called once the progress view is clicked to stop the event and\n    later start seeking.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "endSeek",
        "displayName": "SC.SplitDividerView#endSeek",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Should be called once the progress view gets a mouseUp. It will get the\n    player to continue playing if it was playing before starting the seek.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "setVolume",
        "displayName": "SC.SplitDividerView#setVolume",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the volume of the audio.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "play",
        "displayName": "SC.SplitDividerView#play",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calls the right play method depending on the technology.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "stop",
        "displayName": "SC.SplitDividerView#stop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calls the right stop method depending on the technology.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "playPause",
        "displayName": "SC.SplitDividerView#playPause",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Plays or stops the audio.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "closedCaption",
        "displayName": "SC.SplitDividerView#closedCaption",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Enables captions if available",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "frameDidChange",
        "displayName": "SC.SplitDividerView#frameDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This function is called everytime the frame changes. This is done to get \n    the right video dimensions for HTML5 video tag.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "addVideoDOMEvents",
        "displayName": "SC.SplitDividerView#addVideoDOMEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds all the neccesary video DOM elements.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "fullScreen",
        "displayName": "SC.SplitDividerView#fullScreen",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Goes into fullscreen mode if available",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "simple",
        "displayName": "SC.SplitDividerView#simple",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return a set of simple values such as numbers or strings.\n    Return null if your set does not support primitives.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hashes",
        "displayName": "SC.SplitDividerView#hashes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return hashes of values if supported.  Or return null.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "objects",
        "displayName": "SC.SplitDividerView#objects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Override to return observable objects if supported.  Or return null.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "expected",
        "displayName": "SC.SplitDividerView#expected",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array of content items in your preferred format.  This will\n    be used whenever the test does not care about the specific object content.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "amt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "newObject",
        "displayName": "SC.SplitDividerView#newObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Example of how to implement newObject",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "expected",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "observer",
        "displayName": "SC.SplitDividerView#observer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates an observer object for use when tracking object modifications.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "validateAfter",
        "displayName": "SC.SplitDividerView#validateAfter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Verifies that the passed object matches the passed array.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "after",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "observer",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "lengthDidChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "enumerableDidChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getPath",
        "displayName": "SC.SplitDividerView#getPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves a property from an object at a specified path, using get() if\n      the object implements SC.Observable.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to query"
          },
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the path to the property to retrieve"
          }
        ]
      },
      {
        "name": "trace",
        "displayName": "SC.SplitDividerView#trace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.StatechartManager#trace"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state should trace actions. Useful for debugging\n    purposes. Managed by the statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "owner",
        "displayName": "SC.SplitDividerView#owner",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.StatechartManager#owner"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates who the owner is of this state. If not set on the statechart\n    then the owner is the statechart, otherwise it is the assigned\n    object. Managed by the statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "initState",
        "displayName": "SC.SplitDividerView#initState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to initialize this state. To only be called by the owning statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createSubstate",
        "displayName": "SC.SplitDividerView#createSubstate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "creates a substate for this state",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "createHistoryState",
        "displayName": "SC.SplitDividerView#createHistoryState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create a history state for this state",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "createEmptyState",
        "displayName": "SC.SplitDividerView#createEmptyState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create an empty state for this state's initial substate",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "pathRelativeTo",
        "displayName": "SC.SplitDividerView#pathRelativeTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will generate path for a given state that is relative to this state. It is\n    required that the given state is a substate of this state.\n    \n    If the heirarchy of the given state to this state is the following:\n    A > B > C, where A is this state and C is the given state, then the \n    relative path generated will be \"B.C\"",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "getSubstate",
        "displayName": "SC.SplitDividerView#getSubstate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to get a substate of this state that matches a given value. \n    \n    If the value is a state object, then the value will be returned if it is indeed \n    a substate of this state, otherwise null is returned. \n    \n    If the given value is a string, then the string is assumed to be a path to a substate. \n    The value is then parsed to find the closes match. If there is no match then null \n    is returned. If there is more than one match then null is return and an error \n    is generated indicating ambiguity of the given value. \n    \n    Note that when the value is a string, it is assumed to be a path relative to this \n    state; not the root state of the statechart.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "gotoState",
        "displayName": "SC.SplitDividerView#gotoState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to go to a state in the statechart either directly from this state if it is a current state,\n    or from one of this state's current substates.\n    \n    Note that if the value given is a string, it will be assumed to be a path to a state. The path\n    will be relative to the statechart's root state; not relative to this state.\n    \n    Method can be called in the following ways: \n    \n        // With one argument\n        gotoState(<state>)\n      \n        // With two arguments\n        gotoState(<state>, <hash>)\n    \n    Where <state> is either a string or a SC.State object and <hash> is a regular JS hash object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} the state to go to"
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} Optional. context object that will be supplied to all states that are\n           exited and entered during the state transition process"
          }
        ]
      },
      {
        "name": "gotoHistoryState",
        "displayName": "SC.SplitDividerView#gotoHistoryState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to go to a given state's history state in the statechart either directly from this state if it\n    is a current state or from one of this state's current substates. \n    \n    Note that if the value given is a string, it will be assumed to be a path to a state. The path\n    will be relative to the statechart's root state; not relative to this state.\n    \n    Method can be called in the following ways:\n    \n        // With one argument\n        gotoHistoryState(<state>)\n    \n        // With two arguments\n        gotoHistoryState(<state>, <boolean | hash>)\n    \n        // With three arguments\n        gotoHistoryState(<state>, <boolean>, <hash>)\n    \n    Where <state> is either a string or a SC.State object and <hash> is a regular JS hash object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} the state whose history state to go to"
          },
          {
            "title": "param",
            "type": "",
            "name": "recusive",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} Optional. Indicates whether to follow history states recusively starting\n           from the given state"
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} Optional. context object that will be supplied to all states that are exited\n           entered during the state transition process"
          }
        ]
      },
      {
        "name": "resumeGotoState",
        "displayName": "SC.SplitDividerView#resumeGotoState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resumes an active goto state transition process that has been suspended.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "stateIsCurrentSubstate",
        "displayName": "SC.SplitDividerView#stateIsCurrentSubstate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to check if a given state is a current substate of this state. Mainly used in cases\n    when this state is a concurrent state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true is the given state is a current substate, otherwise false is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} either a state object or the name of a state"
          }
        ]
      },
      {
        "name": "stateIsEnteredSubstate",
        "displayName": "SC.SplitDividerView#stateIsEnteredSubstate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to check if a given state is a substate of this state that is currently entered.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if the given state is a entered substate, otherwise false is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} either a state object of the name of a state"
          }
        ]
      },
      {
        "name": "isRootState",
        "displayName": "SC.SplitDividerView#isRootState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state is the root state of the statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isCurrentState",
        "displayName": "SC.SplitDividerView#isCurrentState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state is a current state of the statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isConcurrentState",
        "displayName": "SC.SplitDividerView#isConcurrentState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state is a concurrent state",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "isEnteredState",
        "displayName": "SC.SplitDividerView#isEnteredState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state is a currently entered state. \n    \n    A state is currently entered if during a state transition process the\n    state's enterState method was invoked, but only after its exitState method \n    was called, if at all.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasSubstates",
        "displayName": "SC.SplitDividerView#hasSubstates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicate if this state has any substates",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasCurrentSubstates",
        "displayName": "SC.SplitDividerView#hasCurrentSubstates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state has any current substates",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "hasEnteredSubstates",
        "displayName": "SC.SplitDividerView#hasEnteredSubstates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if this state has any currently entered substates",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "reenter",
        "displayName": "SC.SplitDividerView#reenter",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to re-enter this state. Call this only when the state a current state of\n    the statechart.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "tryToHandleEvent",
        "displayName": "SC.SplitDividerView#tryToHandleEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the statechart to allow a state to try and handle the given event. If the\n    event is handled by the state then YES is returned, otherwise NO.\n    \n    There is a particular order in how an event is handled by a state:\n    \n     1. Basic function whose name matches the event\n     2. Registered event handler that is associated with an event represented as a string\n     3. Registered event handler that is associated with events matching a regular expression\n     4. The unknownEvent function\n      \n    Use of event handlers that are associated with events matching a regular expression may\n    incur a performance hit, so they should be used sparingly.\n    \n    The unknownEvent function is only invoked if the state has it, otherwise it is skipped. Note that\n    you should be careful when using unknownEvent since it can be either abused or cause unexpected\n    behavior.\n    \n    Example of a state using all four event handling techniques:\n    \n        SC.State.extend({\n      \n          // Basic function handling event 'foo'\n          foo: function(arg1, arg2) { ... },\n        \n          // event handler that handles 'frozen' and 'canuck'\n          eventHandlerA: function(event, arg1, arg2) {\n            ...\n          }.handleEvent('frozen', 'canuck'),\n        \n          // event handler that handles events matching the regular expression /num\\d/\n          //   ex. num1, num2\n          eventHandlerB: function(event, arg1, arg2) {\n            ...\n          }.handleEvent(/num\\d/),\n        \n          // Handle any event that was not handled by some other\n          // method on the state\n          unknownEvent: function(event, arg1, arg2) {\n        \n          }\n      \n        });",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "enterState",
        "displayName": "SC.SplitDividerView#enterState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever this state is to be entered during a state transition process. This \n    is useful when you want the state to perform some initial set up procedures. \n    \n    If when entering the state you want to perform some kind of asynchronous action, such\n    as an animation or fetching remote data, then you need to return an asynchronous \n    action, which is done like so:\n    \n        enterState: function() {\n          return this.performAsync('foo');\n        }\n    \n    After returning an action to be performed asynchronously, the statechart will suspend\n    the active state transition process. In order to resume the process, you must call\n    this state's resumeGotoState method or the statechart's resumeGotoState. If no asynchronous \n    action is to be perform, then nothing needs to be returned.\n    \n    When the enterState method is called, an optional context value may be supplied if\n    one was provided to the gotoState method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} Optional value if one was supplied to gotoState when invoked"
          }
        ]
      },
      {
        "name": "stateWillBecomeEntered",
        "displayName": "SC.SplitDividerView#stateWillBecomeEntered",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#enterState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notification called just before enterState is invoked. \n    \n    Note: This is intended to be used by the owning statechart but it can be overridden if \n    you need to do something special.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "stateDidBecomeEntered",
        "displayName": "SC.SplitDividerView#stateDidBecomeEntered",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#enterState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notification called just after enterState is invoked. \n    \n    Note: This is intended to be used by the owning statechart but it can be overridden if \n    you need to do something special.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "exitState",
        "displayName": "SC.SplitDividerView#exitState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever this state is to be exited during a state transition process. This is \n    useful when you want the state to peform some clean up procedures.\n    \n    If when exiting the state you want to perform some kind of asynchronous action, such\n    as an animation or fetching remote data, then you need to return an asynchronous \n    action, which is done like so:\n    \n        exitState: function() {\n          return this.performAsync('foo');\n        }\n    \n    After returning an action to be performed asynchronously, the statechart will suspend\n    the active state transition process. In order to resume the process, you must call\n    this state's resumeGotoState method or the statechart's resumeGotoState. If no asynchronous \n    action is to be perform, then nothing needs to be returned.\n    \n    When the exitState method is called, an optional context value may be supplied if\n    one was provided to the gotoState method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} Optional value if one was supplied to gotoState when invoked"
          }
        ]
      },
      {
        "name": "stateWillBecomeExited",
        "displayName": "SC.SplitDividerView#stateWillBecomeExited",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#exitState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notification called just before exitState is invoked. \n    \n    Note: This is intended to be used by the owning statechart but it can be overridden \n    if you need to do something special.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "stateDidBecomeExited",
        "displayName": "SC.SplitDividerView#stateDidBecomeExited",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#exitState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notification called just after exitState is invoked. \n    \n    Note: This is intended to be used by the owning statechart but it can be overridden \n    if you need to do something special.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "performAsync",
        "displayName": "SC.SplitDividerView#performAsync",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "enterState",
          "exitState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call when an asynchronous action need to be performed when either entering or exiting\n    a state.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "respondsToEvent",
        "displayName": "SC.SplitDividerView#respondsToEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the value to check"
          }
        ]
      },
      {
        "name": "fullPath",
        "displayName": "SC.SplitDividerView#fullPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the path for this state relative to the statechart's\n    root state. \n    \n    The path is a dot-notation string representing the path from\n    this state to the statechart's root state, but without including\n    the root state in the path. For instance, if the name of this\n    state if \"foo\" and the parent state's name is \"bar\" where bar's\n    parent state is the root state, then the full path is \"bar.foo\"",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "stateLogTrace",
        "displayName": "SC.SplitDividerView#stateLogTrace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a state trace message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "stateLogWarning",
        "displayName": "SC.SplitDividerView#stateLogWarning",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a state warning message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "stateLogError",
        "displayName": "SC.SplitDividerView#stateLogError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a state error message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.SplitDividerView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "",
        "defaultValue": "['sc-split-divider-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "item",
        "displayName": "SC.SplitDividerView#item",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The node in the tree this observer will manage.  Set when creating the\n    object.  If you are creating an observer manually, you must set this to\n    a non-null value.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "delegate",
        "displayName": "SC.SplitDividerView#delegate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The controller delegate.  If the item does not implement the\n    TreeItemContent method, delegate properties will be used to determine how\n    to access the content.  Set automatically when a tree item is created.\n\n    If you are creating an observer manually, you must set this to a non-null\n    value.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parentObserver",
        "displayName": "SC.SplitDividerView#parentObserver",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The parent TreeItemObserver for this observer.  Must be set on create.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "index",
        "displayName": "SC.SplitDividerView#index",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Index location in parent's children array.  If this is the root item\n    in the tree, should be null.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "children",
        "displayName": "SC.SplitDividerView#children",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Array of child tree items.  Extracted from the item automatically on init.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "disclosureState",
        "displayName": "SC.SplitDividerView#disclosureState",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Disclosure state of this item.  Must be SC.BRANCH_OPEN or SC.BRANCH_CLOSED\n    If this is the root of a item tree, the observer will have children but\n    no parent or parent item.  IN this case the disclosure state is always\n    SC.BRANCH_OPEN.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "length",
        "displayName": "SC.SplitDividerView#length",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Get the current length of the tree item including any of its children.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sizes",
        "displayName": "SC.SplitDividerView#sizes",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "A list of size names to look for when automatically determining\n    control size. By default, this has all of the SproutCore control sizes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "name",
        "displayName": "SC.SplitDividerView#name",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The gesture's name. When calling events on the owning SC.View, this name will\n    be prefixed to the methods. For instance, if the method to be called is\n    'Start', and the gesture's name is 'swipe', SC.Gesture will call 'swipeStart'.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "runWhenIdle",
        "displayName": "SC.SplitDividerView#runWhenIdle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "If YES, the queue will automatically run in the background when the browser idles.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "runLimit",
        "displayName": "SC.SplitDividerView#runLimit",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "A limit which, if exceeded, the task queue will wait until a later run\n    to continue.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "interval",
        "displayName": "SC.SplitDividerView#interval",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The duration between idle runs.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRunning",
        "displayName": "SC.SplitDividerView#isRunning",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "If running, YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minimumIdleDuration",
        "displayName": "SC.SplitDividerView#minimumIdleDuration",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The minimum elapsed time since the last event. As a rule of thumb, perhaps\n    something equivalent to the expected duration of a task.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bundle",
        "displayName": "SC.SplitDividerView#bundle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The identifier of the bundle to load.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "target",
        "displayName": "SC.SplitDividerView#target",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The target to supply to SC.Module.loadModule.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "action",
        "displayName": "SC.SplitDividerView#action",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The action to supply to SC.Module.loadModule.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "format",
        "displayName": "SC.SplitDividerView#format",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The standard format you want the validator to convert dates to.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.SplitDividerView#displayProperties",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Properties that trigger a re render of the view. If the value changes, it\n    means that the audio url changed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "audioObject",
        "displayName": "SC.SplitDividerView#audioObject",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Reference to the audio object once is created.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "degradeList",
        "displayName": "SC.SplitDividerView#degradeList",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Array containing the technologies and the order to load them depending\n    availability",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "currentTime",
        "displayName": "SC.SplitDividerView#currentTime",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Current time in secs",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "duration",
        "displayName": "SC.SplitDividerView#duration",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Duration in secs",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "volume",
        "displayName": "SC.SplitDividerView#volume",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Volume. The value should be between 0 and 1",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "paused",
        "displayName": "SC.SplitDividerView#paused",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Tells you if the audio is paused or not.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "loaded",
        "displayName": "SC.SplitDividerView#loaded",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Tells you if the audio is loaded.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ended",
        "displayName": "SC.SplitDividerView#ended",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Indicates if the audio has reached the end",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canPlay",
        "displayName": "SC.SplitDividerView#canPlay",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Indicates if the audio is ready to be played.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "videoObject",
        "displayName": "SC.SplitDividerView#videoObject",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Reference to the video object once is created.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "videoWidth",
        "displayName": "SC.SplitDividerView#videoWidth",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Width of the video in pixels.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "videoHeight",
        "displayName": "SC.SplitDividerView#videoHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Width of the video in pixels.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "captionsEnabled",
        "displayName": "SC.SplitDividerView#captionsEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Flag to enable captions if available.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hashValueKey",
        "displayName": "SC.SplitDividerView#hashValueKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Override with the name of the key we should get/set on hashes",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "objectValueKey",
        "displayName": "SC.SplitDividerView#objectValueKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Override with the name of the key we should get/set on objects",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parentState",
        "displayName": "SC.SplitDividerView#parentState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "This state's parent state. Managed by the statechart",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "historyState",
        "displayName": "SC.SplitDividerView#historyState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "This state's history state. Can be null. Managed by the statechart.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "initialSubstate",
        "displayName": "SC.SplitDividerView#initialSubstate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Used to indicate the initial substate of this state to enter into. \n    \n    You assign the value with the name of the state. Upon creation of \n    the state, the statechart will automatically change the property \n    to be a corresponding state object\n    \n    The substate is only to be this state's immediate substates. If\n    no initial substate is assigned then this states initial substate\n    will be an instance of an empty state (SC.EmptyState).\n    \n    Note that a statechart's root state must always have an explicity\n    initial substate value assigned else an error will be thrown.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "substatesAreConcurrent",
        "displayName": "SC.SplitDividerView#substatesAreConcurrent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Used to indicates if this state's immediate substates are to be\n    concurrent (orthogonal) to each other.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "substates",
        "displayName": "SC.SplitDividerView#substates",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The immediate substates of this state. Managed by the statechart.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "statechart",
        "displayName": "SC.SplitDividerView#statechart",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "The statechart that this state belongs to. Assigned by the owning\n    statechart.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "stateIsInitialized",
        "displayName": "SC.SplitDividerView#stateIsInitialized",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "Indicates if this state has been initialized by the statechart",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "currentSubstates",
        "displayName": "SC.SplitDividerView#currentSubstates",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "An array of this state's current substates. Managed by the statechart",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "enteredSubstates",
        "displayName": "SC.SplitDividerView#enteredSubstates",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitDividerView",
        "overview": "An array of this state's substates that are currently entered. Managed by\n    the statechart.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 30766,
    "name": "SplitView",
    "displayName": "SC.SplitView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/split.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley, Lawrence Pit, Erich Ocean",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "A split view is used to show views that the user can resize or collapse.\n  To use a split view you need to set a topLeftView, a bottomRightView and,\n  optionally, a splitDividerView.  You can also set various other properties\n  to control the minimum and maximum thickness allowed for the flexible views.\n  \n  ## Example\n  \n      SC.SplitView.design({\n      \n        // the left view...\n        topLeftView: SC.View.design({\n          // view contents\n        }),\n      \n        // the right view\n        bottomRightView: SC.View.design({\n          // view contents\n        })\n      \n      })\n  \n  When the user clicks and drags on a split divider view, it will\n  automatically resize the views immediately before and after the split\n  divider view. You can constrain the resizing allowed by the split view\n  either by setting a minThickness and maxThickness property on the views\n  themselves or by implementing the method splitViewConstrainThickness on\n  a delegate object.\n  \n  In addition to resizing views, users can also collapse views by double\n  clicking on a split divider view.  When a view is collapsed, it's isVisible\n  property is set to NO and its space it removed from the view.  Double\n  clicking on a divider again will restore a collapsed view.  A user can also\n  start to drag the divider to show the collapsed view.\n  \n  You can programmatically control collapsing behavior using various \n  properties on either the split view or its child views, and/or by \n  implementing the method splitViewCanCollapse on a delegate object.\n  \n  Finally, SplitViews can layout their child views either horizontally or\n  vertically.  To choose the direction of layout set the layoutDirection\n  property on the view (or the :direction option with the view helper).\n  This property should be set when the view is created. Changing it\n  dynamically will have an unknown effect.\n  \n  In addition, the top/left and bottom/right child views can have these\n  properties:",
    "methods": [
      {
        "name": "topLeftThickness",
        "displayName": "SC.SplitView#topLeftThickness",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current thickness for the topLeftView",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "bottomRightThickness",
        "displayName": "SC.SplitView#bottomRightThickness",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current thickness for the bottomRightView",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "canCollapseView",
        "displayName": "SC.SplitView#canCollapseView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used by split divider to decide if the view can be collapsed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "thicknessForView",
        "displayName": "SC.SplitView#thicknessForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the thickness for a given view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view with the width."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view to get."
          }
        ]
      },
      {
        "name": "splitViewCanCollapse",
        "displayName": "SC.SplitView#splitViewCanCollapse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "(DELEGATE) Control whether a view can be collapsed.\n    \n    The default implemention returns NO if the split view property\n    canCollapseViews is set to NO or when the given view has\n    property canCollapse set to NO, otherwise it returns YES.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to allow collapse."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the split view"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view we want to collapse."
          }
        ]
      },
      {
        "name": "splitViewConstrainThickness",
        "displayName": "SC.SplitView#splitViewConstrainThickness",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "(DELEGATE) Constrain a views allowed thickness.\n    \n    The default implementation allows any thickness.  The view will\n    automatically constrain the view to not allow views to overflow the\n    visible area.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the allowed thickness"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the split view"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view in question"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "proposedThickness",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the proposed thickness."
          }
        ]
      },
      {
        "name": "adjustPositionForChild",
        "displayName": "SC.SplitView#adjustPositionForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to adjust the position of a child view, such as a divider.\n\nThe implementation for this may be overriden in the delegate method\nsplitViewAdjustPositionForChild.\n\nYou may use this method to automatically collapse the view by setting\nthe view's position to the position of the next or previous view (accessible\nvia the child's nextView and previousView properties and the \ngetPositionForChild method).",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The position to which the child was actually moved."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child to move."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "position",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The position to move the child to."
          }
        ]
      },
      {
        "name": "getPositionForChild",
        "displayName": "SC.SplitView#getPositionForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the position within the split view for a child view, \nsuch as a divider. This position is not necessarily identical\nto the view's actual layout 'left' or 'right'; that position could\nbe offset--for instance, to give a larger grab area to the divider.\n\nThe implementation for this is in the delegate method \nsplitViewGetPositionForChild.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The position."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child whose position to find."
          }
        ]
      },
      {
        "name": "splitViewLayoutChildren",
        "displayName": "SC.SplitView#splitViewLayoutChildren",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Lays out the children one next to each other or one on top of the other,\nbased on their sizes. It returns the total size.\n\nYou may override this method in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The total size of all the SplitView's children."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView whose children need layout."
          }
        ]
      },
      {
        "name": "splitViewResizeChildrenToFit",
        "displayName": "SC.SplitView#splitViewResizeChildrenToFit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to resize the child views of the split view to fit in the SplitView's\nframe. So it may proportionally adjust the child views, the current size of the\nSplitView's content is passed.\n\nYou may override this method in a delegate.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SC.SplitView whose children should be resized."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "contentSize",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The current not-yet-resized size of the SplitView's content."
          }
        ]
      },
      {
        "name": "splitViewShouldResizeChildToFit",
        "displayName": "SC.SplitView#splitViewShouldResizeChildToFit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Determines whether the SplitView should attempt to resize the specified\nchild view when the SplitView's size changes.\n\nYou may override this method in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView that owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child view."
          }
        ]
      },
      {
        "name": "splitViewAdjustPositionForChild",
        "displayName": "SC.SplitView#splitViewAdjustPositionForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to move a single child from its current position to\na desired position.\n\nYou may override the behavior on a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The final position of the child."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The splitView whose child should be moved."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child which should be moved."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "position",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The position to attempt to move the child to."
          }
        ]
      },
      {
        "name": "splitViewDividerBetween",
        "displayName": "SC.SplitView#splitViewDividerBetween",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a view instance to be used as a divider between two other views,\nor null if no divider should be used.\n\nThe value of the 'splitDividerView' property will be instantiated. The default\nvalue of this property is 'SC.SplitDividerView'. If the value is null or undefined,\nnull will be returned, and the SplitView will not automatically create dividers.\n\nYou may override this method in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view instance to use as a divider."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The split view that is hte parent of the\ntwo views."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The first view."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The second view."
          }
        ]
      },
      {
        "name": "splitViewGetPositionForChild",
        "displayName": "SC.SplitView#splitViewGetPositionForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current position for the specified child.\n\nYou may override this in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Number"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView which owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child."
          }
        ]
      },
      {
        "name": "splitViewSetPositionForChild",
        "displayName": "SC.SplitView#splitViewSetPositionForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the position for the specified child.\n\nYou may override this in a delegate.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView which owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "position",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The position to move the child to."
          }
        ]
      },
      {
        "name": "splitViewGetSizeForChild",
        "displayName": "SC.SplitView#splitViewGetSizeForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current size for the specified child.\n\nYou may override this in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Number"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView which owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child."
          }
        ]
      },
      {
        "name": "splitViewSetSizeForChild",
        "displayName": "SC.SplitView#splitViewSetSizeForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the size for the specified child.\n\nYou may override this in a delegate.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView which owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "position",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The size to give the child."
          }
        ]
      },
      {
        "name": "splitViewConstrainSizeForChild",
        "displayName": "SC.SplitView#splitViewConstrainSizeForChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the nearest valid size to a proposed size for a child view. \nBy default, constrains the size to the range specified by the child's \nminimumSize and maximumSize properties, and returns 0 if the child\nhas canCollapse set and the size is less than the child's collapseAtSize.\n\nYou may override this in a delegate.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Number"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.SplitView",
            "name": "splitView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SplitView which owns the child."
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The child."
          },
          {
            "title": "param",
            "type": "Number",
            "name": "position",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed size for the child."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "delegate",
        "displayName": "SC.SplitView#delegate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "delegate for controlling split view behavior.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layoutDirection",
        "displayName": "SC.SplitView#layoutDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Direction of layout.  Must be SC.LAYOUT_HORIZONTAL or SC.LAYOUT_VERTICAL.",
        "defaultValue": "SC.LAYOUT_HORIZONTAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canCollapseViews",
        "displayName": "SC.SplitView#canCollapseViews",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Set to NO to disable collapsing for all views.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultThickness",
        "displayName": "SC.SplitView#defaultThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Specifies how much space the fixed view should use when the view is setup.\n    A number less than one will be treated as a percentage, while a number \n    greater than one will be treated as a pixel width.\n    \n    The thickness will be applied to the opposite view defined by \n    autoresizeBehavior.",
        "defaultValue": "0.5",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "topLeftMinThickness",
        "displayName": "SC.SplitView#topLeftMinThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Sets minimum thickness of topLeft view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "topLeftMaxThickness",
        "displayName": "SC.SplitView#topLeftMaxThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Sets maximum thickness of topLeft view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bottomRightMinThickness",
        "displayName": "SC.SplitView#bottomRightMinThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Sets minimum thickness of bottomRight view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bottomRightMaxThickness",
        "displayName": "SC.SplitView#bottomRightMaxThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Sets maximum thickness of bottomRight view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dividerThickness",
        "displayName": "SC.SplitView#dividerThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Sets thickness of divider.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSplitView",
        "displayName": "SC.SplitView#isSplitView",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Yes, we're a split view.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "topLeftView",
        "displayName": "SC.SplitView#topLeftView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The view to use for the top left",
        "defaultValue": "SC.View",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dividerView",
        "displayName": "SC.SplitView#dividerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The view to use for the divider",
        "defaultValue": "SC.SplitDividerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bottomRightView",
        "displayName": "SC.SplitView#bottomRightView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The view to use for the bottom right",
        "defaultValue": "SC.View",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "thumbViewCursor",
        "displayName": "SC.SplitView#thumbViewCursor",
        "objectType": "property",
        "propertyType": "SC.Cursor",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The cursor thumb views should use for themselves",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "splitDividerView",
        "displayName": "SC.SplitView#splitDividerView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The type of view to create for the divider views. SC.SplitDividerView by default.\n\nShould be a class, not an instance.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldResizeChildrenToFit",
        "displayName": "SC.SplitView#shouldResizeChildrenToFit",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "Determines whether the SplitView should attempt to resize its\nchild views to fit within the SplitView's own frame (the default). \n\nIf NO, the SplitView will decide its own size based on its children.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "splitChildCursorStyle",
        "displayName": "SC.SplitView#splitChildCursorStyle",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SplitView",
        "overview": "The cursor of the child view currently being dragged (if any).\nThis allows the cursor to be used even if the user drags \"too far\",\npast the child's own boundaries.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31018,
    "name": "StackedView",
    "displayName": "SC.StackedView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/stacked.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 0.9",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CollectionView"
      }
    ],
    "overview": "A StackedView is a CollectionView that expects its content to use static \n  layout to stack vertically.  This type of collection view is not designed \n  for use with large size collections, but it can be very useful for \n  collections with complex displays and variable heights such as comments or\n  small notification queues.\n  \n  ## Static Layout\n  \n  This view makes no attempt to size or position your child views.  It assumes\n  you are using StaticLayout for your child views.  If you don't enable static\n  layout your views will probably overlay on top of eachother and will look \n  incorrect.\n\n  Note also that the default layout for this view set's the height to \"auto\".\n  This is usually the behavior you will want.",
    "methods": [
      {
        "name": "computeNowShowing",
        "displayName": "SC.StackedView#computeNowShowing",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Return full range of its indexes for nowShowing",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "full range of indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "rect",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateHeight",
        "displayName": "SC.StackedView#updateHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the height of the stacked view to reflect the current content of \n    the view.  This is called automatically whenever an item view is reloaded.\n    You can also call this method directly if the height of one of your views\n    has changed.\n    \n    The height will be recomputed based on the actual location and dimensions\n    of the last child view.\n    \n    Note that normally this method will defer actually updating the height\n    of the view until the end of the run loop.  You can force an immediate \n    update by passing YES to the \"immediately\" parameter.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.StackedView",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "immediately",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES to update immedately"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.StackedView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StackedView",
        "overview": "",
        "defaultValue": "['sc-stacked-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layout",
        "displayName": "SC.StackedView#layout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [
          "SC.View#layout"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StackedView",
        "overview": "Default layout for a stacked view will fill the parent view but auto-\n    adjust the height of the view.",
        "defaultValue": "`{ top: 0, left: 0, right: 0, height: 1 }`",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 50655,
    "name": "State",
    "displayName": "SC.State",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/statechart/system/state.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Michael Cohen",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Represents a state within a statechart. \n  \n  The statechart actively manages all states belonging to it. When a state is created, \n  it immediately registers itself with it parent states. \n  \n  You do not create an instance of a state itself. The statechart manager will go through its \n  state heirarchy and create the states itself.",
    "methods": [
      {
        "name": "plugin",
        "displayName": "SC.State.plugin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Use this when you want to plug-in a state into a statechart. This is beneficial\n  in cases where you split your statechart's states up into multiple files and\n  don't want to fuss with the sc_require construct.\n  \n  Example:\n  \n      MyApp.statechart = SC.Statechart.create({\n        rootState: SC.State.design({\n          initialSubstate: 'a',\n          a: SC.State.plugin('path.to.a.state.class'),\n          b: SC.State.plugin('path.to.another.state.class')\n        })\n      });\n    \n  You can also supply hashes the plugin feature in order to enhance a state or\n  implement required functionality:\n\n      SomeMixin = { ... };\n\n      stateA: SC.State.plugin('path.to.state', SomeMixin, { ... })",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} property path to a state class"
          },
          {
            "title": "param",
            "type": "",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash,...} Optional. Hash objects to be added to the created state"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 50853,
    "name": "StatechartManager",
    "displayName": "SC.StatechartManager",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/statechart/system/statechart.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Michael Cohen",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "The startchart manager mixin allows an object to be a statechart. By becoming a statechart, the\n  object can then be manage a set of its own states.\n  \n  This implemention of the statechart manager closely follows the concepts stated in D. Harel's \n  original paper \"Statecharts: A Visual Formalism For Complex Systems\" \n  (www.wisdom.weizmann.ac.il/~harel/papers/Statecharts.pdf). \n  \n  The statechart allows for complex state heircharies by nesting states within states, and \n  allows for state orthogonality based on the use of concurrent states.\n  \n  At minimum, a statechart must have one state: The root state. All other states in the statechart\n  are a decendents (substates) of the root state.\n  \n  The following example shows how states are nested within a statechart:\n  \n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        rootState: SC.State.design({\n          initialSubstate: 'stateA',\n\n          stateA: SC.State.design({\n            // ... can continue to nest further states\n          }),\n        \n          stateB: SC.State.design({\n            // ... can continue to nest further states\n          })\n        })\n      });\n  \n  Note how in the example above, the root state as an explicit initial substate to enter into. If no\n  initial substate is provided, then the statechart will default to the the state's first substate.\n  \n  You can also defined states without explicitly defining the root state. To do so, simply create properties\n  on your object that represents states. Upon initialization, a root state will be constructed automatically\n  by the mixin and make the states on the object substates of the root state. As an example:\n  \n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        initialState: 'stateA',\n\n        stateA: SC.State.design({\n          // ... can continue to nest further states\n        }),\n      \n        stateB: SC.State.design({\n          // ... can continue to nest further states\n        })\n      });\n  \n  If you liked to specify a class that should be used as the root state but using the above method to defined\n  states, you can set the rootStateExample property with a class that extends from SC.State. If the \n  rootStateExaple property is not explicitly assigned the then default class used will be SC.State.\n  \n  To provide your statechart with orthogonality, you use concurrent states. If you use concurrent states,\n  then your statechart will have multiple current states. That is because each concurrent state represents an\n  independent state structure from other concurrent states. The following example shows how to provide your\n  statechart with concurrent states:\n  \n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        rootState: SC.State.design({\n          substatesAreConcurrent: YES,\n\n          stateA: SC.State.design({\n            // ... can continue to nest further states\n          }),\n        \n          stateB: SC.State.design({\n            // ... can continue to nest further states\n          })\n        })\n      });\n  \n  Above, to indicate that a state's substates are concurrent, you just have to set the substatesAreConcurrent to \n  YES. Once done, then stateA and stateB will be independent of each other and each will manage their\n  own current substates. The root state will then have more then one current substate.\n  \n  To define concurrent states directly on the object without explicitly defining a root, you can do the \n  following:\n  \n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        statesAreConcurrent: YES,\n\n        stateA: SC.State.design({\n          // ... can continue to nest further states\n        }),\n    \n        stateB: SC.State.design({\n          // ... can continue to nest further states\n        })\n      });\n  \n  Remember that a startchart can have a mixture of nested and concurrent states in order for you to \n  create as complex of statecharts that suite your needs. Here is an example of a mixed state structure:\n  \n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        rootState: SC.State.design({\n          initialSubstate: 'stateA',\n\n          stateA: SC.State.design({\n            substatesAreConcurrent: YES,\n\n            stateM: SC.State.design({ ... })\n            stateN: SC.State.design({ ... })\n            stateO: SC.State.design({ ... })\n          }),\n        \n          stateB: SC.State.design({\n            initialSubstate: 'stateX',\n\n            stateX: SC.State.design({ ... })\n            stateY: SC.State.desgin({ ... })\n          })\n        })\n      });\n  \n  Depending on your needs, a statechart can have lots of states, which can become hard to manage all within\n  one file. To modularize your states and make them easier to manage and maintain, you can plug-in states\n  into other states. Let's say we are using the statechart in the last example above, and all the code is \n  within one file. We could update the code and split the logic across two or more files like so:\n\n      // state_a.js\n\n      MyApp.StateA = SC.State.extend({\n        substatesAreConcurrent: YES,\n\n        stateM: SC.State.design({ ... })\n        stateN: SC.State.design({ ... })\n        stateO: SC.State.design({ ... })\n      });\n\n      // state_b.js\n\n      MyApp.StateB = SC.State.extend({\n        substatesAreConcurrent: YES,\n\n        stateM: SC.State.design({ ... })\n        stateN: SC.State.design({ ... })\n        stateO: SC.State.design({ ... })\n      });\n\n      // statechart.js\n\n      MyApp.Statechart = SC.Object.extend(SC.StatechartManager, {\n        rootState: SC.State.design({\n          initialSubstate: 'stateA',\n          stateA: SC.State.plugin('MyApp.StateA'),\n          stateB: SC.State.plugin('MyApp.StateB')\n        })\n      });\n\n  Using state plug-in functionality is optional. If you use the plug-in feature you can break up your statechart\n  into as many files as you see fit.",
    "methods": [
      {
        "name": "initStatechart",
        "displayName": "SC.StatechartManager#initStatechart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Initializes the statechart. By initializing the statechart, it will create all the states and register\n    them with the statechart. Once complete, the statechart can be used to go to states and send events to.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createRootState",
        "displayName": "SC.StatechartManager#createRootState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will create a root state for the statechart",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "currentStates",
        "displayName": "SC.StatechartManager#currentStates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array of all the current states for this statechart",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the current states"
          }
        ],
        "params": []
      },
      {
        "name": "firstCurrentState",
        "displayName": "SC.StatechartManager#firstCurrentState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the first current state for this statechart.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.State",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "currentStateCount",
        "displayName": "SC.StatechartManager#currentStateCount",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the count of the current states for this statechart",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the count"
          }
        ],
        "params": []
      },
      {
        "name": "stateIsCurrentState",
        "displayName": "SC.StatechartManager#stateIsCurrentState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks if a given state is a current state of this statechart.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if the state is a current state, otherwise fals is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} the state to check"
          }
        ]
      },
      {
        "name": "enteredStates",
        "displayName": "SC.StatechartManager#enteredStates",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an array of all the states that are currently entered for\n    this statechart.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the currently entered states"
          }
        ],
        "params": []
      },
      {
        "name": "stateIsEntered",
        "displayName": "SC.StatechartManager#stateIsEntered",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks if a given state is a currently entered state of this statechart.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if the state is a currently entered state, otherwise false is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} the state to check"
          }
        ]
      },
      {
        "name": "doesContainState",
        "displayName": "SC.StatechartManager#doesContainState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Checks if the given value represents a state is this statechart",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if the state does belong ot the statechart, otherwise false is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} either a state object or the name of a state"
          }
        ]
      },
      {
        "name": "getState",
        "displayName": "SC.StatechartManager#getState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Gets a state from the statechart that matches the given value",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "State",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if a match then the matching state is returned, otherwise null is returned"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{State|String} either a state object of the name of a state"
          }
        ]
      },
      {
        "name": "gotoState",
        "displayName": "SC.StatechartManager#gotoState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When called, the statechart will proceed with making state transitions in the statechart starting from \n    a current state that meet the statechart conditions. When complete, some or all of the statechart's \n    current states will be changed, and all states that were part of the transition process will either \n    be exited or entered in a specific order.\n    \n    The state that is given to go to will not necessarily be a current state when the state transition process\n    is complete. The final state or states are dependent on factors such an initial substates, concurrent \n    states, and history states.\n    \n    Because the statechart can have one or more current states, it may be necessary to indicate what current state\n    to start from. If no current state to start from is provided, then the statechart will default to using\n    the first current state that it has; depending of the make up of the statechart (no concurrent state vs.\n    with concurrent states), the outcome may be unexpected. For a statechart with concurrent states, it is best\n    to provide a current state in which to start from.\n    \n    When using history states, the statechart will first make transitions to the given state and then use that\n    state's history state and recursively follow each history state's history state until there are no \n    more history states to follow. If the given state does not have a history state, then the statechart\n    will continue following state transition procedures.\n    \n    Method can be called in the following ways:\n    \n        // With one argument. \n        gotoState(<state>)\n      \n        // With two argument.\n        gotoState(<state>, <state | boolean | hash>)\n      \n        // With three argument.\n        gotoState(<state>, <state>, <boolean | hash>)\n        gotoState(<state>, <boolean>, <hash>)\n      \n        // With four argument.\n        gotoState(<state>, <state>, <boolean>, <hash>)\n    \n    where <state> is either a SC.State object or a string and <hash> is a regular JS hash object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} the state to go to (may not be the final state in the transition process)"
          },
          {
            "title": "param",
            "type": "",
            "name": "fromCurrentState",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} Optional. The current state to start the transition process from."
          },
          {
            "title": "param",
            "type": "",
            "name": "useHistory",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} Optional. Indicates whether to include using history states in the transition process"
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} Optional. A context object that will be passed to all exited and entered states"
          }
        ]
      },
      {
        "name": "gotoStateActive",
        "displayName": "SC.StatechartManager#gotoStateActive",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if the statechart is in an active goto state process",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "gotoStateSuspended",
        "displayName": "SC.StatechartManager#gotoStateSuspended",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates if the statechart is in an active goto state process\n    that has been suspended",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "resumeGotoState",
        "displayName": "SC.StatechartManager#resumeGotoState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resumes an active goto state transition process that has been suspended.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "exitState",
        "displayName": "SC.StatechartManager#exitState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "What will actually invoke a state's exitState method.\n  \n    Called during the state transition process whenever the gotoState method is\n    invoked.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State} the state whose enterState method is to be invoked"
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} a context hash object to provide the enterState method"
          }
        ]
      },
      {
        "name": "enterState",
        "displayName": "SC.StatechartManager#enterState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "What will actually invoke a state's enterState method.\n  \n    Called during the state transition process whenever the gotoState method is\n    invoked.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State} the state whose enterState method is to be invoked"
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Hash} a context hash object to provide the enterState method"
          }
        ]
      },
      {
        "name": "gotoHistoryState",
        "displayName": "SC.StatechartManager#gotoHistoryState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When called, the statechart will proceed to make transitions to the given state then follow that\n    state's history state. \n    \n    You can either go to a given state's history recursively or non-recursively. To go to a state's history\n    recursively means to following each history state's history state until no more history states can be\n    followed. Non-recursively means to just to the given state's history state but do not recusively follow\n    history states. If the given state does not have a history state, then the statechart will just follow\n    normal procedures when making state transitions.\n    \n    Because a statechart can have one or more current states, depending on if the statechart has any concurrent\n    states, it is optional to provided current state in which to start the state transition process from. If no\n    current state is provided, then the statechart will default to the first current state that it has; which, \n    depending on the make up of that statechart, can lead to unexpected outcomes. For a statechart with concurrent\n    states, it is best to explicitly supply a current state.\n    \n    Method can be called in the following ways:\n    \n        // With one arguments. \n        gotoHistorytate(<state>)\n      \n        // With two arguments. \n        gotoHistorytate(<state>, <state | boolean | hash>)\n      \n        // With three arguments.\n        gotoHistorytate(<state>, <state>, <boolean | hash>)\n        gotoHistorytate(<state>, <boolean>, <hash>)\n      \n        // With four argumetns\n        gotoHistorytate(<state>, <state>, <boolean>, <hash>)\n    \n    where <state> is either a SC.State object or a string and <hash> is a regular JS hash object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "state",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} the state to go to and follow it's history state"
          },
          {
            "title": "param",
            "type": "",
            "name": "fromCurrentState",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.State|String} Optional. the current state to start the state transition process from"
          },
          {
            "title": "param",
            "type": "",
            "name": "recursive",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} Optional. whether to follow history states recursively."
          },
          {
            "title": "param",
            "type": "",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "sendEvent",
        "displayName": "SC.StatechartManager#sendEvent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sends a given event to all the statechart's current states.\n    \n    If a current state does can not respond to the sent event, then the current state's parent state\n    will be tried. This process is recursively done until no more parent state can be tried.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Responder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the responder that handled it or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} name of the event"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} optional argument"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} optional argument"
          }
        ]
      },
      {
        "name": "respondsTo",
        "displayName": "SC.StatechartManager#respondsTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the property name to check"
          }
        ]
      },
      {
        "name": "tryToPerform",
        "displayName": "SC.StatechartManager#tryToPerform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled, NO if not handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} what to perform"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} Optional"
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} Optional"
          }
        ]
      },
      {
        "name": "invokeStateMethod",
        "displayName": "SC.StatechartManager#invokeStateMethod",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to invoke a method on current states. If the method can not be executed\n    on a current state, then the state's parent states will be tried in order\n    of closest ancestry.\n    \n    A few notes: \n    \n     1. Calling this is not the same as calling sendEvent or sendAction.\n        Rather, this should be seen as calling normal methods on a state that \n        will *not* call gotoState or gotoHistoryState.\n     2. A state will only ever be invoked once per call. So if there are two \n        or more current states that have the same parent state, then that parent \n        state will only be invoked once if none of the current states are able\n        to invoke the given method.\n    \n    When calling this method, you are able to supply zero ore more arguments\n    that can be pass onto the method called on the states. As an example\n    \n        invokeStateMethod('render', context, firstTime);\n    \n    The above call will invoke the render method on the current states\n    and supply the context and firstTime arguments to the method. \n    \n    Because a statechart can have more than one current state and the method \n    invoked may return a value, the addition of a callback function may be provided \n    in order to handle the returned value for each state. As an example, let's say\n    we want to call a calculate method on the current states where the method\n    will return a value when invoked. We can handle the returned values like so:\n    \n        invokeStateMethod('calculate', value, function(state, result) {\n          // .. handle the result returned from calculate that was invoked\n          //    on the given state\n        })\n    \n    If the method invoked does not return a value and a callback function is\n    supplied, then result value will simply be undefined. In all cases, if\n    a callback function is given, it must be the last value supplied to this\n    method.\n    \n    invokeStateMethod will return a value if only one state was able to have \n    the given method invoked on it, otherwise no value is returned.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a value if the number of current states is one, otherwise undefined\n             is returned. The value is the result of the method that got invoked\n             on a state."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} methodName a method name"
          },
          {
            "title": "param",
            "type": "",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object...} Optional. any additional arguments"
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} Optional. a callback function. Must be the last\n           value supplied if provided."
          }
        ]
      },
      {
        "name": "statechartLogTrace",
        "displayName": "SC.StatechartManager#statechartLogTrace",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a statechart trace message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "statechartLogError",
        "displayName": "SC.StatechartManager#statechartLogError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a statechart error message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "statechartLogWarning",
        "displayName": "SC.StatechartManager#statechartLogWarning",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to log a statechart warning message",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "msg",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "statechartLogPrefix",
        "displayName": "SC.StatechartManager#statechartLogPrefix",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "statechartIsInitialized",
        "displayName": "SC.StatechartManager#statechartIsInitialized",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates if this statechart has been initialized",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rootState",
        "displayName": "SC.StatechartManager#rootState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#rootStateExample",
          "#initialState",
          "#statesAreConcurrent"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "The root state of this statechart. All statecharts must have a root state.\n    \n    If this property is left unassigned then when the statechart is initialized\n    it will used the rootStateExample, initialState, and statesAreConcurrent\n    properties to construct a root state.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rootStateExample",
        "displayName": "SC.StatechartManager#rootStateExample",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#rootState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Represents the class used to construct a class that will be the root state for\n    this statechart. The class assigned must derive from SC.State. \n    \n    This property will only be used if the rootState property is not assigned.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "initialState",
        "displayName": "SC.StatechartManager#initialState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#rootState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates what state should be the intiail state of this statechart. The value\n    assigned must be the name of a property on this object that represents a state.\n    As well, the statesAreConcurrent must be set to NO.\n    \n    This property will only be used if the rootState property is not assigned.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "statesAreConcurrent",
        "displayName": "SC.StatechartManager#statesAreConcurrent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#rootState"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates if properties on this object representing states are concurrent to each other.\n    If YES then they are concurrent, otherwise they are not. If the YES, then the\n    initialState property must not be assigned.\n    \n    This property will only be used if the rootState property is not assigned.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "monitorIsActive",
        "displayName": "SC.StatechartManager#monitorIsActive",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates whether to use a monitor to monitor that statechart's activities. If true then\n    the monitor will be active, otherwise the monitor will not be used. Useful for debugging\n    purposes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "monitor",
        "displayName": "SC.StatechartManager#monitor",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "A statechart monitor that can be used to monitor this statechart. Useful for debugging purposes.\n    A monitor will only be used if monitorIsActive is true.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "statechartTraceKey",
        "displayName": "SC.StatechartManager#statechartTraceKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Used to specify what property (key) on the statechart should be used as the trace property. By\n    default the property is 'trace'.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "trace",
        "displayName": "SC.StatechartManager#trace",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#statechartTraceKey"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates whether to trace the statecharts activities. If true then the statechart will output\n    its activites to the browser's JS console. Useful for debugging purposes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "statechartOwnerKey",
        "displayName": "SC.StatechartManager#statechartOwnerKey",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Used to specify what property (key) on the statechart should be used as the owner property. By\n    default the property is 'owner'.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "owner",
        "displayName": "SC.StatechartManager#owner",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [
          "#statechartOwnerKey"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Sets who the owner is of this statechart. If null then the owner is this object otherwise\n    the owner is the assigned object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoInitStatechart",
        "displayName": "SC.StatechartManager#autoInitStatechart",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "Indicates if the statechart should be automatically initialized by this\n    object after it has been created. If YES then initStatechart will be\n    called automatically, otherwise it will not.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "suppressStatechartWarnings",
        "displayName": "SC.StatechartManager#suppressStatechartWarnings",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StatechartManager",
        "overview": "If yes, any warning messages produced by the statechart or any of its states will\n    not be logged, otherwise all warning messages will be logged. \n    \n    While designing and debugging your statechart, it's best to keep this value false.\n    In production you can then suppress the warning messages.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31038,
    "name": "StaticContentView",
    "displayName": "SC.StaticContentView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/static_content.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Tom Dale",
    "see": [],
    "since": "SproutCore 1.2",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "StaticContentView allows you to display arbitrary HTML content inside your\n  view hierarchy.\n\n  Normally, views in SproutCore are absolutely positioned. Their width and\n  height are either pre-determined, or specified relative to their enclosing\n  view. Occasionally, you may want to display content that is layed out by\n  the browser. For example, if you were writing a documentation browser, you\n  may want to display the table of contents as an SC.ListView, but the actual\n  pages as HTML content.\n\n  This class is most useful when placed inside a ScrollView.\n\n  To use it, simply set the `content` property to a string of the HTML you\n  would like to display.",
    "methods": [
      {
        "name": "contentLayoutDidChange",
        "displayName": "SC.StaticContentView#contentLayoutDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Because SproutCore has no way of knowing when the size of the content\n    inside a StaticContentView has changed, you should call this method\n    whenever an event that may change the size of the content occurs.\n\n    Note that if you change the content property, this will be recalculated\n    automatically.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.StaticContentView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StaticContentView",
        "overview": "",
        "defaultValue": "['sc-static-content-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.StaticContentView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StaticContentView",
        "overview": "",
        "defaultValue": "['content']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "content",
        "displayName": "SC.StaticContentView#content",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StaticContentView",
        "overview": "The HTML content you wish to display. This will be inserted directly into\n    the DOM, so ensure that any user-generated content has been escaped.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36933,
    "name": "StaticLayout",
    "displayName": "SC.StaticLayout",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/static_layout.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "SC.StaticLayout is now built in to SC.View.  You do not need to \n  apply this mixin to use static layout.  Just set useStaticLayout to YES.\n  \n  \n  \n  Normally, SproutCore views use absolute positioning to display themselves\n  on the screen.  While this is both the fastest and most efficient way to \n  display content in the web browser, sometimes your user interface might need\n  to take advantage of the more advanced \"flow\" layout offered by the browser\n  when you use static and relative positioning.\n  \n  This mixin can be added to a view class to enable the use of any kind of \n  static and relative browser positionining.  In exchange for using static\n  layout, you will lose a few features that are normally available on a view\n  class such as the 'frame' and 'clippingFrame' properties as well as \n  notifications when your view or parentView are resized.\n  \n  Normally, if you are allowing the browser to manage the size and positioning\n  of your view, these feature will not be useful to your code anyway.\n  \n  ## Using StaticLayout\n  \n  To enable static layout on your view, just include this mixin on the view.\n  SproutCore's builtin views that are capable of being used in static \n  layouts already incorporate this mixin.  Then set the \"useStaticLayout\" \n  property on your view class to YES.\n  \n  You can then use CSS or the render() method on your view to setup the \n  positioning on your view using any browser layout mechanism you want.\n  \n  ## Example\n  \n      // JavaScript\n    \n      MyApp.CommentView = SC.View.extend(SC.StaticLayout, {\n    \n        classNames: ['comment-view'],\n      \n        useStaticLayout: YES,\n\n        ...\n      });\n    \n      // CSS\n    \n      .comment-view {\n        display: block;\n        position: relative;\n      }",
    "methods": [],
    "properties": [
      {
        "name": "hasStaticLayout",
        "displayName": "SC.StaticLayout.hasStaticLayout",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.StaticLayout",
        "overview": "Walk like a duck.  Used to determine that this mixin has been applied.  \n    Note that a view that hasStaticLayout still may not actually use static\n    layout unless useStaticLayout is also set to YES.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 16089,
    "name": "Store",
    "displayName": "SC.Store",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/datastore/system/store.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The Store is where you can find all of your dataHashes. Stores can be \n  chained for editing purposes and committed back one chain level at a time \n  all the way back to a persistent data source.\n  \n  Every application you create should generally have its own store objects.\n  Once you create the store, you will rarely need to work with the store\n  directly except to retrieve records and collections.  \n  \n  Internally, the store will keep track of changes to your json data hashes\n  and manage syncing those changes with your data source.  A data source may\n  be a server, local storage, or any other persistent code.",
    "methods": [
      {
        "name": "from",
        "displayName": "SC.Store#from",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method.  Sets the current data source to the passed property.\n    This will also set the store property on the dataSource to the receiver.\n    \n    If you are using this from the `core.js` method of your app, you may need to\n    just pass a string naming your data source class.  If this is the case,\n    then your data source will be instantiated the first time it is requested.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DataSource|String",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the data source"
          }
        ]
      },
      {
        "name": "cascade",
        "displayName": "SC.Store#cascade",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method.  Creates a `CascadeDataSource` with the passed \n    data source arguments and sets the `CascadeDataSource` as the data source \n    for the receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.DataSource...",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more data source arguments"
          }
        ]
      },
      {
        "name": "chain",
        "displayName": "SC.Store#chain",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new nested store instance that can be used to buffer changes\n    until you are ready to commit them.  When you are ready to commit your \n    changes, call `commitChanges()` or `destroyChanges()` and then `destroy()`\n    when you are finished with the chained store altogether.\n    \n        store = MyApp.store.chain();\n        .. edit edit edit\n        store.commitChanges().destroy();",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.NestedStore",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new nested store chained to receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional attributes to set on new store"
          },
          {
            "title": "param",
            "type": "Class",
            "name": "newStoreClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional the class of the newly-created nested store (defaults to SC.NestedStore)"
          }
        ]
      },
      {
        "name": "hasNestedStore",
        "displayName": "SC.Store#hasNestedStore",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to determine if a nested store belongs directly or indirectly to the\n    receiver.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if belongs"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "store instance"
          }
        ]
      },
      {
        "name": "storeKeyEditState",
        "displayName": "SC.Store#storeKeyEditState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current edit status of a storekey.  May be one of\n    `EDITABLE` or `LOCKED`.  Used mostly for unit testing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "edit status"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "readDataHash",
        "displayName": "SC.Store#readDataHash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the data hash for the given `storeKey`.  This will also 'lock'\n    the hash so that further edits to the parent store will no \n    longer be reflected in this store until you reset.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "data hash or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to retrieve"
          }
        ]
      },
      {
        "name": "readEditableDataHash",
        "displayName": "SC.Store#readEditableDataHash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the data hash for the `storeKey`, cloned so that you can edit\n    the contents of the attributes if you like.  This will do the extra work\n    to make sure that you only clone the attributes one time.  \n    \n    If you use this method to modify data hash, be sure to call \n    `dataHashDidChange()` when you make edits to record the change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Hash",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the attributes hash"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key to retrieve"
          }
        ]
      },
      {
        "name": "readEditableProperty",
        "displayName": "SC.Store#readEditableProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads a property from the hash - cloning it if needed so you can modify \n    it independently of any parent store.  This method is really only well\n    tested for use with toMany relationships.  Although it is public you \n    generally should not call it directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "editable property value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey of data hash"
          },
          {
            "title": "param",
            "type": "String",
            "name": "propertyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "property to read"
          }
        ]
      },
      {
        "name": "writeDataHash",
        "displayName": "SC.Store#writeDataHash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Replaces the data hash for the `storeKey`.  This will lock the data hash\n    and mark them as cloned.  This will also call `dataHashDidChange()` for\n    you.\n    \n    Note that the hash you set here must be a different object from the \n    original data hash.  Once you make a change here, you must also call\n    `dataHashDidChange()` to register the changes.\n\n    If the data hash does not yet exist in the store, this method will add it.\n    Pass the optional status to edit the status as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key to write"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "hash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new hash"
          },
          {
            "title": "param",
            "type": "String",
            "name": "status",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new hash status"
          }
        ]
      },
      {
        "name": "removeDataHash",
        "displayName": "SC.Store#removeDataHash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the data hash from the store.  This does not imply a deletion of\n    the record.  You could be simply unloading the record.  Either way, \n    removing the dataHash will be synced back to the parent store but not to \n    the server.\n    \n    Note that you can optionally pass a new status to go along with this. If\n    you do not pass a status, it will change the status to `SC.RECORD_EMPTY`\n    (assuming you just unloaded the record).  If you are deleting the record\n    you may set it to `SC.Record.DESTROYED_CLEAN`.\n    \n    Be sure to also call `dataHashDidChange()` to register this change.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "String",
            "name": "status",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional new status"
          }
        ]
      },
      {
        "name": "readStatus",
        "displayName": "SC.Store#readStatus",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads the current status for a storeKey.  This will also lock the data \n    hash.  If no status is found, returns `SC.RECORD_EMPTY`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "status"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "peekStatus",
        "displayName": "SC.Store#peekStatus",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Reads the current status for the storeKey without actually locking the \n    record.  Usually you won't need to use this method.  It is mostly used\n    internally.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "status"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "writeStatus",
        "displayName": "SC.Store#writeStatus",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Writes the current status for a storeKey.  If the new status is \n    `SC.Record.ERROR`, you may also pass an optional error object.  Otherwise \n    this param is ignored.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          },
          {
            "title": "param",
            "type": "String",
            "name": "newStatus",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new status"
          },
          {
            "title": "param",
            "type": "SC.Error",
            "name": "error",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional error object"
          }
        ]
      },
      {
        "name": "dataHashDidChange",
        "displayName": "SC.Store#dataHashDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you modify some editable data hash to register\n    with the Store that the attribute values have actually changed.  This will\n    do the book-keeping necessary to track the change across stores including \n    managing locks.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number|Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more store keys that changed"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "rev",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional new revision number. normally leave null"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "statusOnly",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) YES if only status changed"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "that changed (optional)"
          }
        ]
      },
      {
        "name": "flush",
        "displayName": "SC.Store#flush",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Delivers any pending changes to materialized records.  Normally this \n    happens once, automatically, at the end of the RunLoop.  If you have\n    updated some records and need to update records immediately, however, \n    you may call this manually.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "reset",
        "displayName": "SC.Store#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets the store content.  This will clear all internal data for all\n    records, resetting them to an EMPTY state.  You generally do not want\n    to call this method yourself, though you may override it.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "find",
        "displayName": "SC.Store#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds a single record instance with the specified `recordType` and id or\n    an  array of records matching some query conditions.\n    \n    Finding a Single Record\n    ---\n    \n    If you pass a single `recordType` and id, this method will return an\n    actual record instance.  If the record has not been loaded into the store\n    yet, this method will ask the data source to retrieve it.  If no data\n    source indicates that it can retrieve the record, then this method will\n    return `null`.\n    \n    Note that if the record needs to be retrieved from the server, then the\n    record instance returned from this method will not have any data yet. \n    Instead it will have a status of `SC.Record.READY_LOADING`.  You can\n    monitor the status property to be notified when the record data is\n    available for you to use it.\n    \n    Find a Collection of Records\n    ---\n    \n    If you pass only a record type or a query object, you can instead find \n    all records matching a specified set of conditions.  When you call\n    `find()` in this way, it will create a query if needed and pass it to the\n    data source to fetch the results.\n    \n    If this is the first time you have fetched the query, then the store will\n    automatically ask the data source to fetch any records related to it as \n    well.  Otherwise you can refresh the query results at anytime by calling\n    `refresh()` on the returned `RecordArray`.\n\n    You can detect whether a RecordArray is fetching from the server by \n    checking its status.\n    \n    Examples\n    ---\n    \n    Finding a single record:\n    \n        MyApp.store.find(MyApp.Contact, \"23\"); // returns MyApp.Contact\n    \n    Finding all records of a particular type:\n    \n        MyApp.store.find(MyApp.Contact); // returns SC.RecordArray of contacts\n    \n    \n    Finding all contacts with first name John:\n    \n        var query = SC.Query.local(MyApp.Contact, \"firstName = %@\", \"John\");\n        MyApp.store.find(query); // returns SC.RecordArray of contacts\n    \n    Finding all contacts using a remote query:\n    \n        var query = SC.Query.remote(MyApp.Contact);\n        MyApp.store.find(query); // returns SC.RecordArray filled by server",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record instance or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|String",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the expected record type"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id to load"
          }
        ]
      },
      {
        "name": "recordArrayWillDestroy",
        "displayName": "SC.Store#recordArrayWillDestroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the record array just before it is destroyed.  This will \n    de-register it from receiving future notifications.\n\n    You should never call this method yourself.  Instead call `destroy()` on\n    the `RecordArray` directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RecordArray",
            "name": "recordArray",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record array"
          }
        ]
      },
      {
        "name": "refreshQuery",
        "displayName": "SC.Store#refreshQuery",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the record array whenever it needs the data source to refresh\n    its contents.  Nested stores will actually just pass this along to the\n    parent store.  The parent store will call `fetch()` on the data source.\n\n    You should never call this method yourself.  Instead call `refresh()` on\n    the `RecordArray` directly.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record array query to refresh"
          }
        ]
      },
      {
        "name": "recordsFor",
        "displayName": "SC.Store#recordsFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Array of all records currently in the store with the specified\n    type.  This method only reflects the actual records loaded into memory and\n    therefore is not usually needed at runtime.  However you will often use\n    this method for testing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array instance - usually SC.RecordArray"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type"
          }
        ]
      },
      {
        "name": "materializeRecord",
        "displayName": "SC.Store#materializeRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a `storeKey`, return a materialized record.  You will not usually\n    call this method yourself.  Instead it will used by other methods when\n    you find records by id or perform other searches.\n\n    If a `recordType` has been mapped to the storeKey, then a record instance\n    will be returned even if the data hash has not been requested yet.\n    \n    Each Store instance returns unique record instances for each storeKey.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Returns a record instance."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The storeKey for the dataHash."
          }
        ]
      },
      {
        "name": "createRecord",
        "displayName": "SC.Store#createRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new record instance with the passed `recordType` and `dataHash`.\n    You can also optionally specify an id or else it will be pulled from the \n    data hash.\n\n    Note that the record will not yet be saved back to the server.  To save\n    a record to the server, call `commitChanges()` on the store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Returns the created record"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record class to use on creation"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the JSON attributes to assign to the hash."
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) id to assign to record"
          }
        ]
      },
      {
        "name": "createRecords",
        "displayName": "SC.Store#createRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates an array of new records.  You must pass an array of `dataHash`es \n    plus a `recordType` and, optionally, an array of ids.  This will create an\n    array of record instances with the same record type.\n    \n    If you need to instead create a bunch of records with different data types\n    you can instead pass an array of `recordType`s, one for each data hash.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of materialized record instances."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "dataHashes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of data hashes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) ids to assign to records"
          }
        ]
      },
      {
        "name": "unloadRecord",
        "displayName": "SC.Store#unloadRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Unloads a record, removing the data hash from the store.  If you try to \n    unload a record that is already destroyed then this method will have no effect.  \n    If you unload a record that does not exist or an error then an exception \n    will be raised.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the recordType"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) if passed, ignores recordType and id"
          },
          {
            "title": "param",
            "type": "",
            "name": "newStatus",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "unloadRecords",
        "displayName": "SC.Store#unloadRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Unloads a group of records.  If you have a set of record ids, unloading\n    them this way can be faster than retrieving each record and unloading \n    it individually.\n\n    You can pass either a single `recordType` or an array of `recordType`s. If\n    you pass a single `recordType`, then the record type will be used for each\n    record.  If you pass an array, then each id must have a matching record \n    type in the array.\n\n    You can optionally pass an array of `storeKey`s instead of the `recordType`\n    and ids.  In this case the first two parameters will be ignored.  This\n    is usually only used by low-level internal methods.  You will not usually\n    unload records this way.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) ids to unload"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to unload"
          },
          {
            "title": "param",
            "type": "",
            "name": "newStatus",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "destroyRecord",
        "displayName": "SC.Store#destroyRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys a record, removing the data hash from the store and adding the\n    record to the destroyed changelog.  If you try to destroy a record that is \n    already destroyed then this method will have no effect.  If you destroy a \n    record that does not exist or an error then an exception will be raised.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the recordType"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) if passed, ignores recordType and id"
          }
        ]
      },
      {
        "name": "destroyRecords",
        "displayName": "SC.Store#destroyRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys a group of records.  If you have a set of record ids, destroying\n    them this way can be faster than retrieving each record and destroying \n    it individually.\n    \n    You can pass either a single `recordType` or an array of `recordType`s. If\n    you pass a single `recordType`, then the record type will be used for each\n    record.  If you pass an array, then each id must have a matching record \n    type in the array.\n\n    You can optionally pass an array of `storeKey`s instead of the `recordType`\n    and ids.  In this case the first two parameters will be ignored.  This\n    is usually only used by low-level internal methods.  You will not usually\n    destroy records this way.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to destroy"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to destroy"
          }
        ]
      },
      {
        "name": "registerChildToParent",
        "displayName": "SC.Store#registerChildToParent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "register a Child Record to the parent",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "parentStoreKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "childStoreKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "materializeParentRecord",
        "displayName": "SC.Store#materializeParentRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "materialize the parent when passing in a store key for the child",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "childStoreKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "parentStoreKeyExists",
        "displayName": "SC.Store#parentStoreKeyExists",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "function for retrieving a parent record key",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The store key of the parent"
          }
        ]
      },
      {
        "name": "recordDidChange",
        "displayName": "SC.Store#recordDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Notes that the data for the given record id has changed.  The record will\n    be committed to the server the next time you commit the root store.  Only\n    call this method on a record in a READY state of some type.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the recordType"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) if passed, ignores recordType and id"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "that changed (optional)"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "if",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the change is to statusOnly (optional)"
          }
        ]
      },
      {
        "name": "recordsDidChange",
        "displayName": "SC.Store#recordsDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Mark a group of records as dirty.  The records will be committed to the\n    server the next time you commit changes on the root store.  If you have a \n    set of record ids, marking them dirty this way can be faster than \n    retrieving each record and destroying it individually.\n    \n    You can pass either a single `recordType` or an array of `recordType`s. If\n    you pass a single `recordType`, then the record type will be used for each\n    record.  If you pass an array, then each id must have a matching record \n    type in the array.\n\n    You can optionally pass an array of `storeKey`s instead of the `recordType`\n    and ids.  In this case the first two parameters will be ignored.  This\n    is usually only used by low-level internal methods.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to destroy"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to destroy"
          }
        ]
      },
      {
        "name": "retrieveRecords",
        "displayName": "SC.Store#retrieveRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves a set of records from the server.  If the records has \n    already been loaded in the store, then this method will simply return.  \n    Otherwise if your store has a `dataSource`, this will call the \n    `dataSource` to retrieve the record.  Generally you will not need to \n    call this method yourself. Instead you can just use `find()`.\n    \n    This will not actually create a record instance but it will initiate a \n    load of the record from the server.  You can subsequently get a record \n    instance itself using `materializeRecord()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKeys to be retrieved"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to retrieve"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to retrieve"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "isRefresh",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Function|Array",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function or array of functions"
          }
        ]
      },
      {
        "name": "retrieveRecord",
        "displayName": "SC.Store#retrieveRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Retrieves a record from the server.  If the record has already been loaded\n    in the store, then this method will simply return.  Otherwise if your \n    store has a `dataSource`, this will call the `dataSource` to retrieve the \n    record.  Generally you will not need to call this method yourself.  \n    Instead you can just use `find()`.\n    \n    This will not actually create a record instance but it will initiate a \n    load of the record from the server.  You can subsequently get a record \n    instance itself using `materializeRecord()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey that was retrieved"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "id to retrieve"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store key"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "isRefresh",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional)"
          }
        ]
      },
      {
        "name": "refreshRecord",
        "displayName": "SC.Store#refreshRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Refreshes a record from the server.  If the record has already been loaded\n    in the store, then this method will request a refresh from the\n    `dataSource`. Otherwise it will attempt to retrieve the record.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the retrieval was a success."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to id of the record to load"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the expected record type"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) optional store key"
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) when refresh complets"
          }
        ]
      },
      {
        "name": "refreshRecords",
        "displayName": "SC.Store#refreshRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Refreshes a set of records from the server.  If the records has already been loaded\n    in the store, then this method will request a refresh from the\n    `dataSource`. Otherwise it will attempt to retrieve them.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the retrieval was a success."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to destroy"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to destroy"
          },
          {
            "title": "param",
            "type": "Function",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) when refresh complets"
          }
        ]
      },
      {
        "name": "commitRecords",
        "displayName": "SC.Store#commitRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Commits the passed store keys or ids. If no `storeKey`s are given,\n    it will commit any records in the changelog. \n    \n    Based on the current state of the record, this will ask the data \n    source to perform the appropriate actions\n    on the store keys.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if the action was succesful."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the expected record types (SC.Record)"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to commit"
          },
          {
            "title": "param",
            "type": "SC.Set",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to commit"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additional parameters to pass along to the\n      data source"
          },
          {
            "title": "param",
            "type": "Function|Array",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function or array of callbacks"
          }
        ]
      },
      {
        "name": "commitRecord",
        "displayName": "SC.Store#commitRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Commits the passed store key or id.  Based on the current state of the \n    record, this will ask the data source to perform the appropriate action\n    on the store key.\n    \n    You have to pass either the id or the storeKey otherwise it will return \n    NO.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if the action was successful."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the expected record type"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id of the record to commit"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the storeKey of the record to commit"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional additonal params that will passed down\n      to the data source"
          },
          {
            "title": "param",
            "type": "Function|Array",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": "function or array of functions"
          }
        ]
      },
      {
        "name": "cancelRecords",
        "displayName": "SC.Store#cancelRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cancels an inflight request for the passed records.  Depending on the \n    server implementation, this could cancel an entire request, causing \n    other records to also transition their current state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to destroy"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to destroy"
          }
        ]
      },
      {
        "name": "cancelRecord",
        "displayName": "SC.Store#cancelRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Cancels an inflight request for the passed record.  Depending on the \n    server implementation, this could cancel an entire request, causing \n    other records to also transition their current state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record|Array",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "class or array of classes"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "ids to destroy"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "(optional) store keys to destroy"
          }
        ]
      },
      {
        "name": "loadRecord",
        "displayName": "SC.Store#loadRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method can be called by the store or other parts of your \n    application to load a record into the store.  This method will take a\n    recordType and a data hashes and either add or update the \n    record in the store. \n    \n    The loaded records will be in an `SC.Record.READY_CLEAN` state, indicating\n    they were loaded from the data source and do not need to be committed \n    back before changing.\n    \n    This method will check the state of the storeKey and call either \n    `pushRetrieve()` or `dataSourceDidComplete()`.  The standard state constraints \n    for these methods apply here.\n    \n    The return value will be the `storeKey` used for the push.  This is often\n    convenient to pass into `loadQuery()`, if you are fetching a remote query.\n    \n    If you are upgrading from a pre SproutCore 1.0 application, this method \n    is the closest to the old `updateRecord()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "store keys assigned to these id"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to update"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional.  if not passed lookup on the hash"
          }
        ]
      },
      {
        "name": "loadRecords",
        "displayName": "SC.Store#loadRecords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method can be called by the store or other parts of your \n    application to load records into the store.  This method will take a\n    recordType and an array of data hashes and either add or update the \n    record in the store. \n    \n    The loaded records will be in an `SC.Record.READY_CLEAN` state, indicating\n    they were loaded from the data source and do not need to be committed \n    back before changing.\n    \n    This method will check the state of each storeKey and call either \n    `pushRetrieve()` or `dataSourceDidComplete()`.  The standard state \n    constraints for these methods apply here.\n    \n    The return value will be the storeKeys used for each push.  This is often\n    convenient to pass into `loadQuery()`, if you are fetching a remote query.\n    \n    If you are upgrading from a pre SproutCore 1.0 application, this method \n    is the closest to the old `updateRecords()`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "store keys assigned to these ids"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordTypes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type or array of record types"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "dataHashes",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of data hashes to update"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "ids",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional array of ids.  if not passed lookup on hashes"
          }
        ]
      },
      {
        "name": "readError",
        "displayName": "SC.Store#readError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the `SC.Error` object associated with a specific record.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Error or undefined if no error associated with the record."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The store key of the record."
          }
        ]
      },
      {
        "name": "readQueryError",
        "displayName": "SC.Store#readQueryError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the `SC.Error` object associated with a specific query.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.Error or undefined if no error associated with the query."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SC.Query with which the error is associated."
          }
        ]
      },
      {
        "name": "dataSourceDidCancel",
        "displayName": "SC.Store#dataSourceDidCancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a `dataSource` when it cancels an inflight operation on a \n    record.  This will transition the record back to it non-inflight state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record store key to cancel"
          }
        ]
      },
      {
        "name": "dataSourceDidComplete",
        "displayName": "SC.Store#dataSourceDidComplete",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a data source when it creates or commits a record.  Passing an\n    optional id will remap the `storeKey` to the new record id.  This is \n    required when you commit a record that does not have an id yet.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record store key to change to READY_CLEAN state"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional data hash to replace current hash"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "newId",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional new id to replace the old one"
          }
        ]
      },
      {
        "name": "dataSourceDidDestroy",
        "displayName": "SC.Store#dataSourceDidDestroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a data source when it has destroyed a record.  This will\n    transition the record to the proper state.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record store key to cancel"
          }
        ]
      },
      {
        "name": "dataSourceDidError",
        "displayName": "SC.Store#dataSourceDidError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the passed record into an error object.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record store key to error"
          },
          {
            "title": "param",
            "type": "SC.Error",
            "name": "error",
            "isOptional": false,
            "defaultValue": "",
            "desc": "[optional] an SC.Error instance to associate with storeKey"
          }
        ]
      },
      {
        "name": "pushRetrieve",
        "displayName": "SC.Store#pushRetrieve",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call by the data source whenever you want to push new data out of band \n    into the store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number|Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey if push was allowed, NO if not"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the SC.Record subclass"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id or null"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "dataHash",
            "isOptional": false,
            "defaultValue": "",
            "desc": "data hash to load"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional store key."
          }
        ]
      },
      {
        "name": "pushDestroy",
        "displayName": "SC.Store#pushDestroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call by the data source whenever you want to push a deletion into the \n    store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number|Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey if push was allowed, NO if not"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the SC.Record subclass"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id or null"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional store key."
          }
        ]
      },
      {
        "name": "pushError",
        "displayName": "SC.Store#pushError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call by the data source whenever you want to push an error into the \n    store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number|Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey if push was allowed, NO if not"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the SC.Record subclass"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record id or null"
          },
          {
            "title": "param",
            "type": "SC.Error",
            "name": "error",
            "isOptional": false,
            "defaultValue": "",
            "desc": "[optional] an SC.Error instance to associate with id or storeKey"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional store key."
          }
        ]
      },
      {
        "name": "loadQueryResults",
        "displayName": "SC.Store#loadQueryResults",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Sets the passed array of storeKeys as the new data for the query.  You\n    can call this at any time for a remote query to update its content.  If\n    you want to use incremental loading, then pass a `SparseArray` object.\n    \n    If the query you pass is not a REMOTE query, then this method will raise\n    an exception.  This will also implicitly transition the query state to \n    `SC.Record.READY`.\n    \n    If you called `loadRecords()` before to load the actual content, you can\n    call this method with the return value of that method to actually set the\n    storeKeys on the result.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query you are loading.  must be remote."
          },
          {
            "title": "param",
            "type": "SC.Array",
            "name": "storeKeys",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of store keys"
          }
        ]
      },
      {
        "name": "dataSourceDidFetchQuery",
        "displayName": "SC.Store#dataSourceDidFetchQuery",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by your data source whenever you finish fetching the results of a \n    query.  This will put the query into a READY state if it was loading.\n    \n    Note that if the query is a REMOTE query, then you must separately load \n    the results into the query using `loadQueryResults()`.  If the query is \n    LOCAL, then the query will update automatically with any new records you \n    added to the store.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query you fetched"
          }
        ]
      },
      {
        "name": "dataSourceDidCancelQuery",
        "displayName": "SC.Store#dataSourceDidCancelQuery",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by your data source if it cancels fetching the results of a query.\n    This will put any RecordArray's back into its original state (READY or\n    EMPTY).",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query you cancelled"
          }
        ]
      },
      {
        "name": "dataSourceDidErrorQuery",
        "displayName": "SC.Store#dataSourceDidErrorQuery",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by your data source if it encountered an error loading the query.\n    This will put the query into an error state until you try to refresh it\n    again.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Query",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the query with the error"
          },
          {
            "title": "param",
            "type": "SC.Error",
            "name": "error",
            "isOptional": false,
            "defaultValue": "",
            "desc": "[optional] an SC.Error instance to associate with query"
          }
        ]
      },
      {
        "name": "idFor",
        "displayName": "SC.Store#idFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a `storeKey`, return the `primaryKey`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "primaryKey value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "recordTypeFor",
        "displayName": "SC.Store#recordTypeFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a storeKey, return the recordType.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Record",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "record instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "storeKeyFor",
        "displayName": "SC.Store#storeKeyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a `recordType` and `primaryKey`, find the `storeKey`. If the\n    `primaryKey` has not been assigned a `storeKey` yet, it will be added.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "storeKey"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type"
          },
          {
            "title": "param",
            "type": "String",
            "name": "primaryKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the primary key"
          }
        ]
      },
      {
        "name": "storeKeyExists",
        "displayName": "SC.Store#storeKeyExists",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a `primaryKey` value for the record, returns the associated\n    `storeKey`.  As opposed to `storeKeyFor()` however, this method\n    will **NOT** generate a new `storeKey` but returned `undefined`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a storeKey."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the record type"
          },
          {
            "title": "param",
            "type": "String",
            "name": "primaryKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the primary key"
          }
        ]
      },
      {
        "name": "storeKeysFor",
        "displayName": "SC.Store#storeKeysFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds all `storeKey`s of a certain record type in this store\n    and returns an array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "set of storeKeys"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "storeKeys",
        "displayName": "SC.Store#storeKeys",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds all `storeKey`s in this store\n    and returns an array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "set of storeKeys"
          }
        ],
        "params": []
      },
      {
        "name": "statusString",
        "displayName": "SC.Store#statusString",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns string representation of a `storeKey`, with status.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "generateStoreKey",
        "displayName": "SC.Store#generateStoreKey",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a new store key for use.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "queryFor",
        "displayName": "SC.Store#queryFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Given a `storeKey`, returns the query object associated with the key.  If\n    no query is associated with the `storeKey`, returns `null`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Query",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "query query object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          }
        ]
      },
      {
        "name": "replaceIdFor",
        "displayName": "SC.Store#replaceIdFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Swaps the `primaryKey` mapped to the given storeKey with the new \n    `primaryKey`.  If the `storeKey` is not currently associated with a record\n    this will raise an exception.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the existing store key"
          },
          {
            "title": "param",
            "type": "String",
            "name": "newPrimaryKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new primary key"
          }
        ]
      },
      {
        "name": "replaceRecordTypeFor",
        "displayName": "SC.Store#replaceRecordTypeFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Swaps the `recordType` recorded for a given `storeKey`.  Normally you\n    should not call this method directly as it can damage the store behavior.\n    This method is used by other store methods to set the `recordType` for a \n    `storeKey`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Store",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "reciever"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Integer",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the store key"
          },
          {
            "title": "param",
            "type": "SC.Record",
            "name": "recordType",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a record class"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.Store#name",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "An (optional) name of the store, which can be useful during debugging,\n    especially if you have multiple nested stores.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nestedStores",
        "displayName": "SC.Store#nestedStores",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "An array of all the chained stores that current rely on the receiver \n    store.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "dataSource",
        "displayName": "SC.Store#dataSource",
        "objectType": "property",
        "propertyType": "SC.DataSource",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "The data source is the persistent storage that will provide data to the\n    store and save changes.  You normally will set your data source when you\n    first create your store in your application.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isNested",
        "displayName": "SC.Store#isNested",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "This type of store is not nested.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "commitRecordsAutomatically",
        "displayName": "SC.Store#commitRecordsAutomatically",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "This type of store is not nested.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "editables",
        "displayName": "SC.Store#editables",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Array indicates whether a data hash is possibly in use by an external \n    record for editing.  If a data hash is editable then it may be modified\n    at any time and therefore chained stores may need to clone the \n    attributes before keeping a copy of them.\n  \n    Note that this is kept as an array because it will be stored as a dense \n    array on some browsers, making it faster.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "changelog",
        "displayName": "SC.Store#changelog",
        "objectType": "property",
        "propertyType": "SC.Set",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "A set of storeKeys that need to be committed back to the data source. If\n    you call `commitRecords()` without passing any other parameters, the keys\n    in this set will be committed instead.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "recordErrors",
        "displayName": "SC.Store#recordErrors",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "An array of `SC.Error` objects associated with individual records in the\n    store (indexed by store keys).\n    \n    Errors passed form the data source in the call to dataSourceDidError() are\n    stored here.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "queryErrors",
        "displayName": "SC.Store#queryErrors",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "A hash of `SC.Error` objects associated with queries (indexed by the GUID\n    of the query).\n    \n    Errors passed from the data source in the call to\n    `dataSourceDidErrorQuery()` are stored here.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "childRecords",
        "displayName": "SC.Store#childRecords",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "A hash of child Records and there immediate parents",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parentRecords",
        "displayName": "SC.Store#parentRecords",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "A hash of parent records with registered children",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "CHAIN_CONFLICT_ERROR",
        "displayName": "SC.Store#CHAIN_CONFLICT_ERROR",
        "objectType": "property",
        "propertyType": "Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Standard error raised if you try to commit changes from a nested store\n    and there is a conflict.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NO_PARENT_STORE_ERROR",
        "displayName": "SC.Store#NO_PARENT_STORE_ERROR",
        "objectType": "property",
        "propertyType": "Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Standard error if you try to perform an operation on a nested store \n    without a parent.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NESTED_STORE_UNSUPPORTED_ERROR",
        "displayName": "SC.Store#NESTED_STORE_UNSUPPORTED_ERROR",
        "objectType": "property",
        "propertyType": "Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Standard error if you try to perform an operation on a nested store that\n    is only supported in root stores.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NESTED_STORE_RETRIEVE_DIRTY_ERROR",
        "displayName": "SC.Store#NESTED_STORE_RETRIEVE_DIRTY_ERROR",
        "objectType": "property",
        "propertyType": "Error",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Standard error if you try to retrieve a record in a nested store that is\n    dirty.  (This is allowed on the main store, but not in nested stores.)",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "EDITABLE",
        "displayName": "SC.Store#EDITABLE",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Data hash state indicates the data hash is currently editable",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "LOCKED",
        "displayName": "SC.Store#LOCKED",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Data hash state indicates the hash no longer tracks changes from a \n    parent store, but it is not editable.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "INHERITED",
        "displayName": "SC.Store#INHERITED",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Store",
        "overview": "Data hash state indicates the hash is tracking changes from the parent\n    store and is not editable.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 48609,
    "name": "String",
    "displayName": "SC.String",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/system/string.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Implements support methods useful when working with strings in SproutCore\n  applications.",
    "methods": [
      {
        "name": "capitalizeEach",
        "displayName": "SC.String.capitalizeEach",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Capitalizes every word in a string.  Unlike titleize, spaces or dashes\n    will remain in-tact.\n\n    ## Examples\n\n      - **Input String** -> **Output String**\n      - my favorite items -> My Favorite Items\n      - css-class-name -> Css-Class-Name\n      - action_name -> Action_Name\n      - innerHTML -> InnerHTML",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "capitalized string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to capitalize each letter2"
          }
        ]
      },
      {
        "name": "titleize",
        "displayName": "SC.String.titleize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a string to a title.  This will decamelize the string, convert\n    separators to spaces and capitalize every word.\n\n    ## Examples\n\n      - **Input String** -> **Output String**\n      - my favorite items -> My Favorite Items\n      - css-class-name -> Css Class Name\n      - action_name -> Action Name\n      - innerHTML -> Inner HTML",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "titleized string."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to titleize"
          }
        ]
      },
      {
        "name": "classify",
        "displayName": "SC.String.classify",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the string into a class name.  This method will camelize your\n    string and then capitalize the first letter.\n\n    ## Examples\n\n      - **Input String** -> **Output String**\n      - my favorite items -> MyFavoriteItems\n      - css-class-name -> CssClassName\n      - action_name -> ActionName\n      - innerHTML -> InnerHtml",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to classify"
          }
        ]
      },
      {
        "name": "humanize",
        "displayName": "SC.String.humanize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a camelized string or a string with dashes or underscores into\n    a string with components separated by spaces.\n\n    ## Examples\n\n      - **Input String** -> **Output String**\n      - my favorite items -> my favorite items\n      - css-class-name -> css class name\n      - action_name -> action name\n      - innerHTML -> inner html",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the humanized string."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to humanize"
          }
        ]
      },
      {
        "name": "escapeForRegExp",
        "displayName": "SC.String.escapeForRegExp",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Will escape a string so it can be securely used in a regular expression.\n\n    Useful when you need to use user input in a regular expression without\n    having to worry about it breaking code if any reserved regular expression\n    characters are used.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the string properly escaped for use in a regexp."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to escape for regex"
          }
        ]
      },
      {
        "name": "removeDiacritics",
        "displayName": "SC.String.removeDiacritics",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes any standard diacritic characters from the string. So, for\n    example, all instances of 'Ã' will become 'A'.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the modified string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to remove diacritics from"
          }
        ]
      },
      {
        "name": "pluralize",
        "displayName": "SC.String.pluralize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a word into its plural form.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the plural form of the string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to pluralize"
          }
        ]
      },
      {
        "name": "singularize",
        "displayName": "SC.String.singularize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a word into its singular form.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the singular form of the string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "String to singularize"
          }
        ]
      },
      {
        "name": "fmt",
        "displayName": "SC.String#fmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Apply formatting options to the string.  This will look for occurrences\n    of %@ in your string and substitute them with the arguments you pass into\n    this method.  If you want to control the specific order of replacement,\n    you can add a number after the key as well to indicate which argument\n    you want to insert.\n\n    Ordered insertions are most useful when building loc strings where values\n    you need to insert may appear in different orders.\n\n    Examples\n    -----\n\n        \"Hello %@ %@\".fmt('John', 'Doe') => \"Hello John Doe\"\n        \"Hello %@2, %@1\".fmt('John', 'Doe') => \"Hello Doe, John\"",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "formatted string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object...",
            "name": "args",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional arguments"
          },
          {
            "title": "param",
            "type": "",
            "name": "formats",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "w",
        "displayName": "SC.String#w",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Splits the string into words, separated by spaces. Empty strings are\n    removed from the results.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "An array of non-empty strings"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 36286,
    "name": "SwipeGesture",
    "displayName": "SC.SwipeGesture",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/gestures/swipe.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Gesture"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.SwipeGesture#name",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "",
        "defaultValue": "\"swipe\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMultitouch",
        "displayName": "SC.SwipeGesture#acceptsMultitouch",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "direction",
        "displayName": "SC.SwipeGesture#direction",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "",
        "defaultValue": "SC.SWIPE_HORIZONTAL",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "currentDirection",
        "displayName": "SC.SwipeGesture#currentDirection",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "Will be populated with the current direction of the swipe once\n    one has been determined.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "startDistance",
        "displayName": "SC.SwipeGesture#startDistance",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "",
        "defaultValue": "5",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "swipeDistance",
        "displayName": "SC.SwipeGesture#swipeDistance",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "",
        "defaultValue": "40",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tolerance",
        "displayName": "SC.SwipeGesture#tolerance",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.SwipeGesture",
        "overview": "Amount of distance in the other direction to consider it a swipe",
        "defaultValue": "0.5",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 52708,
    "name": "TableColumn",
    "displayName": "SC.TableColumn",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/table/system/table_column.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "An abstract object that manages the state of the columns behind a\n  `SC.TableView`.",
    "methods": [
      {
        "name": "rowOffsetForContentIndex",
        "displayName": "SC.TableColumn#rowOffsetForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the top offset for the specified content index.  This will take\n    into account any custom row heights and group views.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the row offset in pixels"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the content index"
          }
        ]
      },
      {
        "name": "rowHeightForContentIndex",
        "displayName": "SC.TableColumn#rowHeightForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the row height for the specified content index.  This will take\n    into account custom row heights and group rows.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the row height in pixels"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "content index"
          }
        ]
      },
      {
        "name": "layoutForContentIndex",
        "displayName": "SC.TableColumn#layoutForContentIndex",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the layout for a specific content index by combining the current\n    row heights.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "content index"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "key",
        "displayName": "SC.TableColumn#key",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The internal name of the column. `SC.TableRowView` objects expect their\n    `content` to be an object with keys corresponding to the column's keys.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "title",
        "displayName": "SC.TableColumn#title",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The display name of the column. Will appear in the table header for this\n    column.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "width",
        "displayName": "SC.TableColumn#width",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Width of the column.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minWidth",
        "displayName": "SC.TableColumn#minWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "How narrow the column will allow itself to be.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maxWidth",
        "displayName": "SC.TableColumn#maxWidth",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "How wide the column will allow itself to be.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isFlexible",
        "displayName": "SC.TableColumn#isFlexible",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Whether the column gets wider or narrower based on the size of the\n    table. Only one column in a TableView is allowed to be flexible.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isReorderable",
        "displayName": "SC.TableColumn#isReorderable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Whether the column can be drag-reordered.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isSortable",
        "displayName": "SC.TableColumn#isSortable",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Whether the column can be sorted.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "icon",
        "displayName": "SC.TableColumn#icon",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Reference to the URL for this column's icon. If `null`, there is no\n    icon associated with the column.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sortState",
        "displayName": "SC.TableColumn#sortState",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The sort state of this particular column. Can be one of\n    SC.SORT_ASCENDING, SC.SORT_DESCENDING, or `null`. For instance, if\n    SC.SORT_ASCENDING, means that the table is being sorted on this column\n    in the ascending direction. If `null`, means that the table is sorted\n    on another column.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tableContent",
        "displayName": "SC.TableColumn#tableContent",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The content property of the controlling SC.TableView. This is needed\n    because the SC.TableHeader views use this class to find out how to\n    render table content (when necessary).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "columns",
        "displayName": "SC.TableColumn#columns",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "A collection of `SC.TableColumn` objects. Modify the array to adjust the\n    columns.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "flexibleColumn",
        "displayName": "SC.TableColumn#flexibleColumn",
        "objectType": "property",
        "propertyType": "SC.TableColumn",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Which column will alter its size so that the columns fill the available\n    width of the table. If `null`, the last column will stretch.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "sortedColumn",
        "displayName": "SC.TableColumn#sortedColumn",
        "objectType": "property",
        "propertyType": "SC.TableColumn",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Which column is currently the \"active\" column for sorting purposes.\n    Doesn't say anything about sorting direction; for that, read the\n    `sortState` property of the sorted column.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasTableHead",
        "displayName": "SC.TableColumn#hasTableHead",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "if YES, the table view will generate a head row at the top of the table\n    view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tableHeadView",
        "displayName": "SC.TableColumn#tableHeadView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The view that serves as the head view for the table (if any).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tableHeadHeight",
        "displayName": "SC.TableColumn#tableHeadHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "The height of the table head in pixels.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasUniformRowHeights",
        "displayName": "SC.TableColumn#hasUniformRowHeights",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Whether all rows in the table will have the same pixel height. If so, we\n    can compute offsets very cheaply.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rowHeight",
        "displayName": "SC.TableColumn#rowHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "How high each row should be, in pixels.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "exampleView",
        "displayName": "SC.TableColumn#exampleView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableColumn",
        "overview": "Which view to use for a table row.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 52946,
    "name": "TableHeaderView",
    "displayName": "SC.TableHeaderView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/table/views/table_header.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "The views that make up the column header cells in a typical `SC.TableView`.\n  \n  In addition, this view is in charge of rendering the _entire_ table column\n  (both header and body) when the table is in the \"drag-reorder\" state. This\n  is the state that occurs when the user clicks and holds on a table header,\n  then drags that header horizontally.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 52880,
    "name": "TableHeadView",
    "displayName": "SC.TableHeadView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/table/views/table_head.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "The head of a `SC.TableView`. It's a special row of the table that holds\n  the column header cells.",
    "methods": [
      {
        "name": "init",
        "displayName": "SC.TableHeadView#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sortState",
        "displayName": "SC.TableHeadView#sortState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The sortState of the header view's column.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "dragModeView",
        "displayName": "SC.TableHeadView#dragModeView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableHeadView",
        "overview": "The view that is visible when the column is in drag mode.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "column",
        "displayName": "SC.TableHeadView#column",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableHeadView",
        "overview": "The SC.TableColumn object this header cell is bound to.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 52996,
    "name": "TableRowView",
    "displayName": "SC.TableRowView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/table/views/table_row.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "The default example view for a table row. Belongs to a SC.TableView.",
    "methods": [
      {
        "name": "columns",
        "displayName": "SC.TableRowView#columns",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "A collection of `SC.TableColumn` objects.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "render",
        "displayName": "SC.TableRowView#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when we need to create the HTML that represents the button.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Object",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object containing the information on how to render the button"
          },
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the render context instance"
          }
        ]
      },
      {
        "name": "update",
        "displayName": "SC.TableRowView#update",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when one or more display properties have changed and we need to\n    update the HTML representation with the new values.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Object",
            "name": "dataSource",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object containing the information on how to render the button"
          },
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "jquery",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the jQuery object representing the HTML representation of the button"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "tableView",
        "displayName": "SC.TableRowView#tableView",
        "objectType": "property",
        "propertyType": "SC.TableView",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TableRowView",
        "overview": "A reference to the row's encompassing TableView.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 52735,
    "name": "TableView",
    "displayName": "SC.TableView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/table/views/table.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ListView"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TableDelegate"
      }
    ],
    "overview": "A table view renders a two-dimensional grid of data.\n  \n  TODO: More documentation.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 31070,
    "name": "TabView",
    "displayName": "SC.TabView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/tab.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Incorporates a segmented view and a container view to display the selected\n  tab.  Provide an array of items, which will be passed onto the segmented\n  view.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.TabView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "['sc-tab-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.TabView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "['nowShowing']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nowShowing",
        "displayName": "SC.TabView#nowShowing",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "Set nowShowing with the page you want to display.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "items",
        "displayName": "SC.TabView#items",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "[]",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.TabView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemTitleKey",
        "displayName": "SC.TabView#itemTitleKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemValueKey",
        "displayName": "SC.TabView#itemValueKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIsEnabledKey",
        "displayName": "SC.TabView#itemIsEnabledKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemIconKey",
        "displayName": "SC.TabView#itemIconKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemWidthKey",
        "displayName": "SC.TabView#itemWidthKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemToolTipKey",
        "displayName": "SC.TabView#itemToolTipKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tabHeight",
        "displayName": "SC.TabView#tabHeight",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "SC.REGULAR_BUTTON_HEIGHT",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tabLocation",
        "displayName": "SC.TabView#tabLocation",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "Possible values:\n    \n      - SC.TOP_LOCATION\n      - SC.TOP_TOOLBAR_LOCATION\n      - SC.BOTTOM_LOCATION",
        "defaultValue": "SC.TOP_LOCATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "userDefaultKey",
        "displayName": "SC.TabView#userDefaultKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "If set, then the tab location will be automatically saved in the user\n    defaults.  Browsers that support localStorage will automatically store\n    this information locally.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "containerView",
        "displayName": "SC.TabView#containerView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "The containerView managed by this tab view.  Note that TabView uses a \n    custom container view.  You can access this view but you cannot change \n    it.",
        "defaultValue": "SC.ContainerView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "segmentedView",
        "displayName": "SC.TabView#segmentedView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TabView",
        "overview": "",
        "defaultValue": "SC.SegmentedView",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36340,
    "name": "TapGesture",
    "displayName": "SC.TapGesture",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/gestures/tap.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Gesture"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "name",
        "displayName": "SC.TapGesture#name",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TapGesture",
        "overview": "",
        "defaultValue": "\"tap\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMultitouch",
        "displayName": "SC.TapGesture#acceptsMultitouch",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TapGesture",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tapWiggle",
        "displayName": "SC.TapGesture#tapWiggle",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TapGesture",
        "overview": "",
        "defaultValue": "20",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tapDelay",
        "displayName": "SC.TapGesture#tapDelay",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TapGesture",
        "overview": "",
        "defaultValue": "200",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 13323,
    "name": "TemplateCollectionView",
    "displayName": "SC.TemplateCollectionView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/views/template_collection.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Tom Dale, Yehuda Katz",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TemplateView"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "arrayContentDidChange",
        "displayName": "SC.TemplateCollectionView#arrayContentDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when a mutation to the underlying content array occurs.\n\n    This method will replay that mutation against the views that compose the\n    SC.TemplateCollectionView, ensuring that the view reflects the model.\n\n    This enumerable observer is added in contentDidChange.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "addedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects that were added to the content"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "removedObjects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the objects that were removed from the content"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "changeIndex",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index at which the changes occurred"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "itemViewTemplate",
        "displayName": "SC.TemplateCollectionView#itemViewTemplate",
        "objectType": "property",
        "propertyType": "Function",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TemplateCollectionView",
        "overview": "The template used to render each item in the collection.\n\n    This should be a function that takes a content object and returns\n    a string of HTML that will be inserted into the DOM.\n\n    In general, you should set the `itemViewTemplateName` property instead of\n    setting the `itemViewTemplate` property yourself. If you created the\n    SC.TemplateCollectionView using the Handlebars {{#collection}} helper, this\n    will be set for you automatically.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "itemViewTemplateName",
        "displayName": "SC.TemplateCollectionView#itemViewTemplateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TemplateCollectionView",
        "overview": "The name of the template to lookup if no item view template is provided.\n\n    The collection will look for a template with this name in the global\n    `SC.TEMPLATES` hash. Usually this hash will be populated for you\n    automatically when you include `.handlebars` files in your project.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 13302,
    "name": "TemplateView",
    "displayName": "SC.TemplateView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/views/template.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.5",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CoreView"
      }
    ],
    "overview": "SC.TemplateView allows you to create a view that uses the Handlebars templating\n  engine to generate its HTML representation.\n\n  To use it, create a file in your project called +mytemplate.handlebars+. Then,\n  set the +templateName+ property of your SC.TemplateView to +mytemplate+.\n\n  Alternatively, you can set the +template+ property to any function that\n  returns a string. It is recommended that you use +SC.Handlebars.compile()+ to\n  generate a function from a string containing Handlebars markup.",
    "methods": [
      {
        "name": "template",
        "displayName": "SC.TemplateView#template",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The template used to render the view. This should be a function that\n    accepts an optional context parameter and returns a string of HTML that\n    will be inserted into the DOM relative to its parent view.\n\n    In general, you should set the +templateName+ property instead of setting\n    the template yourself.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "context",
        "displayName": "SC.TemplateView#context",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The object from which templates should access properties.\n\n    This object will be passed to the template function each time the render\n    method is called, but it is up to the individual function to decide what\n    to do with it.\n\n    By default, this will be the view itself.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "render",
        "displayName": "SC.TemplateView#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "When the view is asked to render, we look for the appropriate template\n    function and invoke it, then push its result onto the passed\n    SC.RenderContext instance.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the render context"
          }
        ]
      },
      {
        "name": "mouseDown",
        "displayName": "SC.TemplateView#mouseDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Since mouseUp events will not fire unless we return YES to mouseDown, the\n    default mouseDown implementation returns YES if a mouseDown method exists.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "templateName",
        "displayName": "SC.TemplateView#templateName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TemplateView",
        "overview": "The name of the template to lookup if no template is provided.\n\n    SC.TemplateView will look for a template with this name in the global\n    +SC.TEMPLATES+ hash. Usually this hash will be populated for you\n    automatically when you include +.handlebars+ files in your project.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "templates",
        "displayName": "SC.TemplateView#templates",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TemplateView",
        "overview": "The hash in which to look for +templateName+. Defaults to SC.TEMPLATES.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 6145,
    "name": "TextField",
    "displayName": "SC.TextField",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/mixins/template_helpers/text_field_support.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "value",
        "displayName": "SC.TextField#value",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The problem this property is trying to solve is twofold:\n\n    1. Make it possible to set the value of a text field that has\n       not yet been inserted into the DOM\n    2. Make sure that `value` properly reflects changes made directly\n       to the element's `value` property.\n\n    In order to achieve (2), we need to make the property volatile,\n    so that SproutCore will call the getter no matter what if get()\n    is called.\n\n    In order to achieve (1), we need to store a local cache of the\n    value, so that SproutCore can set the proper value as soon as\n    the underlying DOM element is created.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 41020,
    "name": "TextFieldView",
    "displayName": "SC.TextFieldView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/views/text_field.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.FieldView"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Editable"
      }
    ],
    "overview": "A text field is an input element with type \"text\".  This view adds support\n  for hinted values, etc.",
    "methods": [
      {
        "name": "isEditable",
        "displayName": "SC.TextFieldView#isEditable",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "isEditable maps to isEnabled with a TextField.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "selection",
        "displayName": "SC.TextFieldView#selection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current selection of the text field, returned as an SC.TextSelection\n    object.\n\n    Note that if the selection changes a new object will be returned -- it is\n    not the case that a previously-returned SC.TextSelection object will\n    simply have its properties mutated.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "willDestroyLayer",
        "displayName": "SC.TextFieldView#willDestroyLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all the events attached to the textfield",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "keyDown",
        "displayName": "SC.TextFieldView#keyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Simply allow keyDown & keyUp to pass through to the default web browser\n    implementation.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseWheel",
        "displayName": "SC.TextFieldView#mouseWheel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds mouse wheel support for textareas.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "ariaRole",
        "displayName": "SC.TextFieldView#ariaRole",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "The WAI-ARIA role for text field view. This property's value should not be\n    changed.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "applyImmediately",
        "displayName": "SC.TextFieldView#applyImmediately",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "When applyImmediately is turned on, every keystroke will set the value\n    of the underlying object. Turning it off will only set the value on blur.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isPassword",
        "displayName": "SC.TextFieldView#isPassword",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "If YES, the field will hide its text from display. The default value is NO.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isTextArea",
        "displayName": "SC.TextFieldView#isTextArea",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "If YES then allow multi-line input.  This will also change the default\n    tag type from \"input\" to \"textarea\".  Otherwise, pressing return will\n    trigger the default insertion handler.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hint",
        "displayName": "SC.TextFieldView#hint",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "The hint to display while the field is not active.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEditing",
        "displayName": "SC.TextFieldView#isEditing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "If YES then the text field is currently editing.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultTabbingEnabled",
        "displayName": "SC.TextFieldView#defaultTabbingEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "If you set this property to false the tab key won't trigger its default \n    behavior (tabbing to the next field).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.TextFieldView#isContextMenuEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "Enabled context menu for textfields.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "continuouslyUpdatesValue",
        "displayName": "SC.TextFieldView#continuouslyUpdatesValue",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "If true, every change to the text in the text field updates 'value'.\n    If false, 'value' is only updated when commitEditing() is called (this\n    is called automatically when the text field loses focus), or whenever\n    the return key is pressed while editing the field.",
        "memberOf": "SC.TextFieldView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "allowsErrorAsValue",
        "displayName": "SC.TextFieldView#allowsErrorAsValue",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "If no, will not allow transform or validation errors (SC.Error objects)\n    to be passed to 'value'.  Upon focus lost, the text field will revert\n    to its previous value.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "leftAccessoryView",
        "displayName": "SC.TextFieldView#leftAccessoryView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "An optional view instance, or view class reference, which will be visible\n    on the left side of the text field.  Visually the accessory view will look\n    to be inside the field but the text editing will not overlap the accessory\n    view.\n\n    The view will be rooted to the top-left of the text field.  You should use\n    a layout with 'left' and/or 'top' specified if you would like to adjust\n    the offset from the top-left.\n\n    One example use would be for a web site's icon, found to the left of the\n    URL field, in many popular web browsers.\n\n    Note:  If you set a left accessory view, the left padding of the text\n    field (really, the left offset of the padding element) will automatically\n    be set to the width of the accessory view, overriding any CSS you may have\n    defined on the \"padding\" element.  If you would like to customize the\n    amount of left padding used when the accessory view is visible, make the\n    accessory view wider, with empty space on the right.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "rightAccessoryView",
        "displayName": "SC.TextFieldView#rightAccessoryView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "An optional view instance, or view class reference, which will be visible\n    on the right side of the text field.  Visually the accessory view will\n    look to be inside the field but the text editing will not overlap the\n    accessory view.\n\n    The view will be rooted to the top-right of the text field.  You should\n    use a layout with 'right' and/or 'top' specified if you would like to\n    adjust the offset from the top-right.  If 'left' is specified in the\n    layout it will be cleared.\n\n    One example use would be for a button to clear the contents of the text\n    field.\n\n    Note:  If you set a right accessory view, the right padding of the text\n    field (really, the right offset of the padding element) will automatically\n    be set to the width of the accessory view, overriding any CSS you may have\n    defined on the \"padding\" element.  If you would like to customize the\n    amount of right padding used when the accessory view is visible, make the\n    accessory view wider, with empty space on the left.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "spellCheckEnabled",
        "displayName": "SC.TextFieldView#spellCheckEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "This property will enable disable HTML5 spell checking if available on the \n    browser. As of today Safari 4+, Chrome 3+ and Firefox 3+ support it",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maxLength",
        "displayName": "SC.TextFieldView#maxLength",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "Maximum amount of characters this field will allow.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldRenderBorder",
        "displayName": "SC.TextFieldView#shouldRenderBorder",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextFieldView",
        "overview": "Whether to render a border or not.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37966,
    "name": "TextSelection",
    "displayName": "SC.TextSelection",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/text_selection.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Copyable"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Freezable"
      }
    ],
    "overview": "A simple object representing the selection inside a text field.  Each\n  object is frozen and contains exactly three properties:\n start\n end\n length\n  \n  Important note:  In Internet Explorer, newlines in textara elements are\n  considered two characters.  SproutCore does not currently try to hide this from you.",
    "methods": [
      {
        "name": "length",
        "displayName": "SC.TextSelection#length",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The length of the selection.  This is equivalent to (end - start) and\n    exists mainly as a convenience.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "start",
        "displayName": "SC.TextSelection#start",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextSelection",
        "overview": "The number of characters appearing to the left of the beginning of the\n    selection, starting at 0.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "end",
        "displayName": "SC.TextSelection#end",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TextSelection",
        "overview": "The number of characters appearing to the left of the end of the\n    selection.\n\n    This will have the same value as 'start' if there is no selection and\n    instead there is only a caret.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 8037,
    "name": "Theme",
    "displayName": "SC.Theme",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/theme.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Alex Iskander",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Represents a theme, and is also the core theme in which SC looks for\n  other themes.\n\n  If an SC.View has a theme of \"ace\", it will look in its parent's theme\n  for the theme \"ace\". If there is no parent--that is, if the view is a\n  frame--it will look in SC.Theme for the named theme. To find a theme,\n  it calls find(themeName) on the theme.\n\n  To be located, themes must be registered either as a root theme (by\n  calling SC.Theme.addTheme) or as a child theme of another theme (by\n  calling theTheme.addTheme).\n\n  All themes are instances. However, new instances based on the current\n  instance can always be created: just call .create(). This method is used\n  by SC.View when you name a theme that doesn't actually exist: it creates\n  a theme based on the parent theme.\n\n  Renderers\n  ---------------------------\n  Themes are used to keep track of theme class names and, more important,\n  to keep track of renderers.\n\n  Renderers are added to a theme using theme.addRenderer(theRenderer). After\n  this has been done, they may be instantiated using theme.renderer(rendererName).\n\n  Instantiating with renderer() instantiates a version of that renderer\n  specialized for this specific theme-- not any parent themes. The renderer\n  will include all class names for _this_ theme. This means that you can\n  theme controls differently without overriding any renderers: just subclass\n  the original theme that _has_ the renderers, give it its own name, and\n  all renderers will render with that name as a class name.\n\n  Locating Child Themes\n  ----------------------------\n  Locating child themes is relatively simple for the most part: it looks in\n  its own \"themes\" property, which is an object inheriting from its parent's\n  \"themes\" set, so it includes all parent themes.\n\n  However, it does _not_ include global themes. This is because, when find()\n  is called, it wants to ensure any child theme is specialized. That is, the\n  child theme should include all class names of the base class theme. This only\n  makes sense if the theme really is a child theme of the theme or one of its\n  base classes; if the theme is a global theme, those class names should not\n  be included.\n\n  This makes sense logically as well, because when searching for a renderer,\n  it will locate it in any base theme that has it, but that doesn't mean\n  class names from the derived theme shouldn't be included.",
    "methods": [
      {
        "name": "create",
        "displayName": "SC.Theme.create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new theme based on this one. The name of the new theme will\n    be added to the classNames set.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "subtheme",
        "displayName": "SC.Theme.subtheme",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a child theme based on this theme, with the given name,\n    and automatically registers it as a child theme.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "invisibleSubtheme",
        "displayName": "SC.Theme.invisibleSubtheme",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Semi-private, only used by SC.View to create \"invisible\" subthemes. You\n    should never need to call this directly, nor even worry about.\n    \n    Invisible subthemes are only available when find is called _on this theme_;\n    if find() is called on a child theme, it will _not_ locate this theme.\n    \n    The reason for \"invisible\" subthemes is that SC.View will create a subtheme\n    when it finds a theme name that doesn't exist. For example, imagine that you \n    have a parent view with theme \"base\", and a child view with theme \"popup\".\n    If no \"popup\" theme can be found inside \"base\", SC.View will call\n    base.subtheme. This will create a new theme with the name \"popup\",\n    derived from \"base\". Everyone is happy.\n    \n    But what happens if you then change the parent theme to \"ace\"? The view\n    will try again to find \"popup\", and it will find it-- but it will still be\n    a child theme of \"base\"; SC.View _needs_ to re-subtheme it, but it won't\n    know it needs to, because it has been found.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "find",
        "displayName": "SC.Theme.find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds a theme by name within this theme (the theme must have\n    previously been added to this theme or a base theme by using addTheme, or\n    been registered as a root theme).\n\n    If the theme found is not a root theme, this will specialize the theme so\n    that it includes all class names for this theme.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "themeName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "addTheme",
        "displayName": "SC.Theme.addTheme",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a child theme to the theme. This allows the theme to be located\n    by SproutCore views and such later.\n\n    Each theme is registered in the \"themes\" property by name. Calling\n    find(name) will return the theme with the given name.\n\n    Because the themes property is an object begetted from (based on) any\n    parent theme's \"themes\" property, if the theme cannot be found in this\n    theme, it will be found in any parent themes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "theme",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "addRenderer",
        "displayName": "SC.Theme.addRenderer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a renderer to the theme. The renderer's name will be used to\n    keep track of it and identify it later.\n\n    The biggest responsibility of addRenderer is to ensure that renderer()\n    can be used to instantiate that renderer. If a renderer is not instantiated\n    through renderer(), it will not know its theme's classNames.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "renderer",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "renderer",
        "displayName": "SC.Theme.renderer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the named renderer and instantiates it, returning the result.\n     It also ensures it is using a version of the renderer specialized for\n     this theme. It keeps a cache of specialized versions of the renderer.\n\n     Any arguments after the name are passed on to the instantiated\n     renderer.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isTheme",
        "displayName": "SC.Theme.isTheme",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Theme",
        "overview": "Walks like a duck.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.Theme.classNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Theme",
        "overview": "Class names for the theme.\n\n    These class names include the name of the theme and the names\n    of all parent themes. You can also add your own.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31146,
    "name": "ThumbView",
    "displayName": "SC.ThumbView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/thumb.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Erich Ocean",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "A ThumbView works in concert with SC.SplitView to adjust the divider \n  position from an arbitrary subview of the SplitView. Simply make an\n  instance of ThumbView a child somewhere in the childViews (or \n  descendants) of the split view and add the path to the ThumbView to the\n  SplitView's thumbViews array.\n  \n  SplitView will automatically set the splitView property of the views in\n  its thumbViews array.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ThumbView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ThumbView",
        "overview": "",
        "defaultValue": "['sc-thumb-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.ThumbView#isEnabled",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ThumbView",
        "overview": "Enable this thumb view to control its parent split view.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 8084,
    "name": "Timer",
    "displayName": "SC.Timer",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/timer.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "version 1.0",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "A Timer executes a method after a defined period of time.  Timers are\n  significantly more efficient than using setTimeout() or setInterval()\n  because they are cooperatively scheduled using the run loop.  Timers are\n  also gauranteed to fire at the same time, making it far easier to keep\n  multiple timers in sync.\n\n  ## Overview\n\n  Timers were created for SproutCore as a way to efficiently defer execution\n  of code fragments for use in Animations, event handling, and other tasks.\n\n  Browsers are typically fairly inconsistant about when they will fire a\n  timeout or interval based on what the browser is currently doing.  Timeouts\n  and intervals are also fairly expensive for a browser to execute, which\n  means if you schedule a large number of them it can quickly slow down the\n  browser considerably.\n\n  Timers, on the other handle, are scheduled cooperatively using the\n  SC.RunLoop, which uses exactly one timeout to fire itself when needed and\n  then executes by timers that need to fire on its own.  This approach can\n  be many timers faster than using timers and gaurantees that timers scheduled\n  to execute at the same time generally will do so, keeping animations and\n  other operations in sync.\n\n  ## Scheduling a Timer\n\n  To schedule a basic timer, you can simply call SC.Timer.schedule() with\n  a target and action you wish to have invoked:\n\n      var timer = SC.Timer.schedule({\n        target: myObject, action: 'timerFired', interval: 100\n      });\n\n  When this timer fires, it will call the timerFired() method on myObject.\n\n  In addition to calling a method on a particular object, you can also use\n  a timer to execute a variety of other types of code:\n\n   - If you include an action name, but not a target object, then the action will be passed down the responder chain.\n   - If you include a property path for the action property (e.g. 'MyApp.someController.someMethod'), then the method you name will be executed.\n   - If you include a function in the action property, then the function will be executed.  If you also include a target object, the function will be called with this set to the target object.\n\n  In general these properties are read-only.  Changing an interval, target,\n  or action after creating a timer will have an unknown effect.\n\n  ## Scheduling Repeating Timers\n\n  In addition to scheduling one time timers, you can also schedule timers to\n  execute periodically until some termination date.  You make a timer\n  repeating by adding the repeats: YES property:\n\n      var timer = SC.Timer.schedule({\n        target: myObject,\n        action: 'updateAnimation',\n        interval: 100,\n        repeats: YES,\n        until: Time.now() + 1000\n      }) ;\n\n  The above example will execute the myObject.updateAnimation() every 100msec\n  for 1 second from the current time.\n\n  If you want a timer to repeat without expiration, you can simply omit the\n  until: property.  The timer will then repeat until you invalidate it.\n\n  ## Pausing and Invalidating Timers\n\n  If you have created a timer but you no longer want it to execute, you can\n  call the invalidate() method on it.  This will remove the timer from the\n  run loop and clear certain properties so that it will not run again.\n\n  You can use the invalidate() method on both repeating and one-time timers.\n\n  If you do not want to invalidate a timer completely but you just want to\n  stop the timer from execution temporarily, you can alternatively set the\n  isPaused property to YES:\n\n      timer.set('isPaused', YES) ;\n      // Perform some critical function; timer will not execute\n      timer.set('isPaused', NO) ;\n\n  When a timer is paused, it will be scheduled and will fire like normal,\n  but it will not actually execute the action method when it fires.  For a\n  one time timer, this means that if you have the timer paused when it fires,\n  it may never actually execute the action method.  For repeating timers,\n  this means the timer will remain scheduled but simply will not execute its\n  action while the timer is paused.\n\n  ## Firing Timers\n\n  If you need a timer to execute immediately, you can always call the fire()\n  method yourself.  This will execute the timer action, if the timer is not\n  paused.  For a one time timer, it will also invalidate the timer and remove\n  it from the run loop.  Repeating timers can be fired anytime and it will\n  not interrupt their regular scheduled times.",
    "methods": [
      {
        "name": "fireTime",
        "displayName": "SC.Timer#fireTime",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property returns the next time the timer should fire.  This\n    property resets each time the timer fires.  Returns -1 if the timer\n    cannot fire again.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "schedule",
        "displayName": "SC.Timer#schedule",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Schedules the timer to execute in the runloop.\n\n    This method is called automatically if you create the timer using the\n    schedule() class method.  If you create the timer manually, you will\n    need to call this method yourself for the timer to execute.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Timer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The receiver"
          }
        ],
        "params": []
      },
      {
        "name": "invalidate",
        "displayName": "SC.Timer#invalidate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invalidates the timer so that it will not execute again.  If a timer has\n    been scheduled, it will be removed from the run loop immediately.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Timer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The receiver"
          }
        ],
        "params": []
      },
      {
        "name": "fire",
        "displayName": "SC.Timer#fire",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Immediately fires the timer.\n\n    If the timer is not-repeating, it will be invalidated.  If it is repeating\n    you can call this method without interrupting its normal schedule.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "performAction",
        "displayName": "SC.Timer#performAction",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Actually fires the action. You can override this method if you need\n    to change how the timer fires its action.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "reset",
        "displayName": "SC.Timer#reset",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets the timer settings with the new settings.  This is the method\n    called by the Timer pool when a timer is reused.  You will not normally\n    call this method yourself, though you could override it if you need to\n    reset additonal properties when a timer is reused.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Timer",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "timerFromPool",
        "displayName": "SC.Timer.timerFromPool",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new timer from the timer pool, copying the passed properties onto\n  the timer instance.  If the timer pool is currently empty, this will return\n  a new instance.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "returnTimerToPool",
        "displayName": "SC.Timer.returnTimerToPool",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a timer instance to the timer pool for later use.  This is done\n  automatically when a timer is invalidated if isPooled is YES.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "timer",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setup",
        "displayName": "SC.Timer.setup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "teardown",
        "displayName": "SC.Timer.teardown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "target",
        "displayName": "SC.Timer#target",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "The target object whose method will be invoked when the time fires.\n\n    You can set either a target/action property or you can pass a specific\n    method.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "action",
        "displayName": "SC.Timer#action",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "The action to execute.\n\n    The action can be a method name, a property path, or a function.  If you\n    pass a method name, it will be invoked on the target object or it will\n    be called up the responder chain if target is null.  If you pass a\n    property path and it resolves to a function then the function will be\n    called.  If you pass a function instead, then the function will be\n    called in the context of the target object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isPooled",
        "displayName": "SC.Timer#isPooled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Set if the timer should be created from a memory pool.  Normally you will\n    want to leave this set, but if you plan to use bindings or observers with\n    this timer, then you must set isPooled to NO to avoid reusing your timer.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "interval",
        "displayName": "SC.Timer#interval",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "The time interval in milliseconds.\n\n    You generally set this when you create the timer.  If you do not set it\n    then the timer will fire as soon as possible in the next run loop.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "startTime",
        "displayName": "SC.Timer#startTime",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Timer start date offset.\n\n    The start date determines when the timer will be scheduled.  The first\n    time the timer fires will be interval milliseconds after the start\n    date.\n\n    Generally you will not set this property yourself.  Instead it will be\n    set automatically to the current run loop start date when you schedule\n    the timer.  This ensures that all timers scheduled in the same run loop\n    cycle will execute in the sync with one another.\n\n    The value of this property is an offset like what you get if you call\n    Date.now().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "repeats",
        "displayName": "SC.Timer#repeats",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "YES if you want the timer to execute repeatedly.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "until",
        "displayName": "SC.Timer#until",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Last date when the timer will execute.\n\n    If you have set repeats to YES, then you can also set this property to\n    have the timer automatically stop executing past a certain date.\n\n    This property should contain an offset value like startOffset.  However if\n    you set it to a Date object on create, it will be converted to an offset\n    for you.\n\n    If this property is null, then the timer will continue to repeat until you\n    call invalidate().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isPaused",
        "displayName": "SC.Timer#isPaused",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Set to YES to pause the timer.\n\n    Pausing a timer does not remove it from the run loop, but it will\n    temporarily suspend it from firing.  You should use this property if\n    you will want the timer to fire again the future, but you want to prevent\n    it from firing temporarily.\n\n    If you are done with a timer, you should call invalidate() instead of\n    setting this property.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isScheduled",
        "displayName": "SC.Timer#isScheduled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "YES onces the timer has been scheduled for the first time.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isValid",
        "displayName": "SC.Timer#isValid",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "YES if the timer can still execute.\n\n    This read only property will return YES as long as the timer may possibly\n    fire again in the future.  Once a timer has become invalid, it cannot\n    become valid again.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "lastFireTime",
        "displayName": "SC.Timer#lastFireTime",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Set to the current time when the timer last fired.  Used to find the\n    next 'frame' to execute.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "commonSetup",
        "displayName": "SC.Timer-commonSetup",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "Helper setup that creates a parent and child view so that you can do basic\n  tests.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "FRAME",
        "displayName": "SC.Timer-FRAME",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Timer",
        "overview": "These tests verify that all view metrics -- frame, clippingFrame,\n  isVisibleInWindow, etc. are correct.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31170,
    "name": "ToolbarView",
    "displayName": "SC.ToolbarView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/toolbar.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "A toolbar view can be anchored at the top or bottom of the window to contain\n  your main toolbar buttons.\n\n  You can also override the layout property yourself or simply set the\n  anchorLocation to `SC.ANCHOR_TOP` or `SC.ANCHOR_BOTTOM`.  This will configure\n  the layout of your toolbar automatically when it is created.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.ToolbarView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ToolbarView",
        "overview": "",
        "defaultValue": "['sc-toolbar-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.ToolbarView#ariaRole",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ToolbarView",
        "overview": "The WAI-ARIA role for toolbar view.",
        "defaultValue": "'toolbar'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.ToolbarView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ToolbarView",
        "overview": "",
        "defaultValue": "'toolbarRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "anchorLocation",
        "displayName": "SC.ToolbarView#anchorLocation",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ToolbarView",
        "overview": "Default anchor location.  This will be applied automatically to the\n    toolbar layout if you set it. Possible values:\n    \n      - SC.ANCHOR_TOP\n      - SC.ANCHOR_LEFT\n      - SC.ANCHOR_TOP_LEFT\n      - SC.ANCHOR_BOTTOM\n      - SC.ANCHOR_RIGHT\n      - SC.ANCHOR_BOTTOM_RIGHT",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 7680,
    "name": "Touch",
    "displayName": "SC.Touch",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/system/root_responder.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "SC.Touch\n  Represents a touch.\n\n  Views receive touchStart and touchEnd.",
    "methods": [
      {
        "name": "allowDefault",
        "displayName": "SC.Touch#allowDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Indicates that you want to allow the normal default behavior.  Sets\n    the hasCustomEventHandling property to YES but does not cancel the event.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "preventDefault",
        "displayName": "SC.Touch#preventDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the touch is associated with an event, prevents default action on the event.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "end",
        "displayName": "SC.Touch#end",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes from and calls touchEnd on the touch responder.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "makeTouchResponder",
        "displayName": "SC.Touch#makeTouchResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Changes the touch responder for the touch. If shouldStack === YES,\n    the current responder will be saved so that the next responder may\n    return to it.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "shouldStack",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "upViewChain",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "captureTouch",
        "displayName": "SC.Touch#captureTouch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Captures, or recaptures, the touch. This works from the touch's raw target view\n    up to the startingPoint, and finds either a view that returns YES to captureTouch() or\n    touchStart().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "startingPoint",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "shouldStack",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesForView",
        "displayName": "SC.Touch#touchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns all touches for a specified view. Put as a convenience on the touch itself; this method\n    is also available on the event.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchesForResponder",
        "displayName": "SC.Touch#touchesForResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Same as touchesForView, but sounds better for responders.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "averagedTouchesForView",
        "displayName": "SC.Touch#averagedTouchesForView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns average data--x, y, and d (distance)--for the touches owned by the supplied view.\n\n    addSelf adds this touch to the set being considered. This is useful from touchStart. If\n    you use it from anywhere else, it will make this touch be used twice--so use caution.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "addSelf",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 29816,
    "name": "TouchScrollerView",
    "displayName": "SC.TouchScrollerView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/scroller.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ScrollerView"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.TouchScrollerView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "['sc-touch-scroller-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "scrollbarThickness",
        "displayName": "SC.TouchScrollerView#scrollbarThickness",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "12",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "capLength",
        "displayName": "SC.TouchScrollerView#capLength",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "5",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "capOverlap",
        "displayName": "SC.TouchScrollerView#capOverlap",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "0",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasButtons",
        "displayName": "SC.TouchScrollerView#hasButtons",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "buttonOverlap",
        "displayName": "SC.TouchScrollerView#buttonOverlap",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TouchScrollerView",
        "overview": "",
        "defaultValue": "36",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36144,
    "name": "TreeController",
    "displayName": "SC.TreeController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/controllers/tree.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.SelectionSupport"
      }
    ],
    "overview": "A TreeController manages a tree of model objects that you might want to\n  display in the UI using a collection view.  For the most part, you should\n  work with a TreeController much like you would an ObjectController, except\n  that the TreeController will also provide an arrangedObjects property that\n  can be used as the content of a CollectionView.",
    "methods": [
      {
        "name": "arrangedObjects",
        "displayName": "SC.TreeController#arrangedObjects",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an SC.Array object that actually will represent the tree as a\n    flat array suitable for use by a CollectionView.  Other than binding this\n    property as the content of a CollectionView, you generally should not\n    use this property directly.  Instead, work on the tree content using the\n    TreeController like you would any other ObjectController.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "treeItemIsGrouped",
        "displayName": "SC.TreeController#treeItemIsGrouped",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeController",
        "overview": "Set to YES if you want the top-level items in the tree to be displayed as\n    group items in the collection view.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "treeItemIsExpandedKey",
        "displayName": "SC.TreeController#treeItemIsExpandedKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeController",
        "overview": "If your content support expanding and collapsing of content, then set this\n    property to the name of the key on your model that should be used to\n    determine the expansion state of the item.  The default is\n    \"treeItemIsExpanded\"",
        "defaultValue": "\"treeItemIsExpanded\"",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "treeItemChildrenKey",
        "displayName": "SC.TreeController#treeItemChildrenKey",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeController",
        "overview": "Set to the name of the property on your content object that holds the\n    children array for each tree node.  The default is \"treeItemChildren\".",
        "defaultValue": "\"treeItemChildren\"",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36935,
    "name": "TreeItemContent",
    "displayName": "SC.TreeItemContent",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/tree_item_content.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A tree item is a model object that acts as a node in a tree-like data\n  structure such as a hierarchy of folders or outline of items.  This mixin\n  can be applied to tree item model objects to customize the way the tree\n  information is extracted from the object.\n\n  ## Basic Implementation\n\n  If you add this mixin, you must implement the treeItemChildren property so\n  that it returns the current array of child tree items for the receiver.  If\n  you do not implement this property the tree item will not function.\n\n  ## Optimizing Branches\n\n  The most common use of this mixin is to override the treeItemBranchIndexes\n  property to return an index set of child items that are themselves branches\n  in the tree.  Normally the TreeController will need to walk every item in\n  your list to determine these branch items.  However by implementing this\n  method yourself, you can provide a result faster.\n\n  If none of your child items are branches, override this property to return\n  null or an empty index set.",
    "methods": [
      {
        "name": "treeItemDisclosureState",
        "displayName": "SC.TreeItemContent.treeItemDisclosureState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the disclosure state for the tree item, which appears at the\n    index of the parent's treeItemChildren array.  The response must be one of\n    SC.BRANCH_OPEN, SC.BRANCH_CLOSED or SC.LEAF_NODE.\n\n    If the parent parameter is null, then this item is part of the root\n    children array.\n\n    This method will only be called for tree items that have children.  Tree\n    items with no children are assumed to be leaf nodes.\n\n    The default implementation uses the treeItemIsExpanded property to\n    determine if the item should be open or closed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "branch state"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "parent",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the parent item containing this item"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of the item in the parent"
          }
        ]
      },
      {
        "name": "treeItemCollapse",
        "displayName": "SC.TreeItemContent.treeItemCollapse",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Collapse the tree item.  The default implementation will change the\n    treeItemIsExpanded property, but you can override this method to handle\n    collapsing anyway you like.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "parent",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the parent item containing this item"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of the item in the parent"
          }
        ]
      },
      {
        "name": "treeItemExpand",
        "displayName": "SC.TreeItemContent.treeItemExpand",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Expand the tree item.  The default implementation will change the\n    treeItemIsExpanded property, but you can override this method to handle\n    collapsing anyway you like.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "parent",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the parent item containing this item"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "idx",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of the item in the parent"
          }
        ]
      },
      {
        "name": "treeItemBranchIndexes",
        "displayName": "SC.TreeItemContent.treeItemBranchIndexes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an index set containing the child indexes of the item that are\n    themselves branches.  This will only be called on tree items with a branch\n    disclosure state.\n\n    If the passed parent and index are both null, then the receiver is the\n    root node in the tree.\n\n    The default implementation iterates over the item's children to get the\n    disclosure state of each one.  Child items with a branch disclosure state\n    will have their index added to the return index set.\n\n    You may want to override this method to provide a more efficient\n    implementation if you are working with large data sets and can infer which\n    children are branches without iterating over each one.\n\n    If you know for sure that all of the child items for this item are leaf\n    nodes and not branches, simply override this method to return null.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.IndexSet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "branch indexes"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "parent",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the parent item containing this item"
          },
          {
            "title": "param",
            "type": "Number",
            "name": "index",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the index of the item in the parent"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "isTreeItemContent",
        "displayName": "SC.TreeItemContent.isTreeItemContent",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeItemContent",
        "overview": "Walk like a duck.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "treeItemChildren",
        "displayName": "SC.TreeItemContent.treeItemChildren",
        "objectType": "property",
        "propertyType": "SC.Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeItemContent",
        "overview": "Property returns the children for this tree item.  The default simply\n    returns null.  If you implement this mixin, you MUST implement this\n    property to return the actual tree item children for the item.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "treeItemIsExpanded",
        "displayName": "SC.TreeItemContent.treeItemIsExpanded",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeItemContent",
        "overview": "The default property used to determine if the tree item is expanded.  You\n    can implement you model object to update this property or you can override\n    treeItemDisclosureState() to compute the disclosure state however you\n    want.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "treeItemIsGrouped",
        "displayName": "SC.TreeItemContent.treeItemIsGrouped",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.TreeItemContent",
        "overview": "Indicates whether the tree item should be rendered as a group or not.\n    This property is only useful on the root item in your tree.  Setting it to\n    YES on any other item will be ignored.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 22934,
    "name": "UndoManager",
    "displayName": "SC.UndoManager",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/system/undo_manager.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "This is a simple undo manager.  To use this UndoManager, all you need to\n  do is to make sure that you register a function with this manager to undo\n  every change you make.  You can then invoke the undo/redo methods to do it.\n  \n  ## Using SC.UndoManager\n  \n  Typically you create an undo manager inside on of your controllers.  Then,\n  whenever you are about to perform an action on your model object, all you\n  need to do is to register a function with the undo manager that can undo \n  whatever  you just did.\n  \n  Besure the undo function you register also saves undo functions.  This makes\n  redo possible.",
    "methods": [
      {
        "name": "undo",
        "displayName": "SC.UndoManager#undo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tries to undo the last action. Fails if an undo group is currently open.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if suceeded, NO otherwise."
          }
        ],
        "params": []
      },
      {
        "name": "redo",
        "displayName": "SC.UndoManager#redo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Tries to redo the last action. Fails if a redo group is currently open.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if suceeded, NO otherwise."
          }
        ],
        "params": []
      },
      {
        "name": "registerUndo",
        "displayName": "SC.UndoManager#registerUndo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is how you save new undo events.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Function",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A prebound function to be invoked when the undo executes."
          },
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": true,
            "defaultValue": "",
            "desc": "An optional name for the undo.  If you are using \n      groups, this is not necessary."
          }
        ]
      },
      {
        "name": "beginUndoGroup",
        "displayName": "SC.UndoManager#beginUndoGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins a new undo groups\n\n    Whenver you start an action that you expect to need to bundle under a single\n    undo action in the menu, you should begin an undo group.  This way any\n    undo actions registered by other parts of the application will be\n    automatically bundled into this one action.\n    \n    When you are finished performing the action, balance this with a call to\n    `endUndoGroup()`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "endUndoGroup",
        "displayName": "SC.UndoManager#endUndoGroup",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "beginUndoGroup()"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [
          {
            "title": "throws",
            "type": "Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "If there is no active group"
          }
        ],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "setActionName",
        "displayName": "SC.UndoManager#setActionName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Change the name of the current undo group.\n    \n    Normally you don't want to do this as it will effect the whole group.",
        "exceptions": [
          {
            "title": "throws",
            "type": "Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "If there is no active group"
          }
        ],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "name",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "undoActionName",
        "displayName": "SC.UndoManager#undoActionName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "Use this property to build your Undo menu name.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "redoActionName",
        "displayName": "SC.UndoManager#redoActionName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "Use this property to build your Redo menu name.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canUndo",
        "displayName": "SC.UndoManager#canUndo",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "True if there is an undo action on the stack.\n    \n    Use to validate your menu item.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canRedo",
        "displayName": "SC.UndoManager#canRedo",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "True if there is an redo action on the stack. Use to validate your menu item.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isUndoing",
        "displayName": "SC.UndoManager#isUndoing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isRedoing",
        "displayName": "SC.UndoManager#isRedoing",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UndoManager",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 37980,
    "name": "UserDefaults",
    "displayName": "SC.UserDefaults",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/system/user_defaults.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The UserDefaults object provides an easy way to store user preferences in\n  your application on the local machine.  You use this by providing built-in\n  defaults using the SC.userDefaults.defaults() method.  You can also\n  implement the UserDefaultsDelegate interface to be notified whenever a\n  default is required.\n\n  You should also set the userDomain property on the defaults on page load.\n  This will allow the UserDefaults application to store/fetch keys from\n  localStorage for the correct user.\n\n  You can also set an appDomain property if you want.  This will be\n  automatically prepended to key names with no slashes in them.\n\n  SC.userDefaults.getPath(\"global:contactInfo.userName\");",
    "methods": [
      {
        "name": "defaults",
        "displayName": "SC.UserDefaults#defaults",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoke this method to set the builtin defaults.  This will cause all\n    properties to change.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "newDefaults",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "readDefault",
        "displayName": "SC.UserDefaults#readDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to read a user default from local storage.  If not found on\n    localStorage, use the the local defaults, if defined.  If the key passed\n    does not include a slash, then add the appDomain or use \"app/\".",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "read value"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "writeDefault",
        "displayName": "SC.UserDefaults#writeDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to write the user default to local storage or at least saves them\n    for now.  Also notifies that the value has changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.UserDefault",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "resetDefault",
        "displayName": "SC.UserDefaults#resetDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removed the passed keyName from the written hash and local storage.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.UserDefaults",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.UserDefaults#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Is called whenever you .get() or .set() values on this object",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "userDomain",
        "displayName": "SC.UserDefaults#userDomain",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UserDefaults",
        "overview": "the default domain for the user.  This will be used to store keys in\n    local storage.  If you do not set this property, the wrong values may be\n    returned.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "appDomain",
        "displayName": "SC.UserDefaults#appDomain",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.UserDefaults",
        "overview": "The default app domain for the user.  Any keys that do not include a\n    slash will be prefixed with this app domain key when getting/setting.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 36951,
    "name": "Validatable",
    "displayName": "SC.Validatable",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/mixins/validatable.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Views that include the Validatable mixin can be used with validators to \n  ensure their values are valid.",
    "methods": [
      {
        "name": "performValidate",
        "displayName": "SC.Validatable.performValidate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to validate the receiver. \n    \n    Runs the validator and returns SC.VALIDATE_OK, SC.VALIDATE_NO_CHANGE,\n    or an error object.  If no validator is installed, this method will\n    always return SC.VALIDATE_OK.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.VALIDATE_OK, error, or SC.VALIDATE_NO_CHANGE"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "partialChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if this is a partial edit."
          }
        ]
      },
      {
        "name": "performValidateSubmit",
        "displayName": "SC.Validatable.performValidateSubmit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Runs validateSubmit.  You should use this in your implementation of \n    validateSubmit.  If no validator is installed, this always returns\n    SC.VALIDATE_OK",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "performValidateKeyDown",
        "displayName": "SC.Validatable.performValidateKeyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Runs a keypress validation.  Returns YES if the keypress should be \n    allowed, NO otherwise.  If no validator is defined, always returns YES.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "charStr",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key string"
          }
        ]
      },
      {
        "name": "validateSubmit",
        "displayName": "SC.Validatable.validateSubmit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the owner form just before submission.  Override with your \n    own method to commit any final changes after you perform validation. \n    \n    The default implementation simply calls performValidateSubmit() and \n    returns that value.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.Validatable.objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convert the field value string into an object.\n    \n    This method will call the validators objectForFieldValue if it exists.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "fieldValue",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the raw value from the field."
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "partialChange",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fieldValueForObject",
        "displayName": "SC.Validatable.fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convert the object into a field value.\n    \n    This method will call the validator's fieldValueForObject if it exists.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the objec to convert"
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "validator",
        "displayName": "SC.Validatable.validator",
        "objectType": "property",
        "propertyType": "SC.Validator",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validatable",
        "overview": "The validator for this field.  \n  \n    Set to a validator class or instance.  If this points to a class, it will \n    be instantiated when the validator is first used.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "errorLabel",
        "displayName": "SC.Validatable.errorLabel",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validatable",
        "overview": "This property must return the human readable name you want used when \n    describing an error condition.  For example, if set this property to\n    \"Your Email\", then the returned error string might be something like\n    \"Your Email is not valid\".\n    \n    You can return a loc string here if you like.  It will be localized when\n    it is placed into the error string.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isValid",
        "displayName": "SC.Validatable.isValid",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validatable",
        "overview": "YES if the receiver is currently valid.\n    \n    This property watches the value property by default.  You can override\n    this property if you want to use some other method to calculate the\n    current valid state.",
        "defaultValue": "YES",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ownerForm",
        "displayName": "SC.Validatable.ownerForm",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validatable",
        "overview": "The form that the view belongs to.  May be null if the view does not \n    belong to a form.  This property is usually set automatically by an \n    owner form view.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "validatorObject",
        "displayName": "SC.Validatable.validatorObject",
        "objectType": "property",
        "propertyType": "SC.Validator",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validatable",
        "overview": "Returns the validator object, if one has been created.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40660,
    "name": "Validator",
    "displayName": "SC.Validator",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/validator.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "Validators provide a way for you to implement simple form field validation\n  and transformation.  To use a validator, simply name the validator in the\n  \"validate\" attribute in your text field.  For example, if you want to\n  validate a field using the PhoneNumberValidator use this:\n\n  <input value=\"1234567890\" validate=\"phone-number\" />\n\n  Validators get notified at three points.  You can implement one or all\n  of these methods to support validation.  All of the validate methods except\n  for validateKeypress behave the same way.  You are passed a form, field,\n  and possibly the oldValue.  You are expected to return Validator.OK or\n  an error string.  Inside this method you typically do one of all of the\n  following:\n\n  1. You can simply validate the field value and return OK or an error str\n  \n  2. You can modify the field value (for example, you could format the\n     string to match some predefined format).\n     \n  3. If you need to roundtrip the server first to perform validation, you can\n     return Validator.OK, then save the form and field info until after the\n     roundtrip.  On return, if there is a problem, first verify the field\n     value has not changed and then call form.errorFor(field,str) ;",
    "methods": [
      {
        "name": "fieldValueForObject",
        "displayName": "SC.Validator#fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the value to set in the field for the passed object value.  \n  \n  The form and view to be set MAY (but will not always) be passed also.  You\n  should override this method to help convert an input object into a value\n  that can be displayed by the field.  For example, you might convert a \n  date to a property formatted string or a number to a properly formatted\n  value.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a value (usually a string) suitable for display"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object to transform"
          },
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The form this field belongs to. (optional)"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view the value is required for."
          }
        ]
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.Validator#objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the object value for the passed string.\n    \n    The form and view MAY (but wil not always) be passed also.  You should\n    override this method to convert a field value, such as string, into an\n    object value suitable for consumption by the rest of the app.  For example\n    you may convert a string into a date or a number.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an object suitable for consumption by the app."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field value.  (Usually a String)."
          },
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The form this field belongs to. (optional)"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The view this value was pulled from."
          }
        ]
      },
      {
        "name": "validate",
        "displayName": "SC.Validator#validate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Validate the field value.  \n    \n    You can implement standard behavior for your validator by using the validate()\n    and validateError() methods.  validate() should return NO if the field is not\n    valid, YES otherwise.  If you return NO from this method, then the validateError()\n    method will be called so you can generate an error object describing the specific problem.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if field is valid."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form this view belongs to"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate.  Responds to fieldValue."
          }
        ]
      },
      {
        "name": "validateError",
        "displayName": "SC.Validator#validateError",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns an error object if the field is invalid.\n  \n    This is the other standard validator method that can be used to impement basic validation.\n    Return an error object explaining why the field is not valid.  It will only be called if\n    validate() returned NO.\n    \n    The default implementation of htis method returns a generic error message with the loc\n    string \"Invalid.Generate({fieldValue})\".  You can simply define this loc string in\n    strings.js if you prefer or you can override this method to provide a more specific error message.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Error",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "an error object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form this view belongs to"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate.  Responds to fieldValue."
          }
        ]
      },
      {
        "name": "validateChange",
        "displayName": "SC.Validator#validateChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked just before the user ends editing of the field.\n\n    This is a primitive validation method.  You can implement the two higher-level\n    methods (validate() and validateError()) if you prefer.\n    \n    The default implementation calls your validate() method and then validateError()\n    if valiate() returns NO.  This method should return SC.VALIDATE_OK if validation\n    succeeded or an error object if it fails.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.VALIDATE_OK or an error object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "oldValue:",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the value of the field before the change"
          }
        ]
      },
      {
        "name": "validateSubmit",
        "displayName": "SC.Validator#validateSubmit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked just before the form is submitted.\n  \n    This method gives your validators one last chance to perform validation\n    on the form as a whole.  The default version does the same thing as the \n    validateChange() method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.VALIDATE_OK or an error object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          }
        ]
      },
      {
        "name": "validatePartial",
        "displayName": "SC.Validator#validatePartial",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked 1ms after the user types a key (if a change is allowed).  \n  \n    You can use this validate the new partial string and return an error if \n    needed. The default will validate a partial only if there was already an \n    error. This allows the user to try to get it right before you bug them.\n  \n    Unlike the other methods, you should return SC.VALIDATE_NO_CHANGE if you\n    did not actually validate the partial string.  If you return \n    SC.VALIDATE_OK then any showing errors will be hidden.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.VALIDATE_OK, SC.VALIDATE_NO_CHANGE or an error object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          }
        ]
      },
      {
        "name": "validateKeyDown",
        "displayName": "SC.Validator#validateKeyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked when the user presses a key.  \n  \n    This method is used to restrict the letters and numbers the user is \n    allowed to enter.  You should not use this method to perform full \n    validation on the field.  Instead use validatePartial().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if allowed, NO otherwise"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          },
          {
            "title": "param",
            "type": "String",
            "name": "char",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the characters being added"
          }
        ]
      },
      {
        "name": "attachTo",
        "displayName": "SC.Validator#attachTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called on all validators when they are attached to a field.  \n  \n    You can use this to do any setup that you need.  The default does nothing.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          }
        ]
      },
      {
        "name": "detachFrom",
        "displayName": "SC.Validator#detachFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called on a validator just before it is removed from a field.  You can \n    tear down any setup you did for the attachTo() method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          }
        ]
      },
      {
        "name": "findFor",
        "displayName": "SC.Validator.findFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by a field whenever a validator is attached to the field.\n    \n    The passed validatorKey can be a validator instance, a validator class\n    or a string naming a validator. To make your validator\n    visible, you should name your validator under the SC.Validator base.\n    for example SC.Validator.Number would get used for the 'number' \n    validator key.\n  \n    This understands validatorKey strings in the following format:\n'key' or 'multiple_words' will find validators Key and MultipleWords\nif you want to share a single validator among multiple fields (for\n      example to validate that two passwords are the same) set a name inside\n      brackets. i.e. 'password[pwd]'.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.Validator",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "validator instance or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.FormView",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the form for the field"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the field to validate"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "validatorKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the key to validate"
          }
        ]
      },
      {
        "name": "fieldValueForObject",
        "displayName": "SC.Validator.fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience class method to call the fieldValueForObject() instance\n    method you define in your subclass.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.Validator.objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience class method to call the objectForFieldValue() instance\n    method you define in your subclass.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "OK",
        "displayName": "SC.Validator.OK",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validator",
        "overview": "Return value when validation was performed and value is OK.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NO_CHANGE",
        "displayName": "SC.Validator.NO_CHANGE",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validator",
        "overview": "Return value when validation was not performed.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40499,
    "name": "CreditCard",
    "displayName": "SC.Validator.CreditCard",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/credit_card.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "Validate a field value as a credit card number. \n  \n  This validator will perform a basic check to ensure the credit card number\n  is mathematically valid.  It will also accept numbers with spaces, dashes\n  or other punctuation.  \n  \n  Converted credit card numbers are broken into units of 4.\n  \n  Basic credit card validation courtesy David Leppek \n  (https://www.azcode.com/Mod10)",
    "methods": [
      {
        "name": "fieldValueForObject",
        "displayName": "SC.Validator.CreditCard#fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Expects a string of 16 digits.  Will split into groups of 4 for display.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.Validator.CreditCard#objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all whitespace or dashes to make a single string.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "validateKeyDown",
        "displayName": "SC.Validator.CreditCard#validateKeyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Allow only numbers, dashes, and spaces",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "charStr",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 40540,
    "name": "Date",
    "displayName": "SC.Validator.Date",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/date.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "fieldValueForObject",
        "displayName": "SC.Validator.Date#fieldValueForObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "if we have a number, then convert to a date object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "objectForFieldValue",
        "displayName": "SC.Validator.Date#objectForFieldValue",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Try to pase value as a date. convert into a number, or return null if\n    it could not be parsed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "format",
        "displayName": "SC.Validator.Date#format",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validator.Date",
        "overview": "The standard format you want the validator to convert dates to.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40555,
    "name": "DateTime",
    "displayName": "SC.Validator.DateTime",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/date_time.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Juan Pablo Goldfinger",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 40562,
    "name": "Email",
    "displayName": "SC.Validator.Email",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/email.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 40567,
    "name": "EmailOrEmpty",
    "displayName": "SC.Validator.EmailOrEmpty",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/email.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator.Email"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 40571,
    "name": "NotEmpty",
    "displayName": "SC.Validator.NotEmpty",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/not_empty.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 40577,
    "name": "Number",
    "displayName": "SC.Validator.Number",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/number.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "validateKeyDown",
        "displayName": "SC.Validator.Number#validateKeyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Allow only numbers, dashes, period, and commas",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "charStr",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "places",
        "displayName": "SC.Validator.Number#places",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validator.Number",
        "overview": "Number of decimal places to show.  \n    \n    If 0, then numbers will be treated as integers.  Otherwise, numbers will\n    show with a fixed number of decimals.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 40608,
    "name": "Password",
    "displayName": "SC.Validator.Password",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/password.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Charles Jolley",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 40633,
    "name": "PositiveInteger",
    "displayName": "SC.Validator.PositiveInteger",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/foundation/validators/positive_integer.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Nirumal Thomas",
    "see": [],
    "since": "",
    "version": "1.0",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Validator"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "validateKeyDown",
        "displayName": "SC.Validator.PositiveInteger#validateKeyDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Allow only numbers",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "form",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "field",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "charStr",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "defaultValue",
        "displayName": "SC.Validator.PositiveInteger#defaultValue",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.Validator.PositiveInteger",
        "overview": "Default Value to be displayed. If the value in the text field is null,\n    undefined or an empty string, it will be replaced by this value.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 44280,
    "name": "VideoView",
    "displayName": "SC.VideoView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/media/views/video.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.1",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "Renders a videoView using different technologies like HTML5 video tag, \n  quicktime and flash.\n  \n  This view wraps the different technologies so you can use one standard and \n  simple API to play videos.\n  \n  You can specify and array with the order of how the technologies will degrad\n  depending on availability. For example you can set degradeList to be \n  ['html5', 'flash'] and it will load your video in a video tag if the \n  technology is available otherwise flash and if neither of the technologies \n  are available it will show a message saying that your machine needs to install\n  one of this technologies.",
    "methods": [
      {
        "name": "addToVideoFlashViews",
        "displayName": "SC.VideoView.addToVideoFlashViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds the flash view to the flashViews hash.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateProperty",
        "displayName": "SC.VideoView.updateProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This function is called from flash to update the properties of the corresponding\n  flash view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "scid",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "property",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "logFlash",
        "displayName": "SC.VideoView.logFlash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Function to log events coming from flash.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "message",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "flashViews",
        "displayName": "SC.VideoView.flashViews",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.VideoView",
        "overview": "Hash to store references to the different flash videos.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 14547,
    "name": "View",
    "displayName": "SC.View",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/core_foundation/views/view.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Responder"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.DelegateSupport"
      }
    ],
    "overview": "Base class for managing a view.  Views provide two functions:\n\n   1. They translate state and events into drawing instructions for the\n     web browser and\n   2. They act as first responders for incoming keyboard, mouse, and\n     touch events.\n\n  View Initialization\n  ====\n\n  When a view is setup, there are several methods you can override that\n  will be called at different times depending on how your view is created.\n  Here is a guide to which method you want to override and when:\n\n   - `init` -- override this method for any general object setup (such as\n     observers, starting timers and animations, etc) that you need to happen\n     everytime the view is created, regardless of whether or not its layer\n     exists yet.\n   - `render` -- override this method to generate or update your HTML to reflect\n     the current state of your view.  This method is called both when your view\n     is first created and later anytime it needs to be updated.\n   - `didCreateLayer` -- the render() method is used to generate new HTML.\n     Override this method to perform any additional setup on the DOM you might\n     need to do after creating the view.  For example, if you need to listen\n     for events.\n   - `willDestroyLayer` -- if you implement didCreateLayer() to setup event\n     listeners, you should implement this method as well to remove the same\n     just before the DOM for your view is destroyed.\n   - `updateLayer` -- Normally, when a view needs to update its content, it will\n     re-render the view using the render() method.  If you would like to\n     override this behavior with your own custom updating code, you can\n     replace updateLayer() with your own implementation instead.\n   - `didAppendToDocument` -- in theory all DOM setup could be done\n     in didCreateLayer() as you already have a DOM element instantiated.\n     However there is cases where the element has to be first appended to the\n     Document because there is either a bug on the browser or you are using\n     plugins which objects are not instantiated until you actually append the\n     element to the DOM. This will allow you to do things like registering\n     DOM events on flash or quicktime objects.",
    "methods": [
      {
        "name": "animate",
        "displayName": "SC.View#animate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Animate a given property using CSS animations.\n\n    Takes a key, value and either a duration, or a hash of options.\n    The options hash has the following parameters\n\n     - duration: Duration of animation in seconds\n     - callback: Callback method to run when animation completes\n     - timing: Animation timing function",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "optionsOrCallback",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "callback",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "resetAnimation",
        "displayName": "SC.View#resetAnimation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Resets animation, stopping all existing animations.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "transitionDidEnd",
        "displayName": "SC.View#transitionDidEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when animation ends, should not usually be called manually",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "hasAcceleratedLayer",
        "displayName": "SC.View#hasAcceleratedLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Specifies whether transforms can be used to move the layer.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "cursor",
        "displayName": "SC.View#cursor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You can set this to an SC.Cursor instance; whenever that SC.Cursor's\n    'cursorStyle' changes, the cursor for this view will automatically\n    be updated to match. This allows you to coordinate the cursors of\n    many views by making them all share the same cursor instance.\n\n    For example, SC.SplitView uses this ensure that it and all of its\n    children have the same cursor while dragging, so that whether you are\n    hovering over the divider or another child of the split view, the\n    proper cursor is visible.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isEnabledInPane",
        "displayName": "SC.View#isEnabledInPane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computed property returns YES if the view and all of its parent views\n    are enabled in the pane.  You should use this property when deciding\n    whether to respond to an incoming event or not.\n\n    This property is not observable.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "willLoseKeyResponderTo",
        "displayName": "SC.View#willLoseKeyResponderTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked just before you lost the key responder status.\n    The passed view is the view that is about to gain keyResponder status.\n    This gives you a chance to do any early setup. Remember that you can\n    gain/lose key responder status either because another view in the same\n    pane is becoming first responder or because another pane is about to\n    become key.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "willBecomeKeyResponderFrom",
        "displayName": "SC.View#willBecomeKeyResponderFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked just before you become the key responder.  The\n    passed view is the view that is about to lose keyResponder status.  You\n    can use this to do any setup before the view changes.\n    Remember that you can gain/lose key responder status either because\n    another view in the same pane is becoming first responder or because\n    another pane is about to become key.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Responder",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didLoseKeyResponderTo",
        "displayName": "SC.View#didLoseKeyResponderTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invokved just after the responder loses key responder status.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didBecomeKeyResponderFrom",
        "displayName": "SC.View#didBecomeKeyResponderFrom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked just after the responder gains key responder status.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "responder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "interpretKeyEvents",
        "displayName": "SC.View#interpretKeyEvents",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method will process a key input event, attempting to convert it to\n    an appropriate action method and sending it up the responder chain.  The\n    event is converted using the SC.KEY_BINDINGS hash, which maps key events\n    into method names.  If no key binding is found, then the key event will\n    be passed along using an insertText() method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object that handled event, if any"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Event",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "insertText",
        "displayName": "SC.View#insertText",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked by interpretKeyEvents() when you receive a key\n    event matching some plain text.  You can use this to actually insert the\n    text into your application, if needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver or object that handled event"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Event",
            "name": "event",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "performKeyEquivalent",
        "displayName": "SC.View#performKeyEquivalent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Recursively travels down the view hierarchy looking for a view that\n    implements the key equivalent (returning to YES to indicate it handled\n    the event).  You can override this method to handle specific key\n    equivalents yourself.\n\n    The keystring is a string description of the key combination pressed.\n    The evt is the event itself. If you handle the equivalent, return YES.\n    Otherwise, you should just return sc_super.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "keystring",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.Event",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "nextValidKeyView",
        "displayName": "SC.View#nextValidKeyView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the next valid key view. This is the next key view that\n    acceptsFirstResponder. Computed using depth first search. If the current view\n    is not valid, it will first traverse its children before trying siblings. If\n    the current view is the only valid view, the current view will be returned. Will\n    return null if no valid view can be found.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "previousValidKeyView",
        "displayName": "SC.View#previousValidKeyView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the previous valid key view. This is the previous key view that\n    acceptsFirstResponder. Traverse views in the opposite order from\n    nextValidKeyView. If the current view is the pane, tries deepest child. If the\n    current view has a previous view, tries its last child. If this view is the\n    first child, tries the parent. Will return null if no valid view can be\n    found.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "propertyDidChange",
        "displayName": "SC.View#propertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The 'frame' property depends on the 'layout' property as well as the\n    parent view's frame.  In order to properly invalidate any cached values,\n    we need to invalidate the cache whenever 'layout' changes.  However,\n    observing 'layout' does not guarantee that; the observer might not be run\n    immediately.\n\n    In order to avoid any window of opportunity where the cached frame could\n    be invalid, we need to force layoutDidChange() to always immediately run\n    whenever 'layout' is set.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "_keepCache",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "adjust",
        "displayName": "SC.View#adjust",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This convenience method will take the current layout, apply any changes\n    you pass and set it again.  It is more convenient than having to do this\n    yourself sometimes.\n\n    You can pass just a key/value pair or a hash with several pairs.  You can\n    also pass a null value to delete a property.\n\n    This method will avoid actually setting the layout if the value you pass\n    does not edit the layout.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Hash",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Object",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isFixedLayout",
        "displayName": "SC.View#isFixedLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns whether the layout is 'fixed' or not.  A fixed layout has a fixed\n    left & top position within its parent's frame as well as a fixed width and height.\n    Fixed layouts are therefore unaffected by changes to their parent view's\n    layout.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if fixed, NO otherwise"
          }
        ],
        "params": []
      },
      {
        "name": "convertFrameToView",
        "displayName": "SC.View#convertFrameToView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a frame from the receiver's offset to the target offset.  Both\n    the receiver and the target must belong to the same pane.  If you pass\n    null, the conversion will be to the pane level.\n\n    Note that the context of a view's frame is the view's parent frame.  In\n    other words, if you want to convert the frame of your view to the global\n    frame, then you should do:\n\n        var pv = this.get('parentView'), frame = this.get('frame');\n        var newFrame = pv ? pv.convertFrameToView(frame, null) : frame;",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Rect",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "converted frame"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "frame",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source frame"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "targetView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target view to convert to"
          }
        ]
      },
      {
        "name": "convertFrameFromView",
        "displayName": "SC.View#convertFrameFromView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts a frame offset in the coordinates of another view system to the\n    receiver's view.\n\n    Note that the convext of a view's frame is relative to the view's\n    parentFrame.  For example, if you want to convert the frame of view that\n    belongs to another view to the receiver's frame you would do:\n\n        var frame = view.get('frame');\n        var newFrame = this.convertFrameFromView(frame, view.get('parentView'));",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Rect",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "converted frame"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "frame",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the source frame"
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "targetView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the target view to convert to"
          }
        ]
      },
      {
        "name": "scrollToVisible",
        "displayName": "SC.View#scrollToVisible",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempt to scroll the view to visible.  This will walk up the parent\n    view hierarchy looking looking for a scrollable view.  It will then\n    call scrollToVisible() on it.\n\n    Returns YES if an actual scroll took place, no otherwise.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "computeFrameWithParentFrame",
        "displayName": "SC.View#computeFrameWithParentFrame",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes what the frame of this view would be if the parent were resized\n    to the passed dimensions.  You can use this method to project the size of\n    a frame based on the resize behavior of the parent.\n\n    This method is used especially by the scroll view to automatically\n    calculate when scrollviews should be visible.\n\n    Passing null for the parent dimensions will use the actual current\n    parent dimensions.  This is the same method used to calculate the current\n    frame when it changes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Rect",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the computed frame"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Rect",
            "name": "pdim",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the projected parent dimensions"
          },
          {
            "title": "param",
            "type": "",
            "name": "pdim",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "borderFrame",
        "displayName": "SC.View#borderFrame",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The frame of the view including the borders",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "parentViewDidResize",
        "displayName": "SC.View#parentViewDidResize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method may be called on your view whenever the parent view resizes.\n\n    The default version of this method will reset the frame and then call\n    viewDidResize().  You will not usually override this method, but you may\n    override the viewDidResize() method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "viewDidResize",
        "displayName": "SC.View#viewDidResize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked on your view when the view resizes due to a layout\n    change or potentially due to the parent view resizing (if your viewâs size\n    depends on the size of your parent view).  You can override this method\n    to implement your own layout if you like, such as performing a grid\n    layout.\n\n    The default implementation simply notifies about the change to 'frame' and\n    then calls parentViewDidResize on all of your children.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "beginLiveResize",
        "displayName": "SC.View#beginLiveResize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method when you plan to begin a live resize.  This will\n    notify the receiver view and any of its children that are interested\n    that the resize is about to begin.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "endLiveResize",
        "displayName": "SC.View#endLiveResize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method when you are finished with a live resize.  This will\n    notify the receiver view and any of its children that are interested\n    that the live resize has ended.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "layoutView",
        "displayName": "SC.View#layoutView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The view responsible for laying out this view.  The default version\n    returns the current parent view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "layoutDidChange",
        "displayName": "SC.View#layoutDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called whenever a property changes that invalidates the\n    layout of the view.  Changing the layout will do this automatically, but\n    you can add others if you want.\n\n    Implementation Note:  In a traditional setup, we would simply observe\n    'layout' here, but as described above in the documentation for our custom\n    implementation of propertyDidChange(), this method must always run\n    immediately after 'layout' is updated to avoid the potential for stale\n    (incorrect) cached 'frame' values.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "layoutDidChangeFor",
        "displayName": "SC.View#layoutDidChangeFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "One of two methods that are invoked whenever one of your childViews\n    layout changes.  This method is invoked everytime a child view's layout\n    changes to give you a chance to record the information about the view.\n\n    Since this method may be called many times during a single run loop, you\n    should keep this method pretty short.  The other method called when layout\n    changes, layoutChildViews(), is invoked only once at the end of\n    the run loop.  You should do any expensive operations (including changing\n    a childView's actual layer) in this other method.\n\n    Note that if as a result of running this method you decide that you do not\n    need your layoutChildViews() method run later, you can set the\n    childViewsNeedsLayout property to NO from this method and the layout\n    method will not be called layer.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "childView",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the view whose layout has changed."
          }
        ]
      },
      {
        "name": "layoutChildViewsIfNeeded",
        "displayName": "SC.View#layoutChildViewsIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called your layout method if the view currently needs to layout some\n    child views.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Boolean",
            "name": "isVisible",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if true assume view is visible even if it is not."
          }
        ]
      },
      {
        "name": "layoutChildViews",
        "displayName": "SC.View#layoutChildViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Applies the current layout to the layer.  This method is usually only\n    called once per runloop.  You can override this method to provide your\n    own layout updating method if you want, though usually the better option\n    is to override the layout method from the parent view.\n\n    The default implementation of this method simply calls the renderLayout()\n    method on the views that need layout.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "updateLayout",
        "displayName": "SC.View#updateLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by the layoutChildViews method to update the layout on a\n    particular view.  This method creates a render context and calls the\n    renderLayout() method, which is probably what you want to override instead\n    of this.\n\n    You will not usually override this method, but you may call it if you\n    implement layoutChildViews() in a view yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "renderLayout",
        "displayName": "SC.View#renderLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default method called by the layout view to actually apply the current\n    layout to the layer.  The default implementation simply assigns the\n    current layoutStyle to the layer.  This method is also called whenever\n    the layer is first created.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "the",
            "isOptional": false,
            "defaultValue": "",
            "desc": "render context"
          },
          {
            "title": "param",
            "type": "",
            "name": "firstTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "convertLayoutToAnchoredLayout",
        "displayName": "SC.View.convertLayoutToAnchoredLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convert any layout to a Top, Left, Width, Height layout",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "layout",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "parentFrame",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "convertLayoutToCustomLayout",
        "displayName": "SC.View.convertLayoutToCustomLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "For now can only convert Top/Left/Width/Height to a Custom Layout",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "layout",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "layoutParams",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "parentFrame",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutStyle",
        "displayName": "SC.View#layoutStyle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "layoutStyle describes the current styles to be written to your element\n    based on the layout you defined.  Both layoutStyle and frame reset when\n    you edit the layout property.  Both are read only.\n\n    Computes the layout style settings needed for the current anchor.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "layerIdDidChange",
        "displayName": "SC.View#layerIdDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Handles changes in the layer id.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "parentViewDidChange",
        "displayName": "SC.View#parentViewDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called whenever the receiver's parentView has changed.\n    The default implementation of this method marks the view's display\n    location as dirty so that it will update at the end of the run loop.\n\n    You will not usually need to override or call this method yourself, though\n    if you manually patch the parentView hierarchy for some reason, you should\n    call this method to notify the view that it's parentView has changed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "insertBefore",
        "displayName": "SC.View#insertBefore",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Insert the view into the the receiver's childNodes array.\n\n    The view will be added to the childNodes array before the beforeView.  If\n    beforeView is null, then the view will be added to the end of the array.\n    This will also add the view's rootElement DOM node to the receivers\n    containerElement DOM node as a child.\n\n    If the specified view already belongs to another parent, it will be\n    removed from that view first.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "SC.View",
            "name": "beforeView",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "replaceChild",
        "displayName": "SC.View#replaceChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Replace the oldView with the specified view in the receivers childNodes\n    array. This will also replace the DOM node of the oldView with the DOM\n    node of the new view in the receivers DOM.\n\n    If the specified view already belongs to another parent, it will be\n    removed from that view first.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.View} the view to insert in the DOM"
          },
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.View} the view to remove from the DOM."
          }
        ]
      },
      {
        "name": "replaceAllChildren",
        "displayName": "SC.View#replaceAllChildren",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Replaces the current array of child views with the new array of child\n    views.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Array",
            "name": "views",
            "isOptional": false,
            "defaultValue": "",
            "desc": "views you want to add"
          }
        ]
      },
      {
        "name": "appendChild",
        "displayName": "SC.View#appendChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Appends the specified view to the end of the receivers childViews array.\n    This is equivalent to calling insertBefore(view, null);",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.View} the view to insert"
          }
        ]
      },
      {
        "name": "buildInChild",
        "displayName": "SC.View#buildInChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this to append a child while building it in. If the child is not\n    buildable, this is the same as calling appendChild.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "buildOutChild",
        "displayName": "SC.View#buildOutChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call to remove a child after building it out. If the child is not buildable,\n    this will simply call removeChild.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "buildInDidFinishFor",
        "displayName": "SC.View#buildInDidFinishFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by child view when build in finishes. By default, does nothing.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "child",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "buildIn",
        "displayName": "SC.View#buildIn",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this, and call didFinishBuildIn when you are done.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildOut",
        "displayName": "SC.View#buildOut",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this, and call didFinsihBuildOut when you are done.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "resetBuild",
        "displayName": "SC.View#resetBuild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This should reset (without animation) any internal states; sometimes called before.\n\n    It is usually called before a build in, by the parent view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildOutDidCancel",
        "displayName": "SC.View#buildOutDidCancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this if you need to do anything special when cancelling build out;\n    note that buildIn will subsequently be called, so you usually won't need to do\n    anything.\n\n    This is basically called whenever build in happens.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildInDidCancel",
        "displayName": "SC.View#buildInDidCancel",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Implement this if you need to do anything special when cancelling build in.\n    You probably won't be able to do anything. I mean, what are you gonna do?\n\n    If build in was cancelled, it means build out is probably happening.\n    So, any timers or anything you had going, you can cancel.\n    Then buildOut will happen.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildInDidFinish",
        "displayName": "SC.View#buildInDidFinish",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this when you have built in.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "buildOutDidFinish",
        "displayName": "SC.View#buildOutDidFinish",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this when you have finished building out.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "resetBuildState",
        "displayName": "SC.View#resetBuildState",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Usually called by parentViewDidChange, this resets the build state (calling resetBuild in the process).",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "theme",
        "displayName": "SC.View#theme",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The SC.Theme instance which this view should use to render.\n\n    Note: the actual code for this function is in _themeProperty for backwards-compatibility:\n    some older views specify a string value for 'theme', which would override this property,\n    breaking it.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getThemedProperty",
        "displayName": "SC.View#getThemedProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the named property if it is specified on the view, and\notherwise returns the named constant from the view's theme.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "property",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The property on the view."
          },
          {
            "title": "param",
            "type": "String",
            "name": "constantName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The name of the constant on the theme."
          }
        ]
      },
      {
        "name": "renderDelegate",
        "displayName": "SC.View#renderDelegate",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The object to which rendering and updating the HTML representation of this\n    view should be delegated.\n\n    By default, views are responsible for creating their own HTML\n    representation. In some cases, however, you may want to create an object\n    that is responsible for rendering all views of a certain type. For example,\n    you may want rendering of SC.ButtonView to be controlled by an object that\n    is specific to the current theme.\n\n    By setting a render delegate, the render and update methods will be called\n    on that object instead of the view itself.\n\n    For your convenience, the view will provide its displayProperties to the\n    RenderDelegate. In some cases, you may have a conflict between the RenderDelegate's\n    API and your view's. For instance, you may have a 'value' property that is\n    any number, but the render delegate expects a percentage. Make a 'displayValue'\n    property, add _it_ to displayProperties instead of 'value', and the Render Delegate\n    will automatically use that when it wants to find 'value.'\n\n    You can also set the render delegate by using the 'renderDelegateName' property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "renderDelegateProxy",
        "displayName": "SC.View#renderDelegateProxy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "[RO] Pass this object as the data source for render delegates. This proxy object\n    for the view relays requests for properties like 'title' to 'displayTitle'\n    as necessary.\n\n    If you ever communicate with your view's render delegate, you should pass this\n    object as the data source.\n\n    The proxy that forwards RenderDelegate requests for properties to the view,\n    handling display*, keeps track of the delegate's state, etc.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "render",
        "displayName": "SC.View#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever your view needs to create its HTML representation.\n\n    You will normally override this method in your subclassed views to\n    provide whatever drawing functionality you will need in order to\n    render your content.\n\n    This method is usually only called once per view. After that, the update\n    method will be called to allow you to update the existing HTML\n    representation.\n\n\n    The default implementation of this method calls renderChildViews().\n\n    For backwards compatibility, this method will also call the appropriate\n    method on a render delegate object, if your view has one.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the render context"
          },
          {
            "title": "param",
            "type": "",
            "name": "firstTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "touchIsInBoundary",
        "displayName": "SC.View#touchIsInBoundary",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the provided touch is within the boundary.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "touch",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "isContextMenuEnabled",
        "displayName": "SC.View#isContextMenuEnabled",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "By default we don't disable the context menu. Overriding this property\n   can enable/disable the context menu per view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "recomputeIsVisibleInWindow",
        "displayName": "SC.View#recomputeIsVisibleInWindow",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Recomputes the isVisibleInWindow property based on the visibility of the\n    view and its parent.  If the recomputed value differs from the current\n    isVisibleInWindow state, this method will also call\n    recomputIsVisibleInWindow() on its child views as well.  As an optional\n    optimization, you can pass the isVisibleInWindow state of the parentView\n    if you already know it.\n\n    You will not generally need to call or override this method yourself. It\n    is used by the SC.View hierarchy to relay window visibility changes up\n    and down the chain.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "parentViewIsVisible",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "pane",
        "displayName": "SC.View#pane",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current pane.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "layer",
        "displayName": "SC.View#layer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current layer for the view.  The layer for a view is only\n    generated when the view first becomes visible in the window and even\n    then it will not be computed until you request this layer property.\n\n    If the layer is not actually set on the view itself, then the layer will\n    be found by calling this.findLayerInParentLayer().\n\n    You can also set the layer by calling set on this property.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "$",
        "displayName": "SC.View#$",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get a CoreQuery object for this view's layer, or pass in a selector string\n    to get a CoreQuery object for a DOM node nested within this layer.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CoreQuery",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the CoreQuery object for the DOM node"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "sel",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a CoreQuery-compatible selector string"
          }
        ]
      },
      {
        "name": "containerLayer",
        "displayName": "SC.View#containerLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the DOM element that should be used to hold child views when they\n    are added/remove via DOM manipulation.  The default implementation simply\n    returns the layer itself.  You can override this to return a DOM element\n    within the layer.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "layerId",
        "displayName": "SC.View#layerId",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The ID to use when trying to locate the layer in the DOM.  If you do not\n    set the layerId explicitly, then the view's GUID will be used instead.\n    This ID must be set at the time the view is created.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "findLayerInParentLayer",
        "displayName": "SC.View#findLayerInParentLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to discover the layer in the parent layer.  The default\n    implementation looks for an element with an ID of layerId (or the view's\n    guid if layerId is null).  You can override this method to provide your\n    own form of lookup.  For example, if you want to discover your layer using\n    a CSS class name instead of an ID.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "DOMElement",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the discovered layer"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "DOMElement",
            "name": "parentLayer",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the parent's DOM layer"
          }
        ]
      },
      {
        "name": "isDescendantOf",
        "displayName": "SC.View#isDescendantOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the receiver is a subview of a given view or if it's\n    identical to that view. Otherwise, it returns NO.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "displayDidChange",
        "displayName": "SC.View#displayDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked whenever a display property changes.  It will set\n    the layerNeedsUpdate method to YES.  If you need to perform additional\n    setup whenever the display changes, you can override this method as well.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "updateLayerIfNeeded",
        "displayName": "SC.View#updateLayerIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the layer only if the view is visible onscreen and if\n    layerNeedsUpdate is set to YES.  Normally you will not invoke this method\n    directly.  Instead you set the layerNeedsUpdate property to YES and this\n    method will be called once at the end of the runloop.\n\n    If you need to update view's layer sooner than the end of the runloop, you\n    can call this method directly.  If your view is not visible in the window\n    but you want it to update anyway, then call this method, passing YES for\n    the 'skipIsVisibleInWindowCheck' parameter.\n\n    You should not override this method.  Instead override updateLayer() or\n    render().",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "skipIsVisibleInWindowCheck",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateLayer",
        "displayName": "SC.View#updateLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is the core method invoked to update a view layer whenever it has\n    changed.  This method simply creates a render context focused on the\n    layer element and then calls your render() method.\n\n    You will not usually call or override this method directly.  Instead you\n    should set the layerNeedsUpdate property to YES to cause this method to\n    run at the end of the run loop, or you can call updateLayerIfNeeded()\n    to force the layer to update immediately.\n\n    Instead of overriding this method, consider overidding the render() method\n    instead, which is called both when creating and updating a layer.  If you\n    do not want your render() method called when updating a layer, then you\n    should override this method instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "optionalContext",
            "isOptional": false,
            "defaultValue": "",
            "desc": "provided only for backwards-compatibility."
          }
        ]
      },
      {
        "name": "renderContext",
        "displayName": "SC.View#renderContext",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new renderContext with the passed tagName or element.  You\n    can override this method to provide further customization to the context\n    if needed.  Normally you will not need to call or override this method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "tagNameOrElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "createLayer",
        "displayName": "SC.View#createLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates the layer by creating a renderContext and invoking the view's\n    render() method.  This will only create the layer if the layer does not\n    already exist.\n\n    When you create a layer, it is expected that your render() method will\n    also render the HTML for all child views as well.  This method will\n    notify the view along with any of its childViews that its layer has been\n    created.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "destroyLayer",
        "displayName": "SC.View#destroyLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys any existing layer along with the layer for any child views as\n    well.  If the view does not currently have a layer, then this method will\n    do nothing.\n\n    If you implement willDestroyLayer() on your view or if any mixins\n    implement willDestroLayerMixin(), then this method will be invoked on your\n    view before your layer is destroyed to give you a chance to clean up any\n    event handlers, etc.\n\n    If you write a willDestroyLayer() handler, you can assume that your\n    didCreateLayer() handler was called earlier for the same layer.\n\n    Normally you will not call or override this method yourself, but you may\n    want to implement the above callbacks when it is run.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "replaceLayer",
        "displayName": "SC.View#replaceLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Destroys and recreates the current layer.  This can be more efficient than\n    modifying individual child views.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "updateLayerLocationIfNeeded",
        "displayName": "SC.View#updateLayerLocationIfNeeded",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Calls updateLayerLocation(), but only if the view's layer location\n    currently needs to be updated.  This method is called automatically at\n    the end of a run loop if you have called parentViewDidChange() at some\n    point.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "force",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateLayerLocation",
        "displayName": "SC.View#updateLayerLocation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when a view changes its location in the view\n    hierarchy.  This method will update the underlying DOM-location of the\n    layer so that it reflects the new location.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "renderChildViews",
        "displayName": "SC.View#renderChildViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Your render method should invoke this method to render any child views,\n    especially if this is the first time the view will be rendered.  This will\n    walk down the childView chain, rendering all of the children in a nested\n    way.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.RenderContext",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the render context"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the context"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstName",
            "isOptional": false,
            "defaultValue": "",
            "desc": "true if the layer is being created"
          }
        ]
      },
      {
        "name": "displayToolTip",
        "displayName": "SC.View#displayToolTip",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The computed tooltip.  This is generated by localizing the toolTip\n    property if necessary.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "nextResponder",
        "displayName": "SC.View#nextResponder",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "awake",
        "displayName": "SC.View#awake",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Wakes up the view. The default implementation immediately syncs any\n    bindings, which may cause the view to need its display updated. You\n    can override this method to perform any additional setup. Be sure to\n    call sc_super to setup bindings and to call awake on childViews.\n\n    It is best to awake a view before you add it to the DOM.  This way when\n    the DOM is generated, it will have the correct initial values and will\n    not require any additional setup.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "void",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "frame",
        "displayName": "SC.View#frame",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Frame describes the current bounding rect for your view.  This is always\n    measured from the top-left corner of the parent view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "clippingFrame",
        "displayName": "SC.View#clippingFrame",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The clipping frame returns the visible portion of the view, taking into\n    account the clippingFrame of the parent view.  Keep in mind that\n    the clippingFrame is in the context of the view itself, not it's parent\n    view.\n\n    Normally this will be calculated based on the intersection of your own\n    clippingFrame and your parentView's clippingFrame.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "removeChild",
        "displayName": "SC.View#removeChild",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the child view from the parent view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "removeAllChildren",
        "displayName": "SC.View#removeAllChildren",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes all children from the parentView.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "removeFromParent",
        "displayName": "SC.View#removeFromParent",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the view from its parentView, if one is found.  Otherwise\n    does nothing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "destroy",
        "displayName": "SC.View#destroy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "You must call this method on a view to destroy the view (and all of its\n    child views). This will remove the view from any parent node, then make\n    sure that the DOM element managed by the view can be released by the\n    memory manager.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "createChildViews",
        "displayName": "SC.View#createChildViews",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when your view is first created to setup any  child\n    views that are already defined on your class.  If any are found, it will\n    instantiate them for you.\n\n    The default implementation of this method simply steps through your\n    childViews array, which is expects to either be empty or to contain View\n    designs that can be instantiated\n\n    Alternatively, you can implement this method yourself in your own\n    subclasses to look for views defined on specific properties and then build\n     a childViews array yourself.\n\n    Note that when you implement this method yourself, you should never\n    instantiate views directly.  Instead, you should use\n    this.createChildView() method instead.  This method can be much faster in\n    a production environment than creating views yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": []
      },
      {
        "name": "createChildView",
        "displayName": "SC.View#createChildView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Instantiates a view to be added to the childViews array during view\n    initialization. You generally will not call this method directly unless\n    you are overriding createChildViews(). Note that this method will\n    automatically configure the correct settings on the new view instance to\n    act as a child of the parent.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Class",
            "name": "viewClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional attributes to add"
          }
        ]
      },
      {
        "name": "selectStart",
        "displayName": "SC.View#selectStart",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Default method called when a selectstart event is triggered. This event is\n    only supported by IE. Used in sproutcore to disable text selection and\n    IE8 accelerators. The accelerators will be enabled only in\n    text selectable views. In FF and Safari we use the css style 'allow-select'.\n\n    If you want to enable text selection in certain controls is recommended\n    to override this function to always return YES , instead of setting\n    isTextSelectable to true.\n\n    For example in textfield you dont want to enable textSelection on the text\n    hint only on the actual text you are entering. You can achieve that by\n    only overriding this method.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if selectable"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Event} the selectstart event"
          }
        ]
      },
      {
        "name": "contextMenu",
        "displayName": "SC.View#contextMenu",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to block the contextMenu per view.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the contextmenu can show up"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{SC.Event} the contextmenu event"
          }
        ]
      },
      {
        "name": "design",
        "displayName": "SC.View#design",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method works just like extend() except that it will also preserve\n    the passed attributes in case you want to use a view builder later, if\n    needed.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Class",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "SC.View subclass to create"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Attributes to add to view"
          }
        ]
      },
      {
        "name": "childView",
        "displayName": "SC.View#childView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper adds the childView",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "cv",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "bind",
        "displayName": "SC.View#bind",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper adds a binding to a design",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "prop",
        "displayName": "SC.View#prop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Helper sets a generic property on a design.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "keyName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "localization",
        "displayName": "SC.View#localization",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Used to construct a localization for a view.  The default implementation\n    will simply return the passed attributes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "rootElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "viewFor",
        "displayName": "SC.View#viewFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a view instance, first finding the DOM element you name and then\n    using that as the root element.  You should not use this method very\n    often, but it is sometimes useful if you want to attach to already\n    existing HTML.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "instance"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String|Element",
            "name": "element",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "create",
        "displayName": "SC.View#create",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Create a new view with the passed attributes hash.  If you have the\n    Designer module loaded, this will also create a peer designer if needed.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "loc",
        "displayName": "SC.View#loc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Applies the passed localization hash to the component views.  Call this\n    method before you call create().  Returns the receiver.  Typically you\n    will do something like this:\n\n    view = SC.View.design({...}).loc(localizationHash).create();",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.View",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Hash",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "rootElement",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} optional rootElement with prepped HTML"
          }
        ]
      },
      {
        "name": "applyLocalizedAttributes",
        "displayName": "SC.View#applyLocalizedAttributes",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Internal method actually updates the localizated attributes on the view\n    class.  This is overloaded in design mode to also save the attributes.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "splitView",
        "displayName": "SC.View#splitView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current split view this view is embedded in (may be null).",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "respondsTo",
        "displayName": "SC.View#respondsTo",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the view has a designer, then patch respondsTo...",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "tryToPerform",
        "displayName": "SC.View#tryToPerform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "If the view has a designer, give it an opportunity to handle an event \n  before passing it on to the main view.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "methodName",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg1",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "arg2",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "emitDesign",
        "displayName": "SC.View#emitDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Extend `SC.View` with `emitDesign()` which will encode the view and all of its\n  subviews then computes an empty element to attach to the design.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "encodeDesign",
        "displayName": "SC.View#encodeDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Patch `SC.View` to respond to `encodeDesign()`.  This will proxy to the\n  paired designer, if there is one.  If there is no paired designer, returns\n  `NO`.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "wantsAcceleratedLayer",
        "displayName": "SC.View#wantsAcceleratedLayer",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Setting wantsAcceleratedLayer to YES will use transforms to move the\n    layer when available. On some platforms transforms are hardware accelerated.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldInheritCursor",
        "displayName": "SC.View#shouldInheritCursor",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "A child view without a cursor of its own inherits its parent's cursor by\n    default.  Set this to NO to prevent this behavior.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isEnabled",
        "displayName": "SC.View#isEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Set to true when the item is enabled.   Note that changing this value\n    will alter the isVisibleInWindow property for this view and any\n    child views as well as to automatically add or remove a 'disabled' CSS\n    class name.\n\n    This property is observable and bindable.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isKeyResponder",
        "displayName": "SC.View#isKeyResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "firstKeyView",
        "displayName": "SC.View#firstKeyView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The first child of this view for the purposes of tab ordering. If not\n    provided, the first element of childViews is used. Override this if\n    your view displays its child views in an order different from that\n    given in childViews.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "lastKeyView",
        "displayName": "SC.View#lastKeyView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The last child of this view for the purposes of tab ordering. If not set, can be generated two different ways:\n    1. If firstKeyView is provided, it will be generated by starting from firstKeyView and traversing the childViews nextKeyView properties.\n    2. If firstKeyView is not provided, it will simply return the last element of childViews.\n\n    The first way is not very efficient, so if you provide firstKeyView you should also provide lastKeyView.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "nextKeyView",
        "displayName": "SC.View#nextKeyView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Optionally points to the next key view that should gain focus when tabbing\n    through an interface.  If this is not set, then the next key view will\n    be set automatically to the next sibling as defined by its parent's\n    childViews property.\n\n    If any views define this, all of their siblings should define it as well,\n    otherwise undefined behavior may occur. Their parent view should also define\n    a firstKeyView.\n\n    This may also be set to a view that is not a sibling, but once again all\n    views in the chain must define it or undefined behavior will occur.\n\n    Likewise, any view that sets nextKeyView should also set previousKeyView.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "previousKeyView",
        "displayName": "SC.View#previousKeyView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Optionally points to the previous key view that should gain focus when tabbing\n    through an interface.  If this is not set, then the previous key view will\n    be set automatically to the previous sibling as defined by its parent's\n    childViews property.\n\n    If any views define this, all of their siblings should define it as well,\n    otherwise undefined behavior may occur. Their parent view should also define\n    a lastKeyView.\n\n    This may also be set to a view that is not a sibling, but once again all\n    views in the chain must define it or undefined behavior will occur.\n\n    Likewise, any view that sets previousKeyView should also set nextKeyView.",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasLayout",
        "displayName": "SC.View#hasLayout",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Set to YES to indicate the view has visibility support added.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "backgroundColor",
        "displayName": "SC.View#backgroundColor",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Optional background color.  Will be applied to the view's element if\n    set.  This property is intended for one-off views that need a background\n    element.  If you plan to create many view instances it is probably better\n    to use CSS.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "useStaticLayout",
        "displayName": "SC.View#useStaticLayout",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Activates use of brower's static layout. To activate, set this\n    property to YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layout",
        "displayName": "SC.View#layout",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The layout describes how you want your view to be positioned on the\n    screen.  You can define the following properties:\n\n     - left: the left edge\n     - top: the top edge\n     - right: the right edge\n     - bottom: the bottom edge\n     - height: the height\n     - width: the width\n     - centerX: an offset from center X\n     - centerY: an offset from center Y\n     - minWidth: a minimum width\n     - minHeight: a minimum height\n     - maxWidth: a maximum width\n     - maxHeight: a maximum height\n     - border: border on all sides\n     - borderTop: top border\n     - borderRight: right border\n     - borderBottom: bottom border\n     - borderLeft: bottom left\n     - zIndex: position above or below other views\n\n    Note that you can only use certain combinations to set layout.  For\n    example, you may set left/right or left/width, but not left/width/right,\n    since that combination doesn't make sense.\n\n    Likewise, you may set a minWidth/minHeight, or maxWidth/maxHeight, but\n    if you also set the width/height explicitly, then those constraints won't\n    matter as much.\n\n    Layout is designed to maximize reliance on the browser's rendering\n    engine to keep your app up to date.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "childViewsNeedLayout",
        "displayName": "SC.View#childViewsNeedLayout",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "This this property to YES whenever the view needs to layout its child\n    views.  Normally this property is set automatically whenever the layout\n    property for a child view changes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isBuildingIn",
        "displayName": "SC.View#isBuildingIn",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Whether the view is currently building in.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isBuildingOut",
        "displayName": "SC.View#isBuildingOut",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Whether the view is currently building out.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "themeName",
        "displayName": "SC.View#themeName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Names which theme this view should use; the theme named by this property\n    will be set to the view's 'theme' property.\n\n    Themes are identified by their name. In addition to looking for the\n    theme globally, SproutCore will look for the theme inside 'baseTheme',\n    which is almost always the parent view's theme.\n\n    If null (the default), the view will set its 'theme' property to\n    be equal to 'baseTheme'.\n\n    Example: themeName: 'ace'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.View#renderDelegateName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The name of the property of the current theme that contains the render\n    delegate to use for this view.\n\n    By default, views are responsible for creating their own HTML\n    representation. You can tell the view to instead delegate rendering to the\n    theme by setting this property to the name of the corresponding property\n    of the theme.\n\n    For example, to tell the view that it should render using the\n    SC.ButtonView render delegate, set this property to\n    'buttonRenderDelegate'. When the view is created, it will retrieve the\n    buttonRenderDelegate property from its theme and set the renderDelegate\n    property to that object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsMultitouch",
        "displayName": "SC.View#acceptsMultitouch",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Set to YES if you want to receive touch events for each distinct touch (rather than only\n    the first touch start and last touch end).",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasTouch",
        "displayName": "SC.View#hasTouch",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Is YES if the view is currently being touched. NO otherwise.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "touchBoundary",
        "displayName": "SC.View#touchBoundary",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "A boundary set of distances outside which the touch will not be considered \"inside\" the view anymore.\n\n    By default, up to 50px on each side.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "hasVisibility",
        "displayName": "SC.View#hasVisibility",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Set to YES to indicate the view has visibility support added.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isVisibleInWindow",
        "displayName": "SC.View#isVisibleInWindow",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "YES only if the view and all of its parent views are currently visible\n    in the window.  This property is used to optimize certain behaviors in\n    the view.  For example, updates to the view layer are not performed\n    if the view until the view becomes visible in the window.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "page",
        "displayName": "SC.View#page",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The page this view was instantiated from.  This is set by the page object\n    during instantiation.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "parentView",
        "displayName": "SC.View#parentView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "If the view is currently inserted into the DOM of a parent view, this\n    property will point to the parent of the view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isVisible",
        "displayName": "SC.View#isVisible",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The isVisible property determines if the view is shown in the view\n    hierarchy it is a part of. A view can have isVisible == YES and still have\n    isVisibleInWindow == NO. This occurs, for instance, when a parent view has\n    isVisible == NO. Default is YES.\n\n    The isVisible property is considered part of the layout and so changing it\n    will trigger a layout update.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "childViews",
        "displayName": "SC.View#childViews",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Array of child views.  You should never edit this array directly unless\n    you are implementing createChildViews().  Most of the time, you should\n    use the accessor methods such as appendChild(), insertBefore() and\n    removeChild().",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layerNeedsUpdate",
        "displayName": "SC.View#layerNeedsUpdate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Setting this property to YES will cause the updateLayerIfNeeded method to\n    be invoked at the end of the runloop.  You can also force a view to update\n    sooner by calling updateLayerIfNeeded() directly.  The method will update\n    the layer only if this property is YES.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "layerLocationNeedsUpdate",
        "displayName": "SC.View#layerLocationNeedsUpdate",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Set to YES when the view's layer location is dirty.  You can call\n    updateLayerLocationIfNeeded() to clear this flag if it is set.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "tagName",
        "displayName": "SC.View#tagName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Tag name for the view's outer element.  The tag name is only used when\n    a layer is first created.  If you change the tagName for an element, you\n    must destroy and recreate the view layer.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "ariaRole",
        "displayName": "SC.View#ariaRole",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "The WAI-ARIA role of the control represented by this view. For example, a\n    button may have a role of type 'button', or a pane may have a role of\n    type 'alertdialog'. This property is used by assistive software to help\n    visually challenged users navigate rich web applications.\n\n    The full list of valid WAI-ARIA roles is available at:\n    http://www.w3.org/TR/wai-aria/roles#roles_categorization",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "classNames",
        "displayName": "SC.View#classNames",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Standard CSS class names to apply to the view's outer element.  This\n    property automatically inherits any class names defined by the view's\n    superclasses as well.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toolTip",
        "displayName": "SC.View#toolTip",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Tool tip property that will be set to the title attribute on the HTML\n    rendered element.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isTextSelectable",
        "displayName": "SC.View#isTextSelectable",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "Determines if the user can select text within the view.  Normally this is\n    set to NO to disable text selection.  You should set this to YES if you\n    are creating a view that includes editable text.  Otherwise, settings this\n    to YES will probably make your controls harder to use and it is not\n    recommended.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.View#displayProperties",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "You can set this array to include any properties that should immediately\n    invalidate the display.  The display will be automatically invalidated\n    when one of these properties change.\n\n    These are the properties that will be visible to any Render Delegate.\n    When the RenderDelegate asks for a property it needs, the view checks the\n    displayProperties array. It first looks for the property name prefixed\n    by 'display'; for instance, if the render delegate needs a 'title',\n    the view will attempt to find 'displayTitle'. If there is no 'displayTitle'\n    in displayProperties, the view will then try 'title'. If 'title' is not\n    in displayProperties either, an error will be thrown.\n\n    This allows you to avoid collisions between your view's API and the Render\n    Delegate's API.\n\n    Implementation note:  'isVisible' is also effectively a display property,\n    but it is not declared as such because the same effect is implemented\n    inside _sc_isVisibleDidChange().  This avoids having two observers on\n    'isVisible', which is:\n      a.  More efficient\n      b.  More correct, because we can guarantee the order of operations",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptsFirstResponder",
        "displayName": "SC.View#acceptsFirstResponder",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isView",
        "displayName": "SC.View#isView",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.View",
        "overview": "walk like a duck",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 34106,
    "name": "ViewDesigner",
    "displayName": "SC.ViewDesigner",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/experimental/frameworks/designer/designers/view_designer.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "A Designer class provides the core editing functionality you need to edit\n  a view in the UI.  When your app loads in `design.mode`, a peer Designer\n  instance is created for every view using the class method Designer or\n  `SC.ViewDesigner` if the view class does not define a Designer class.\n  \n  Whenever you put your app into design mode, all events will be routed first\n  to the peer designer for an object, which will have an opportunity to \n  prosent a design UI.\n\n  Likewise, the designer palettes provided by the view builder will focus on \n  the designer instead of the view itself.\n  \n  ## Designer UI\n  \n  The basic ViewDesigner class automatically handles the UI interaction for\n  layout.  You can also double click on the view to perform a default action.\n  \n  For views with `isContainerView` set to `YES`, double clicking on the view will\n  automatically \"focus\" the view.  This allows you to select the view's \n  children instead of the view itself.",
    "methods": [
      {
        "name": "page",
        "displayName": "SC.ViewDesigner#page",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current page.  Comes from the object.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "designController",
        "displayName": "SC.ViewDesigner#designController",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The design controller from the page.  Comes from page",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "encodeSimpleProperties",
        "displayName": "SC.ViewDesigner#encodeSimpleProperties",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes any simple properties that can just be copied from the object onto\n    the coder.  This is used by encodeDesignProperties() and \n    encodeLocalizedProperties().",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "props",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeDesign",
        "displayName": "SC.ViewDesigner#encodeDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by a design coder to encode design properties.  The default \n    implementation invoked `encodeDesignProperties()` and\n    `encodeChildViewsDesign()`.  You can override this method with your own\n    additional encoding if you like.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeDesignProperties",
        "displayName": "SC.ViewDesigner#encodeDesignProperties",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes the design properties for the object.  These properties are simply\n    copied from the object onto the coder.  As an optimization, the value of \n    each property will be checked against the default value in the class. If\n    they match, the property will not be emitted.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeLoc",
        "displayName": "SC.ViewDesigner#encodeLoc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked by a localization coder to encode design properties.  The default \n    implementation invoked `encodeLocalizedProperties()` and\n    `encodeChildViewsLoc()`.  You can override this method with your own\n    additional encoding if you like.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeLocalizedProperties",
        "displayName": "SC.ViewDesigner#encodeLocalizedProperties",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes the localized properties for the object.  These properties are \n    simply copied from the object onto the coder.  As an optimization, the value \n    of  each property will be checked against the default value in the class. \n    If they match, the property will not be emitted.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "awakeDesign",
        "displayName": "SC.ViewDesigner#awakeDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is invoked when the designer is instantiated.  You can use \n    this method to reload any state saved in the object.  This method is called\n    before any observers or bindings are setup to give you a chance to \n    configure the initial state of the designer.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "unknownProperty",
        "displayName": "SC.ViewDesigner#unknownProperty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The `unknownProperty` handler will pass through to the object by default.\n    This will often provide you the support you need without needing to \n    customize the Designer.  Just make sure you don't define a conflicting\n    property name on the designer itself!",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layout",
        "displayName": "SC.ViewDesigner#layout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the current layout for the view.  Set this property to update\n    the layout.  Direct properties are exposed a well. You will usually want\n    to work with those instead.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "anchorLocation",
        "displayName": "SC.ViewDesigner#anchorLocation",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "The current anchor location.  This determines which of the other dimension \n    metrics are actually used to compute the layout.  The value may be one of:\n    \n       TOP_LEFT, TOP_CENTER, TOP_RIGHT, TOP_HEIGHT,\n       CENTER_LEFT, CENTER_CENTER, CENTER_RIGHT, CENTER_HEIGHT\n       BOTTOM_LEFT, BOTTOM_CENTER, BOTTOM_RIGHT, BOTTOM_HEIGHT,\n       WIDTH_LEFT, WIDTH_CENTER, WIDTH_RIGHT, WIDTH_HEIGHT,\n       null",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutTop",
        "displayName": "SC.ViewDesigner#layoutTop",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the top offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutBottom",
        "displayName": "SC.ViewDesigner#layoutBottom",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the bottom offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutCenterY",
        "displayName": "SC.ViewDesigner#layoutCenterY",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the centerY offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutHeight",
        "displayName": "SC.ViewDesigner#layoutHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the height offset of the current layout or null if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutLeft",
        "displayName": "SC.ViewDesigner#layoutLeft",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the left offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutRight",
        "displayName": "SC.ViewDesigner#layoutRight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the right offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutCenterX",
        "displayName": "SC.ViewDesigner#layoutCenterX",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the centerX offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "layoutWidth",
        "displayName": "SC.ViewDesigner#layoutWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the width offset of the current layout or `null` if not defined",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "value",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeChildViewsDesign",
        "displayName": "SC.ViewDesigner#encodeChildViewsDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes the design for child views.  The default implementation loops \n    through child views.  If you store your child views elsewhere in your \n    config (for example as named properties), then you may want to override\n    this method with your own encoding.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "encodeChildViewsLoc",
        "displayName": "SC.ViewDesigner#encodeChildViewsLoc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes the design for child views.  The default implementation loops \n    through child views.  If you store your child views elsewhere in your \n    config (for example as named properties), then you may want to override\n    this method with your own encoding.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "coder",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "addView",
        "displayName": "SC.ViewDesigner#addView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "over-ride this method in your designers to customies drop operations\n    default just calls appendChild\n    \n    TODO: Come up with a better name for this method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "viewDidChange",
        "displayName": "SC.ViewDesigner#viewDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the view changes.  This will observe all property \n    changes on the new view.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "viewPropertyDidChange",
        "displayName": "SC.ViewDesigner#viewPropertyDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever a property on the view has changed.  The passed key will\n    be '*' when the entire view has changed.  The default implementation here\n    will notify the property as changed on the reciever if the \n    property value is undefined on the reciever.\n    \n    It will notify all properties changed for '*'.  You may override this \n    method with your own behavior if you like.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didCreateLayer",
        "displayName": "SC.ViewDesigner#didCreateLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Update the layer to add any design-specific marking",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "didUpdateLayer",
        "displayName": "SC.ViewDesigner#didUpdateLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Update the layer to add any design-specific marking",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "willDestroyLayer",
        "displayName": "SC.ViewDesigner#willDestroyLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Update the layer to add any design-specific marking",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "mouseDown",
        "displayName": "SC.ViewDesigner#mouseDown",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Select on `mouseDown`.  If `metaKey` or `shiftKey` is pressed, add to\n    selection.  Otherwise just save starting info for dragging",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseDragged",
        "displayName": "SC.ViewDesigner#mouseDragged",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "mouse dragged will resize or reposition depending on the settings from\n    mousedown.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseUp",
        "displayName": "SC.ViewDesigner#mouseUp",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "On `mouseUp` potentially change selection and cleanup.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "mouseReposition",
        "displayName": "SC.ViewDesigner#mouseReposition",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by `designerController` to reposition the view",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "info",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "dragSourceOperationMaskFor",
        "displayName": "SC.ViewDesigner#dragSourceOperationMaskFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method must be overridden for drag operations to be allowed. \n    Return a bitwise OR'd mask of the drag operations allowed on the\n    specified target.  If you don't care about the target, just return a\n    constant value.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.View",
            "name": "dropTarget",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The proposed target of the drop."
          },
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The SC.Drag instance managing this drag."
          }
        ]
      },
      {
        "name": "dragDidBegin",
        "displayName": "SC.ViewDesigner#dragDidBegin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when the drag begins. You can use this to do any\n    visual highlighting to indicate that the receiver is the source of the \n    drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Drag instance managing this drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in *window* coordinates where the drag \n      began.  You can use convertOffsetFromView() to convert this to local \n      coordinates."
          }
        ]
      },
      {
        "name": "dragDidMove",
        "displayName": "SC.ViewDesigner#dragDidMove",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called whenever the drag image is moved.  This is\n    similar to the `dragUpdated()` method called on drop targets.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Drag instance managing this drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in *window* coordinates where the drag \n      mouse is.  You can use convertOffsetFromView() to convert this to local \n      coordinates."
          }
        ]
      },
      {
        "name": "dragDidEnd",
        "displayName": "SC.ViewDesigner#dragDidEnd",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This method is called when the drag ended. You can use this to do any\n    cleanup.  The operation is the actual operation performed on the drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.Drag",
            "name": "drag",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag instance managing the drag."
          },
          {
            "title": "param",
            "type": "Point",
            "name": "loc",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The point in WINDOW coordinates where the drag \n      ended."
          },
          {
            "title": "param",
            "type": "DragOp",
            "name": "op",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The drag operation that was performed. One of \n      SC.DRAG_COPY, SC.DRAG_MOVE, SC.DRAG_LINK, or SC.DRAG_NONE."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "object",
        "displayName": "SC.ViewDesigner#object",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "The object managed by this designer.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "objectClass",
        "displayName": "SC.ViewDesigner#objectClass",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "The class for the design.  Set when the object is created.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "designIsSelected",
        "displayName": "SC.ViewDesigner#designIsSelected",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Set to `YES` if the object is currently selected for editing.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "designIsEnabled",
        "displayName": "SC.ViewDesigner#designIsEnabled",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Set to `YES` if this particular designer should not be enabled.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "designProperties",
        "displayName": "SC.ViewDesigner#designProperties",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Array of properties that can be encoded directly.  This is an easy way to\n    add support for simple properties that need to be written to the design\n    without added code.  These properties will be encoded by \n    `encodeDesignProperties()`.\n    \n    You can add to this array in your subclasses.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "localizedProperties",
        "displayName": "SC.ViewDesigner#localizedProperties",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Array of localized that can be encoded directly.  This is an easy way to\n    add support for simple properties that need to be written to the \n    localization without added code.  These properties will be encoded by \n    `encodeLocalizedProperties()`.\n    \n    You can add to this array in your subclasses.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "view",
        "displayName": "SC.ViewDesigner#view",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "The view managed by this designer.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "viewClass",
        "displayName": "SC.ViewDesigner#viewClass",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "The class for the design.  Set when the view is created.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "encodeChildViews",
        "displayName": "SC.ViewDesigner#encodeChildViews",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "If set to NO, the default childView encoding will not run.  You can use\n    this option, for example, if your view creates its own childViews.\n    \n    Alternatively, you can override the `encodeChildViewsDesign()` and\n    `encodeChildViewsLoc()` methods.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canResizeHorizontal",
        "displayName": "SC.ViewDesigner#canResizeHorizontal",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Set to `NO` to hide horizontal resize handles",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canResizeVertical",
        "displayName": "SC.ViewDesigner#canResizeVertical",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Set to `NO` to resize vertical handles",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "canReposition",
        "displayName": "SC.ViewDesigner#canReposition",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Allows moving.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minWidth",
        "displayName": "SC.ViewDesigner#minWidth",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Determines the minimum allowed width",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "minHeight",
        "displayName": "SC.ViewDesigner#minHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Determines the minimum allowed height",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maxWidth",
        "displayName": "SC.ViewDesigner#maxWidth",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Determines maximum allowed width.  `null` means no limit",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "maxHeight",
        "displayName": "SC.ViewDesigner#maxHeight",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "Determines maximum allowed height.  `null` means no limit",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "acceptRootDesigner",
        "displayName": "SC.ViewDesigner#acceptRootDesigner",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.ViewDesigner",
        "overview": "set this property to `YES` if you want your designer to become Root",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31182,
    "name": "WebView",
    "displayName": "SC.WebView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/web.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      },
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Control"
      }
    ],
    "overview": "Used to display an iframe. The source, (specified by the value property) of \n  the iFrame should be from the same domain. (i.e. the src / value should be \n  from the same domain) if you want to access the contents of the iframe.",
    "methods": [
      {
        "name": "render",
        "displayName": "SC.WebView#render",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "SC.RenderContext",
            "name": "context",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "firstTime",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didCreateLayer",
        "displayName": "SC.WebView#didCreateLayer",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called when the layer gets created.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "fetch",
        "displayName": "SC.WebView#fetch",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Fetch a group of records from the data source.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fetchTargets",
        "displayName": "SC.WebView#fetchTargets",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Fetch the actual targets.  Only understands how to handle a remote query.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "query",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateRecord",
        "displayName": "SC.WebView#updateRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "updates a single record",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "retrieveRecord",
        "displayName": "SC.WebView#retrieveRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from retrieveRecords() to retrieve a single record.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to retrieve"
          },
          {
            "title": "param",
            "type": "String",
            "name": "id",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the id to retrieve"
          }
        ]
      },
      {
        "name": "createRecord",
        "displayName": "SC.WebView#createRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from createdRecords() to created a single record.  This is the \n    most basic primitive to can implement to support creating a record.\n    \n    To support cascading data stores, be sure to return NO if you cannot \n    handle the passed storeKey or YES if you can.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "destroyRecord",
        "displayName": "SC.WebView#destroyRecord",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called from destroyRecords() to destroy a single record.  This is the \n    most basic primitive to can implement to support destroying a record.\n    \n    To support cascading data stores, be sure to return NO if you cannot \n    handle the passed storeKey or YES if you can.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if handled"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "SC.Store",
            "name": "store",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the requesting store"
          },
          {
            "title": "param",
            "type": "Array",
            "name": "storeKey",
            "isOptional": false,
            "defaultValue": "",
            "desc": "key to update"
          },
          {
            "title": "param",
            "type": "Hash",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": "to be passed down to data source. originated\n      from the commitRecords() call on the store"
          }
        ]
      },
      {
        "name": "transform",
        "displayName": "SC.WebView#transform",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Utility method transforms the passed value with the passed function.  \n    Handles both Arrays and individual items.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "js",
        "displayName": "SC.WebView#js",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a string of raw JavaScript.  This is the most primitive method. \n    You are expected to prep the value yourself.  You can pass an array to\n    this or any other method and it will be encoded as a full array.\n\n    This method also automatically handles null and undefined values.  Null\n    values are included in the output.  Undefined values are ignored.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the JavaScript"
          },
          {
            "title": "param",
            "type": "",
            "name": "transform",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} optional transform function to apply to val"
          }
        ]
      },
      {
        "name": "string",
        "displayName": "SC.WebView#string",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a string, wrapping it in quotes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the value"
          }
        ]
      },
      {
        "name": "number",
        "displayName": "SC.WebView#number",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a number, wrapping it in quotes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Number} the value"
          }
        ]
      },
      {
        "name": "bool",
        "displayName": "SC.WebView#bool",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a bool, mapped as `YES` or `NO`",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Boolean} the value"
          }
        ]
      },
      {
        "name": "encode",
        "displayName": "SC.WebView#encode",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes an object.  This will do its best to autodetect the type of the\n    object.  You can pass an optional processing function that will be used \n    on object members before processing to allow you to normalize.  The \n    method signature must be:\n    \n        function convert(value, rootObject, key);\n\n    The rootObject and key will be set to give you the context in the \n    hierarchy.\n    \n    Generally this method will work for encoding simple value only.  If your \n    object graph may contain SproutCore objects, you will need to encode it\n    yourself.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the value"
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} optional transform func"
          }
        ]
      },
      {
        "name": "hash",
        "displayName": "SC.WebView#hash",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a hash of objects.  The object values must be simple objects for\n    this method to work.  You can also optionally pass a processing function\n    that will be invoked for each value, giving you a chance to convert the\n    value first.  The signature must be `(key, value, rootObject)`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the value"
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} optional transform func"
          }
        ]
      },
      {
        "name": "array",
        "displayName": "SC.WebView#array",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Encodes a array of objects.  The object values must be simple objects for\n    this method to work.  You can also optionally pass a processing function\n    that will be invoked for each value, giving you a chance to convert the\n    value first.  The signature must be `(index, value, rootObject)`.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the value"
          },
          {
            "title": "param",
            "type": "",
            "name": "func",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Function} optional transform func"
          }
        ]
      },
      {
        "name": "object",
        "displayName": "SC.WebView#object",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Attempts to encode an object.  The object must implement the \n    encodeMethodName for this encoder, or else an exception will be raised.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.ObjectCoder",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "receiver"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} the key to set"
          },
          {
            "title": "param",
            "type": "",
            "name": "val",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{Object} the object to encode"
          }
        ]
      },
      {
        "name": "emit",
        "displayName": "SC.WebView#emit",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Emits the final JavaScript output for this coder based on the current\n    attributes.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "begin",
        "displayName": "SC.WebView#begin",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Begins encoding with a particular object, setting the className to the \n    object's `className`.  This is used internally by the `encode()` method.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "select",
        "displayName": "SC.WebView#select",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Updates the selection either by adding the item or by reseting the \n    selection.  Calling this method with no parameters will reset the \n    selection.\n    \n    The passed selection must be a Designer object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "sel",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "extend",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "deselect",
        "displayName": "SC.WebView#deselect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes the passed items from the current selection.\n    \n    The passed selection must be a Designer object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "sel",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "selectionDidChange",
        "displayName": "SC.WebView#selectionDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever the selection changes.  Updates the selection states \n    on the old and new views.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "repositionSelection",
        "displayName": "SC.WebView#repositionSelection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a view to reposition the current selection during a mouse \n    drag.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "evt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "info",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "prepareReposition",
        "displayName": "SC.WebView#prepareReposition",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by a view to prepare all views in selection for repositioning",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "info",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "deleteSelection",
        "displayName": "SC.WebView#deleteSelection",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "removes all views in the selection from their parent view",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "registerDesigner",
        "displayName": "SC.WebView#registerDesigner",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by each designer when it is created to register itself with the\n    controller.  You can use this to know which designers are currently in \n    the document to delete them as needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "designer",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "find",
        "displayName": "SC.WebView#find",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Find a stylesheet object by name or href. If by name, `.css` will be\n    appended automatically.\n    \n        var ss = SC.CSSStyleSheet.find('style.css') ;\n        var ss2 = SC.CSSStyleSheet.find('style') ; // same thing\n        sc_assert(ss === ss2) ; // SC.CSSStyleSheet objects are stable",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "SC.CSSStyleSheet",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "null if not found"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "nameOrUrl",
            "isOptional": false,
            "defaultValue": "",
            "desc": "a stylsheet name or href to find"
          }
        ]
      },
      {
        "name": "didLoadDesign",
        "displayName": "SC.WebView#didLoadDesign",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever a designed object is loaded.  This will save the design\n    attributes for later use by a designer.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "designedObject",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "sourceObject",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didLoadLocalization",
        "displayName": "SC.WebView#didLoadLocalization",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenever a location is applied to a designed object.  Saves the \n    attributes separately for use by the design object.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "designedObject",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didCreateObject",
        "displayName": "SC.WebView#didCreateObject",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenver a object is created.  This will create a peer designer if \n    needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "didCreateView",
        "displayName": "SC.WebView#didCreateView",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Invoked whenver a view is created.  This will create a peer designer if \n    needed.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "view",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "attrs",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "row",
        "displayName": "SC.WebView#row",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a form row.\n\n  Can be called in two ways: `row(optionalClass, properties)`, which creates\n  a field with the properties, and puts it in a new row;\n  and `row(properties)`, which creates a new rowâand it is up to you to add\n  any fields you want in the row.\n  \n  You can also supply some properties to extend the row itself with.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "optionalClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "properties",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "rowExt",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "field",
        "displayName": "SC.WebView#field",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a field.\n\n  Behind the scenes, this wraps the fieldClass in a FormFieldViewâusually a\n  specialized variant of FormFieldView meant specifically to wrap that class.\n\n  You can add your own special variants of FormFieldView if you want to expose\n  special features of your own view by calling FormFieldView.registerWrapper.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "fieldClass",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "properties",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "displayProperties",
        "displayName": "SC.WebView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "",
        "defaultValue": "['value', 'shouldAutoResize']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "shouldAutoResize",
        "displayName": "SC.WebView#shouldAutoResize",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The content of the iframe can be bigger than the size specifed when creating\n    the view. If you want the view to be auto-resized to the dimensions of the \n    iframe, then set the value of this property to YES.\n    The web view can be auto resized only if the contents are from the same\n    domain as the parent domain.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "className",
        "displayName": "SC.WebView#className",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The `className` used to emit the design.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "extendMethodName",
        "displayName": "SC.WebView#extendMethodName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The method to be used to create the class or object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "encodeMethodName",
        "displayName": "SC.WebView#encodeMethodName",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The default encoding method.  If an object defines this method, then a new\n    coder will be created to encode that object.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "attributes",
        "displayName": "SC.WebView#attributes",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The attributes that will be emitted.  The values all must be strings. Use \n    one of the encoding methods defined below to actually encode attributes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "selection",
        "displayName": "SC.WebView#selection",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "The current view builder selection.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "designers",
        "displayName": "SC.WebView#designers",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WebView",
        "overview": "All of the designers on the current page.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31199,
    "name": "WellView",
    "displayName": "SC.WellView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/well.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "SproutCore 1.0",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ContainerView"
      }
    ],
    "overview": "A WellView is a ContainerView with a border. It's useful when you want to\n  group a set of views. It allows you to easily switch its contents too.\n  \n  It has a default contentLayout that will replace the layout of the contentView.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.WellView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WellView",
        "overview": "",
        "defaultValue": "['sc-well-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentLayout",
        "displayName": "SC.WellView#contentLayout",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WellView",
        "overview": "Layout for the content of the container view.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.WellView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WellView",
        "overview": "",
        "defaultValue": "'wellRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 31215,
    "name": "WorkspaceView",
    "displayName": "SC.WorkspaceView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/desktop/views/workspace.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "Alex Iskander",
    "see": [],
    "since": "SproutCore 1.2",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.View"
      }
    ],
    "overview": "WorkspaceView manages a content view and two optional toolbars (top and bottom).\n  You want to use WorkspaceView in one of two situations: iPhone apps where the toolbars\n  need to change size automatically based on orientation (this does that, isn't that\n  handy!) and iPad apps where you would like the masterIsHidden property to pass through.",
    "methods": [],
    "properties": [
      {
        "name": "classNames",
        "displayName": "SC.WorkspaceView#classNames",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#classNames"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "['sc-workspace-view']",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "displayProperties",
        "displayName": "SC.WorkspaceView#displayProperties",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [
          "SC.View#displayProperties"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "\"hasTopToolbar hasBottomToolbar\".w()",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "renderDelegateName",
        "displayName": "SC.WorkspaceView#renderDelegateName",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "'workspaceRenderDelegate'",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "topToolbar",
        "displayName": "SC.WorkspaceView#topToolbar",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "SC.ToolbarView",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "bottomToolbar",
        "displayName": "SC.WorkspaceView#bottomToolbar",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "null",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "contentView",
        "displayName": "SC.WorkspaceView#contentView",
        "objectType": "property",
        "propertyType": "SC.View",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "The content. Must NOT be null.",
        "defaultValue": "SC.View",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "autoResizeToolbars",
        "displayName": "SC.WorkspaceView#autoResizeToolbars",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "If you want to automatically resize the toolbars like iPhone\n    apps should, set to YES.",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "defaultToolbarSize",
        "displayName": "SC.WorkspaceView#defaultToolbarSize",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "44",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "largeToolbarSize",
        "displayName": "SC.WorkspaceView#largeToolbarSize",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "44",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "smallToolbarSize",
        "displayName": "SC.WorkspaceView#smallToolbarSize",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "30",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "toolbarSize",
        "displayName": "SC.WorkspaceView#toolbarSize",
        "objectType": "property",
        "propertyType": "Number",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "orientation",
        "displayName": "SC.WorkspaceView#orientation",
        "objectType": "property",
        "propertyType": "String",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "Tracks the orientation of the view. Possible values:\n    \n      - SC.HORIZONTAL_ORIENTATION\n      - SC.PORTRAIT_ORIENTATION",
        "defaultValue": "SC.HORIZONTAL_ORIENTATION",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "masterIsHidden",
        "displayName": "SC.WorkspaceView#masterIsHidden",
        "objectType": "property",
        "propertyType": "Boolean",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SC.WorkspaceView",
        "overview": "",
        "defaultValue": "NO",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2429,
    "name": "Shape",
    "displayName": "Shape",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This is the basic Shape class.  \nIt can be considered an abstract class, even though no such thing\nreally existing in JavaScript",
    "methods": [
      {
        "name": "getClassName",
        "displayName": "Shape#getClassName",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is an example of a function that is not given as a property\nof a prototype, but instead it is assigned within a constructor.\nFor inner functions like this to be picked up by the parser, the\nfunction that acts as a constructor <b>must</b> be denoted with\nthe <b>&#64;constructor</b> tag in its comment.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "addReference",
        "displayName": "Shape-addReference",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "Sue Smart",
        "see": [],
        "since": "version 0.5",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This is an inner method, just used here as an example",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "getCoords",
        "displayName": "Shape#getCoords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the coordinates of this shape. It is assumed that we're always talking\nabout shapes in a 2D location here.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A Coordinate object representing the location of this Shape"
          }
        ],
        "params": []
      },
      {
        "name": "getColor",
        "displayName": "Shape#getColor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#setColor",
          "The <a href=\"http://example.com\">Color</a> library.",
          "Shape"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Get the color of this shape.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "setCoords",
        "displayName": "Shape#setCoords",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the coordinates for this Shape",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Coordinate",
            "name": "coordinates",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The coordinates to set for this Shape"
          }
        ]
      },
      {
        "name": "setColor",
        "displayName": "Shape#setColor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getColor"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the color for this Shape",
        "exceptions": [
          {
            "title": "throws",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "NonExistantColorException (no, not really!)"
          }
        ],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "Color",
            "name": "color",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The color to set for this Shape"
          },
          {
            "title": "param",
            "type": "",
            "name": "other",
            "isOptional": false,
            "defaultValue": "",
            "desc": "There is no other param, but it can still be documented if\n             optional parameters are used"
          }
        ]
      },
      {
        "name": "clone",
        "displayName": "Shape#clone",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "Gabriel Reid",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Clone this shape",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A copy of this shape"
          }
        ],
        "params": []
      }
    ],
    "properties": [
      {
        "name": "color",
        "displayName": "Shape#color",
        "objectType": "property",
        "propertyType": "Color",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Shape",
        "overview": "The color of this shape",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "border",
        "displayName": "Shape#border",
        "objectType": "property",
        "propertyType": "int",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "Shape",
        "overview": "The border of this shape.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2487,
    "name": "ShapeFactory",
    "displayName": "ShapeFactory",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "This class exists to demonstrate the assignment of a class prototype\nas an anonymous block.",
    "methods": [
      {
        "name": "createShape",
        "displayName": "ShapeFactory#createShape",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new {@link Shape} instance.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A new {@link Shape}"
          }
        ],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2457,
    "name": "Square",
    "displayName": "Square",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/jsdoc_test.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Rectangle"
      }
    ],
    "overview": "A Square is a subclass of {@link Rectangle}",
    "methods": [
      {
        "name": "setWidth",
        "displayName": "Square#setWidth",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "#getWidth"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the width value for this Shape.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "width",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The width value to be set"
          }
        ]
      },
      {
        "name": "setHeight",
        "displayName": "Square#setHeight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Set the height value for this Shape \nSets the {@link Rectangle#height} attribute in the Rectangle.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "int",
            "name": "height",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The height value to be set"
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 1196,
    "name": "String",
    "displayName": "String",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/frame/String.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "Additions to the core string object.",
    "methods": [
      {
        "name": "trim",
        "displayName": "String#trim",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "Steven Levithan, released as public domain.",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "capitalize",
        "displayName": "String#capitalize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.capitalize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "camelize",
        "displayName": "String#camelize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.camelize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "decamelize",
        "displayName": "String#decamelize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.decamelize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "dasherize",
        "displayName": "String#dasherize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.dasherize"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "loc",
        "displayName": "String#loc",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.loc"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "locWithDefault",
        "displayName": "String#locWithDefault",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.locWithDefault"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "def",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "locMetric",
        "displayName": "String#locMetric",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns the localized metric value for the specified key.  A metric is a\n    single value intended to be used in your interfaceâs layout, such as\n    \"Button.Confirm.Width\" = 100.\n\n    If you would like to return a set of metrics for use in a layout hash, you\n    may prefer to use the locLayout() method instead.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the localized metric"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} key"
          }
        ]
      },
      {
        "name": "locLayout",
        "displayName": "String#locLayout",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates and returns a new hash suitable for use as an SC.Viewâs 'layout'\n    hash.  This hash will be created by looking for localized metrics following\n    a pattern based on the âbase keyâ you specify.\n\n    For example, if you specify \"Button.Confirm\", the following metrics will be\n    used if they are defined:\n\n      Button.Confirm.left\n      Button.Confirm.top\n      Button.Confirm.right\n      Button.Confirm.bottom\n      Button.Confirm.width\n      Button.Confirm.height\n      Button.Confirm.midWidth\n      Button.Confirm.minHeight\n      Button.Confirm.centerX\n      Button.Confirm.centerY\n\n    Additionally, you can optionally specify a hash which will be merged on top\n    of the returned hash.  For example, if you wish to allow a buttonâs width\n    to be configurable per-locale, but always wish for it to be centered\n    vertically and horizontally, you can call:\n\n      locLayout(\"Button.Confirm\", {centerX:0, centerY:0})\n\n    â¦so that you can combine both localized and non-localized elements in the\n    returned hash.  (An exception will be thrown if there is a locale-specific\n    key that matches a key specific in this hash.)\n\n\n    For example, if your locale defines:\n\n      Button.Confirm.left\n      Button.Confirm.top\n      Button.Confirm.right\n      Button.Confirm.bottom\n\n\n    â¦then these two code snippets will produce the same result:\n\n      layout: {\n        left:   \"Button.Confirm.left\".locMetric(),\n        top:    \"Button.Confirm.top\".locMetric(),\n        right:  \"Button.Confirm.right\".locMetric(),\n        bottom: \"Button.Confirm.bottom\".locMetric()\n      }\n\n      layout: \"Button.Confirm\".locLayout()\n\n    The former is slightly more efficient because it doesnât have to iterate\n    through the possible localized layout keys, but in virtually all situations\n    you will likely wish to use the latter.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Number",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the localized metric"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": "{String} key"
          },
          {
            "title": "param",
            "type": "str",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "additionalHash"
          },
          {
            "title": "param",
            "type": "String",
            "name": "(optional)",
            "isOptional": false,
            "defaultValue": "",
            "desc": "additionalHash"
          }
        ]
      },
      {
        "name": "trimLeft",
        "displayName": "String#trimLeft",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes any extra whitespace from the left edge of the string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the trimmed string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "trimRight",
        "displayName": "String#trimRight",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Removes any extra whitespace from the right edge of the string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the trimmed string"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "str",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "fmt",
        "displayName": "String#fmt",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.fmt"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "w",
        "displayName": "String#w",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [
          "SC.String.w"
        ],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 2245,
    "name": "SYS",
    "displayName": "SYS",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/run.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "A collection of information about your system.",
    "methods": [],
    "properties": [
      {
        "name": "slash",
        "displayName": "SYS.slash",
        "objectType": "property",
        "propertyType": "string",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SYS",
        "overview": "Which way does your slash lean.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "pwd",
        "displayName": "SYS.pwd",
        "objectType": "property",
        "propertyType": "string",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "SYS",
        "overview": "The absolute path to the directory containing this script.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2373,
    "name": "Test",
    "displayName": "Test",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/encoding.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "ä»ä¹ä¹ä¸è¿å",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2980,
    "name": "TestControls",
    "displayName": "TestControls",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/test_controls/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "My cool new app.  Describe your application.",
    "methods": [],
    "properties": [
      {
        "name": "Theme",
        "displayName": "TestControls.Theme",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestControls",
        "overview": "Styling becomes easier when your app has its own theme to target.\n  The theme's name will be included in every view's class names in DOM,\n  so you can apply styles without being exceedingly specific.\n  \n  If working with Chance, the $theme variable (which has its initial\n  value set in your Buildfile) will allow you to target the theme\n  automatically:\n  \n  Example:\n  \n      $theme.button {\n        border: 1px solid black;\n      }",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2951,
    "name": "categoryController",
    "displayName": "TestControls.categoryController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/test_controls/controllers/category.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "(Document Your Controller Here)",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2893,
    "name": "rootCategory",
    "displayName": "TestControls.rootCategory",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/test_controls/controllers/categories.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CategoriesController"
      }
    ],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 4235,
    "name": "TestRunner",
    "displayName": "TestRunner",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Application"
      }
    ],
    "overview": "My cool new app.  Describe your application.",
    "methods": [
      {
        "name": "targets",
        "displayName": "TestRunner#targets",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns all known targets",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "computeRouteTarget",
        "displayName": "TestRunner#computeRouteTarget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the current target as named by the route.  If the target is not\n    found it will return null.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "computeRouteTest",
        "displayName": "TestRunner#computeRouteTest",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Computes the current test as named by the route.  If the test is not found\n    it will return null.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "routeDidChange",
        "displayName": "TestRunner#routeDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called whenever the route changes.  Sends an appropriate event down the\n    responder chain.  Also sets the current target.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "params",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "updateRoute",
        "displayName": "TestRunner#updateRoute",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Called by the state machine whenever it lands in a stable target state.\n    Pass in the target and test.  We'll update the location and set a new \n    target route state if needed.\n    \n    Whenever you update the route to the current route state, then \n    routePending will be cleared.\n    \n    Passing isFinal will force the routePending to go to NO.  pass this when\n    the state is at a dead-end and can't move forward any further.",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "target",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "test",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "isFinal",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "route",
        "displayName": "TestRunner#route",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "The current route.  This is set whenever the route changes.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "routePending",
        "displayName": "TestRunner#routePending",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Whenever the route changes and it does not match the current state,\n    this will be set to YES.  Whenever states transition, if the route is\n    pending, they will try to move it on to the next step if possible.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "NO_TARGETS",
        "displayName": "TestRunner.NO_TARGETS",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Displayed when the app has no targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY",
        "displayName": "TestRunner.READY",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Initial state of application before it has loaded targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY_DETAIL",
        "displayName": "TestRunner.READY_DETAIL",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Initial state of application before it has loaded targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY_EMPTY",
        "displayName": "TestRunner.READY_EMPTY",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "State when targets are loaded, but no target is selected.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY_LIST",
        "displayName": "TestRunner.READY_LIST",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Initial state of application before it has loaded targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY_LOADING",
        "displayName": "TestRunner.READY_LOADING",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Show loading indicator.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "READY_NO_TESTS",
        "displayName": "TestRunner.READY_NO_TESTS",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Displayed when the app has no targets.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "START",
        "displayName": "TestRunner.START",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner",
        "overview": "Initial state of application before it has loaded targets.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 4185,
    "name": "detailController",
    "displayName": "TestRunner.detailController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/controllers/detail.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "The currently selected test in detail view.",
    "methods": [
      {
        "name": "uncachedUrl",
        "displayName": "TestRunner.detailController#uncachedUrl",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Adds a random number onto the end of the URL to force the iframe to \n    reload.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 4508,
    "name": "OffsetCheckboxView",
    "displayName": "TestRunner.OffsetCheckboxView",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/views/offset_checkbox.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.CheckboxView"
      }
    ],
    "overview": "This special view class will automatically adjusts its left offset based \n  on an \"offset\" value, which is will be bound to the width of the split view.\n  \n  This way when you resize the split view, the checkbox view will move also.",
    "methods": [],
    "properties": [
      {
        "name": "offset",
        "displayName": "TestRunner.OffsetCheckboxView#offset",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner.OffsetCheckboxView",
        "overview": "bind to thickness of splitview (though a controller)",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 4189,
    "name": "sourceController",
    "displayName": "TestRunner.sourceController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/controllers/source.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.TreeController"
      }
    ],
    "overview": "Exposed the flattened list of targets for the source list.  Computed from \n  the root node generated on the targetsController.  Configure for display of\n  the source list.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 4198,
    "name": "targetController",
    "displayName": "TestRunner.targetController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/controllers/target.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ObjectController"
      }
    ],
    "overview": "The currently selected target.  Used by the testsController to get the \n  tests of the target.  May be used by other parts of the app to control the\n  selected target.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 4205,
    "name": "targetsController",
    "displayName": "TestRunner.targetsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/controllers/targets.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "The full set of targets available in the application.  This is populated \n  automatically when you call loadTargets().",
    "methods": [
      {
        "name": "reload",
        "displayName": "TestRunner.targetsController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the targets from the server.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "sourceRoot",
        "displayName": "TestRunner.targetsController#sourceRoot",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates the root array of children objects whenever the target content\n    changes.  Used in a tree node.",
        "exceptions": [],
        "returns": [],
        "params": []
      },
      {
        "name": "statusDidChange",
        "displayName": "TestRunner.targetsController#statusDidChange",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Send event when targets load.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 4229,
    "name": "testsController",
    "displayName": "TestRunner.testsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/tests/controllers/tests.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "Manages the list of tests for the currently focused target.",
    "methods": [],
    "properties": [
      {
        "name": "useContinuousIntegration",
        "displayName": "TestRunner.testsController#useContinuousIntegration",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner.testsController",
        "overview": "Enables/disables continuous integration mode.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "isShowingTests",
        "displayName": "TestRunner.testsController#isShowingTests",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "TestRunner.testsController",
        "overview": "Whenever we are actually showing the tests, then controls are enabled.\n    Set to YES when in READY_LIST mode.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2591,
    "name": "thisiscode",
    "displayName": "thisiscode",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/scripts/code.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 2342,
    "name": "ThreeColumnPage",
    "displayName": "ThreeColumnPage",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/augments.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "Page"
      }
    ],
    "overview": "",
    "methods": [
      {
        "name": "init",
        "displayName": "ThreeColumnPage#init",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "initilize 2",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "p",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": []
  },
  {
    "guid": 4530,
    "name": "Welcome",
    "displayName": "Welcome",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/welcome/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.Object"
      }
    ],
    "overview": "The Welcome app is displayed when you load the root URL and the dev server\n  is visible.  It will fetch the list of targets from the server and list \n  them.",
    "methods": [],
    "properties": []
  },
  {
    "guid": 4512,
    "name": "targetsController",
    "displayName": "Welcome.targetsController",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/welcome/controllers/targets.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [
      {
        "title": "augments",
        "type": "",
        "name": "",
        "isOptional": false,
        "defaultValue": "",
        "desc": "SC.ArrayController"
      }
    ],
    "overview": "Manages the list of targets",
    "methods": [
      {
        "name": "reload",
        "displayName": "Welcome.targetsController#reload",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Call this method whenever you want to relaod the targets from the server.",
        "exceptions": [],
        "returns": [],
        "params": []
      }
    ],
    "properties": []
  },
  {
    "guid": 45905,
    "name": "SC",
    "displayName": "window.SC",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/frameworks/runtime/core.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": true,
    "author": "",
    "see": [],
    "since": "",
    "version": "1.6.0.beta.3",
    "deprecated": "",
    "augments": [],
    "overview": "All SproutCore methods and functions are defined\n  inside of this namespace.  You generally should not add new properties to\n  this namespace as it may be overwritten by future versions of SproutCore.\n\n  You can also use the shorthand \"SC\" instead of \"SproutCore\".\n\n  SproutCore-Base is a framework that provides core functions for SproutCore\n  including cross-platform functions, support for property observing and\n  objects.  It's focus is on small size and performance.  You can use this\n  in place of or along-side other cross-platform libraries such as jQuery or\n  Prototype.\n\n  The core Base framework is based on the jQuery API with a number of\n  performance optimizations.",
    "methods": [
      {
        "name": "typeOf",
        "displayName": "window.SC#typeOf",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a consistent type for the passed item.\n\n    Use this instead of the built-in typeOf() to get the type of an item.\n    It will return the same result across all browsers and includes a bit\n    more detail.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "One of the following, depending on the type of the item<br>\n            SC.T_STRING: String primitive,<br>\n            SC.T_NUMBER: Number primitive,<br>\n            SC.T_BOOLEAN: Boolean primitive,<br>\n            SC.T_NULL: Null value,<br>\n            SC.T_UNDEFINED: Undefined value,<br>\n            SC.T_FUNCTION: A function,<br>\n            SC.T_ARRAY: An instance of Array,<br>\n            SC.T_CLASS: A SproutCore class (created using SC.Object.extend()),<br>\n            SC.T_OBJECT: A SproutCore object instance,<br>\n            SC.T_HASH: A JavaScript object not inheriting from SC.Object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "item",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the item to check"
          }
        ]
      },
      {
        "name": "none",
        "displayName": "window.SC#none",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed value is null or undefined.  This avoids errors\n    from JSLint complaining about use of ==, which can be technically\n    confusing.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "value to test"
          }
        ]
      },
      {
        "name": "empty",
        "displayName": "window.SC#empty",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Verifies that a value is either null or an empty string. Return false if\n    the object is not a string.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "value to test"
          }
        ]
      },
      {
        "name": "isArray",
        "displayName": "window.SC#isArray",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns YES if the passed object is an array or Array-like.\n\n    SproutCore Array Protocol:\nthe object has an objectAt property; or\nthe object is a native Array; or\nthe object is an Object, and has a length property\n\n    Unlike SC.typeOf this method returns true even if the passed object is\n    not formally array but appears to be array-like (i.e. has a length\n    property, responds to .objectAt, etc.)",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to test"
          }
        ]
      },
      {
        "name": "makeArray",
        "displayName": "window.SC#makeArray",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Makes an object into an Array if it is not array or array-like already.\n    Unlike SC.A(), this method will not clone the object if it is already\n    an array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Actual array"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "object to convert"
          }
        ]
      },
      {
        "name": "A",
        "displayName": "window.SC#A",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Converts the passed object to an Array.  If the object appears to be\n    array-like, a new array will be cloned from it.  Otherwise, a new array\n    will be created with the item itself as the only item in the array.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "Array of items"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "any enumerable or array-like object."
          }
        ]
      },
      {
        "name": "guidFor",
        "displayName": "window.SC#guidFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "\"\n    Returns a unique GUID for the object.  If the object does not yet have\n    a guid, one will be assigned to it.  You can call this on any object,\n    SC.Object-based or not, but be aware that it will add a _guid property.\n\n    You can also use this method on DOM Element objects.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the unique guid for this instance."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "any object, string, number, Element, or primitive"
          }
        ]
      },
      {
        "name": "keyFor",
        "displayName": "window.SC#keyFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a key name that combines the named key + prefix.  This is more\n    efficient than simply combining strings because it uses a cache\n    internally for performance.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "result"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "prefix",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the prefix to attach to the key"
          },
          {
            "title": "param",
            "type": "String",
            "name": "key",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The key"
          }
        ]
      },
      {
        "name": "generateGuid",
        "displayName": "window.SC#generateGuid",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Generates a new guid, optionally saving the guid to the object that you\n    pass in.  You will rarely need to use this method.  Instead you should\n    call SC.guidFor(obj), which return an existing guid if available.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the guid"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to assign the guid to"
          },
          {
            "title": "param",
            "type": "String",
            "name": "prefix",
            "isOptional": false,
            "defaultValue": "",
            "desc": "prefixes the generated guid"
          }
        ]
      },
      {
        "name": "hashFor",
        "displayName": "window.SC#hashFor",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a unique hash code for the object. If the object implements\n    a hash() method, the value of that method will be returned. Otherwise,\n    this will return the same value as guidFor().\n\n    If you pass multiple arguments, hashFor returns a string obtained by\n    concatenating the hash code of each argument.\n\n    Unlike guidFor(), this method allows you to implement logic in your\n    code to cause two separate instances of the same object to be treated as\n    if they were equal for comparisons and other functions.\n\n    <b>IMPORTANT</b>: If you implement a hash() method, it MUST NOT return a\n    number or a string that contains only a number. Typically hash codes\n    are strings that begin with a \"%\".",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the hash code for this instance."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object...",
            "name": "objects",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object(s)"
          }
        ]
      },
      {
        "name": "isEqual",
        "displayName": "window.SC#isEqual",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will compare the two object values using their hash codes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Boolean",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "YES if the two have equal hash code values."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "a",
            "isOptional": false,
            "defaultValue": "",
            "desc": "first value to compare"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "b",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the second value to compare"
          }
        ]
      },
      {
        "name": "compare",
        "displayName": "window.SC#compare",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "This will compare two javascript values of possibly different types.\n   It will tell you which one is greater than the other by returning\n   -1 if the first is smaller than the second,\n    0 if both are equal,\n    1 if the first is greater than the second.\n\n   The order is calculated based on SC.ORDER_DEFINITION , if types are different.\n   In case they have the same type an appropriate comparison for this type is made.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "NUMBER",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "-1 if v < w, 0 if v = w and 1 if v > w."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "v",
            "isOptional": false,
            "defaultValue": "",
            "desc": "first value to compare"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "w",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the second value to compare"
          }
        ]
      },
      {
        "name": "K",
        "displayName": "window.SC#K",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Empty function.  Useful for some operations.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ],
        "params": []
      },
      {
        "name": "beget",
        "displayName": "window.SC#beget",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a new object with the passed object as its prototype.\n\n    This method uses JavaScript's native inheritence method to create a new\n    object.\n\n    You cannot use beget() to create new SC.Object-based objects, but you\n    can use it to beget Arrays, Hashes, Sets and objects you build yourself.\n    Note that when you beget() a new object, this method will also call the\n    didBeget() method on the object you passed in if it is defined.  You can\n    use this method to perform any other setup needed.\n\n    In general, you will not use beget() often as SC.Object is much more\n    useful, but for certain rare algorithms, this method can be very useful.\n\n    For more information on using beget(), see the section on beget() in\n    Crockford's JavaScript: The Good Parts.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the new object."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to beget"
          }
        ]
      },
      {
        "name": "copy",
        "displayName": "window.SC#copy",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Creates a clone of the passed object.  This function can take just about\n    any type of object and create a clone of it, including primitive values\n    (which are not actually cloned because they are immutable).\n\n    If the passed object implements the clone() method, then this function\n    will simply call that method and return the result.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the cloned object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the object to clone"
          },
          {
            "title": "param",
            "type": "Boolean",
            "name": "deep",
            "isOptional": false,
            "defaultValue": "",
            "desc": "if true, a deep copy of the object is made"
          }
        ]
      },
      {
        "name": "merge",
        "displayName": "window.SC#merge",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a new object combining the values of all passed hashes.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "new Object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object...",
            "name": "object",
            "isOptional": false,
            "defaultValue": "",
            "desc": "one or more objects"
          }
        ]
      },
      {
        "name": "keys",
        "displayName": "window.SC#keys",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns all of the keys defined on an object or hash.  This is useful\n    when inspecting objects for debugging.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array of keys"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The Object"
          }
        ]
      },
      {
        "name": "inspect",
        "displayName": "window.SC#inspect",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convenience method to inspect an object.  This method will attempt to\n    convert the object into a useful string description.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "String",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "A description of the object"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "Object",
            "name": "obj",
            "isOptional": false,
            "defaultValue": "",
            "desc": "The object you want to inspec."
          }
        ]
      },
      {
        "name": "tupleForPropertyPath",
        "displayName": "window.SC#tupleForPropertyPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Returns a tuple containing the object and key for the specified property\n    path.  If no object could be found to match the property path, then\n    returns null.\n\n    This is the standard method used throughout SproutCore to resolve property\n    paths.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Array",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "array with [object, property] if found or null"
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the property path"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "root",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional parameter specifying the place to start"
          }
        ]
      },
      {
        "name": "objectForPropertyPath",
        "displayName": "window.SC#objectForPropertyPath",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": false,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Finds the object for the passed path or array of path components.  This is\n    the standard method used in SproutCore to traverse object paths.",
        "exceptions": [],
        "returns": [
          {
            "title": "return",
            "type": "Object",
            "name": "",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the found object or undefined."
          }
        ],
        "params": [
          {
            "title": "param",
            "type": "String",
            "name": "path",
            "isOptional": false,
            "defaultValue": "",
            "desc": "the path"
          },
          {
            "title": "param",
            "type": "Object",
            "name": "root",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional root object.  window is used otherwise"
          },
          {
            "title": "param",
            "type": "Integer",
            "name": "stopAt",
            "isOptional": false,
            "defaultValue": "",
            "desc": "optional point to stop searching the path."
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "EMPTY_ARRAY",
        "displayName": "window.SC#EMPTY_ARRAY",
        "objectType": "property",
        "propertyType": "Array",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "window.SC",
        "overview": "Empty array.  Useful for some optimizations.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "EMPTY_HASH",
        "displayName": "window.SC#EMPTY_HASH",
        "objectType": "property",
        "propertyType": "Hash",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "window.SC",
        "overview": "Empty hash.  Useful for some optimizations.",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "EMPTY_RANGE",
        "displayName": "window.SC#EMPTY_RANGE",
        "objectType": "property",
        "propertyType": "Range",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "window.SC",
        "overview": "Empty range. Useful for some optimizations.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2574,
    "name": "Word",
    "displayName": "Word",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/prototype_nested.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  },
  {
    "guid": 1342,
    "name": "XMLDOC",
    "displayName": "XMLDOC",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/handlers/XMLDOC.js",
    "isNamespace": true,
    "isPrivate": false,
    "isStatic": false,
    "author": "Brett Fattori (bfattori@fry.com)",
    "see": [],
    "since": "",
    "version": "$Revision: 498 $",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [
      {
        "name": "symbolize",
        "displayName": "XMLDOC.symbolize",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "Convert the source file to a set of symbols",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "srcFile",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      },
      {
        "name": "handle",
        "displayName": "XMLDOC.handle",
        "objectType": "method",
        "isPrivate": false,
        "isStatic": true,
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "augments": [],
        "overview": "",
        "exceptions": [],
        "returns": [],
        "params": [
          {
            "title": "param",
            "type": "",
            "name": "srcFile",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          },
          {
            "title": "param",
            "type": "",
            "name": "src",
            "isOptional": false,
            "defaultValue": "",
            "desc": ""
          }
        ]
      }
    ],
    "properties": [
      {
        "name": "Parser",
        "displayName": "XMLDOC.Parser",
        "objectType": "property",
        "propertyType": "",
        "author": "Brett Fattori (bfattori@fry.com), $Author: micmath $",
        "see": [],
        "since": "",
        "version": "$Revision: 497 $",
        "deprecated": "",
        "memberOf": "XMLDOC",
        "overview": "XML Parser object.  Returns an {@link #XMLDOC.Parser.node} which is\nthe root element of the parsed document.\n<p/>\nBy default, this parser will only handle well formed XML.  To\nallow the parser to handle HTML, set the <tt>XMLDOC.Parser.strictMode</tt>\nvariable to <tt>false</tt> before calling <tt>XMLDOC.Parser.parse()</tt>.\n<p/>\n<i>Note: If you pass poorly formed XML, it will cause the parser to throw\nan exception.</i>",
        "isConstant": false,
        "isPrivate": false
      },
      {
        "name": "VERSION",
        "displayName": "XMLDOC.VERSION",
        "objectType": "property",
        "propertyType": "",
        "author": "",
        "see": [],
        "since": "",
        "version": "",
        "deprecated": "",
        "memberOf": "XMLDOC",
        "overview": "The current version string of this application.",
        "isConstant": false,
        "isPrivate": false
      }
    ]
  },
  {
    "guid": 2401,
    "name": "Zop",
    "displayName": "Zop",
    "objectType": "symbol",
    "filePath": "/Users/majd/work/sproutcore/apps/sc-docs/jsdoc/app/test/functions_nested.js",
    "isNamespace": false,
    "isPrivate": false,
    "isStatic": false,
    "author": "",
    "see": [],
    "since": "",
    "version": "",
    "deprecated": "",
    "augments": [],
    "overview": "",
    "methods": [],
    "properties": []
  }
];